<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://pietraferreira.github.io/quartz/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/notes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://pietraferreira.github.io/quartz/notes/2022-08-15-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/2022-08-15-cobra-report/</guid><description>Assembler Support for the CORE-V Zc* Extension - Report We currently have a working toolchain with verified assembler. We had planned to provide the build today, however we have a remaining bug to fix.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as-slides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as-slides/</guid><description>How to add instructions to the GNU Assembler Instruction Example Using cv.starti as an example:
1 cv.starti Ln, uimmL Ln: 0 for inner loop, 1 for outer loop.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/images/github-actions.png/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/images/github-actions.png/</guid><description/></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-01-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-01-report/</guid><description>Hi all,
I am sending a report regarding the third lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-10-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-10-report/</guid><description>Hi all,
I am sending a report regarding the fourth lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-16-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-16-report/</guid><description>Hi all,
I am sending a report regarding the fifth lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-25-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-02-25-report/</guid><description>Hi all,
I am sending a report regarding the sixth lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-03-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-03-report/</guid><description>Hi all,
I am sending a report regarding the seventh lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-16-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-16-report/</guid><description>Hi all,
I am sending a report regarding the 8th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-17-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-17-report/</guid><description>Hi all,
I am sending a report regarding the 9th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-24-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-24-report/</guid><description>Hi all,
I am sending a report regarding the 10th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-30-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-03-30-report/</guid><description>Hi all,
I am sending a report regarding the 11th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-01-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-01-report/</guid><description>Hi all,
I am sending a report regarding the 11th lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-09-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-09-report/</guid><description>Hi all,
I am sending a report regarding the 12th lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-15-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-15-report/</guid><description>Hi all,
I am sending a report regarding the 13th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-22-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-22-report/</guid><description>Hi all,
I am sending a report regarding the 14th lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-28-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-04-28-report/</guid><description>Hi all,
I am sending a report regarding the 15th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-07-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-07-report/</guid><description>Hi all,
I am sending a report regarding the 16th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-14-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-14-report/</guid><description>Hi all,
I am sending a report regarding the 17th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-18-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-18-report/</guid><description>Hi all,
I am sending a report regarding the 18th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-27-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-05-27-report/</guid><description>Hi all,
I am sending a report regarding the 19th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-02-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-02-report/</guid><description>Hi all,
I am sending a report regarding the 20th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-11-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-11-report/</guid><description>Hi all,
I am sending a report regarding the 21th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-16-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-16-report/</guid><description>Hi all,
I am sending a report regarding the 22nd lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-25-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-06-25-report/</guid><description>Hi all,
I am sending a report regarding the 23rd lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-07-02-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-07-02-report/</guid><description>Hi all,
I am sending a report regarding the 24th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-09-09-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/2022-09-09-report/</guid><description>Hi all,
I am sending a report regarding the work done on the RISC-V Custom Relocation prototype project this week.</description></item><item><title>01/12/20 - Code Size Meeting</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-12-01-code-size-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-12-01-code-size-meeting/</guid><description>01/12/20 - Code Size Meeting ZFinx Notes Jiawei had some issues with some arithmetic instructions (fsqrt, fmin, fmax), an error about &amp;lsquo;unsatisfied constraints&amp;rsquo;</description></item><item><title>2-3 Trees</title><link>https://pietraferreira.github.io/quartz/notes/2-3-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/2-3-trees/</guid><description>2-3 Trees A tree, where every internal node has either:
two children and one data element (2-node); or three children and two data elements (3-node).</description></item><item><title>20/11/20 - Code Size Meeting</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-20-code-size-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-20-code-size-meeting/</guid><description>20/11/20 - Code Size Meeting (By &amp;ldquo;he&amp;rdquo; I think I mean Jiawei)
He needs to add tests to the GAS testsuite for RISC-V, testing boundary conditions and pattern match the binaries.</description></item><item><title>2020-09-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-09-28/</guid><description>2020-09-28 a5 is t1 and a4 is t0
it is optimising out add and move
adjust the address to the same mode, and move the des from one the regis, and then (instead of setupi using starti) push no rvc, then copy source to reg0 then back to reg1 then emit the label</description></item><item><title>2020-10-08</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-10-08/</guid><description>2020-10-08 need mcorev-loops flag optmisation needs to be on for it to work nothing is on by default gen functions -&amp;gt; gen starti etc you can write gen_starti etc, they can be useful</description></item><item><title>2020-10-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-10-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-10-28/</guid><description>2020-10-28 gcc/gcc/config/arc:2201
It has a gen_mac_600 which is the closest to gen_mac I could find
In gcc/gcc/config/mips:2563 it has Floating point multiply accumulate instructions but they look very different.</description></item><item><title>2020-11-19</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-11-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-11-19/</guid><description>2020-11-19 p.extbz rD, rs1
1 2 3 4 5 6 7 8 9 (define_insn &amp;#34;cv_extbz&amp;#34; [(set (match_operand:SI 0 &amp;#34;register_operand&amp;#34; &amp;#34;=r&amp;#34;) (zero_extend:SI (match_operand:HI 1 &amp;#34;register_operand&amp;#34; &amp;#34;r&amp;#34;)) )] &amp;#34;TARGET_COREV_ALU&amp;#34; &amp;#34;cv.</description></item><item><title>2021-04-06 - Tiger Jenkins Guide</title><link>https://pietraferreira.github.io/quartz/notes/daily/2021-04-06-tiger-jenkins-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2021-04-06-tiger-jenkins-guide/</guid><description>2021-04-06 - Tiger Jenkins Guide go to main wiki
jenkins
tiger-user-branches
go to build with parameters
choose my branch</description></item><item><title>2022 08 18</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-18/</guid><description>2022 08 18 Hello Robin,
Thanks for reporting this issue.
We&amp;rsquo;ve taken a look at it and it seems to be an issue with the latest development Newlib that doesn&amp;rsquo;t show up in GCC testing.</description></item><item><title>2022-05-03 - Relocation Prototype Meeting</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-05-03-relocation-prototype-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-05-03-relocation-prototype-meeting/</guid><description>Monthly (or quaterly?) meeting - Relocation Prototype 1 2 3 ../../../binutils-gdb/bfd/elfxx-riscv.c:1046:1: warning: no previous prototype for ‘riscv_reloc_name_lookup_custom’ [-Wmissing-prototypes] riscv_reloc_name_lookup_custom (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name) ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Have secondary howto table with RELOCID</description></item><item><title>2022-06-02</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-02/</guid><description>2022-06-02 Assuming we already have RELOCID in place:
There is a bool pretend_im_corev in gas/config/tc-riscv.c which sets the relocation as CORE-V.</description></item><item><title>2022-06-17 - Jeremy Relocation Notes</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-17-jeremy-relocation-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-17-jeremy-relocation-notes/</guid><description>2022-06-17 end of linker -&amp;gt; introduce the issue of being no mechanism for vendor specific relocation -&amp;gt; discuss issue of relocations, we can do vendor specific but not vendor specific relocations.</description></item><item><title>2022-06-23</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-23/</guid><description>2022-06-23 I think I am getting this error:
1 2 ../bfd/.libs/libbfd.a(elf32-riscv.o): In function `perform_relocation&amp;#39;: /home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.c:1653: undefined reference to `riscv_elf_custom_relocid&amp;#39; Because riscv_elf_custom_relocid is being called from inside perform_relocation, thus it doesn&amp;rsquo;t exist in that space.</description></item><item><title>2022-06-27</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-27-benefits-of-vms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-27-benefits-of-vms/</guid><description>2022-06-27 React Game of Life ( Here) npm init react-app react-gameoflife
HackTheBox Setting Up Can track commands on the terminal by doing: 1 2 3 script &amp;lt;name&amp;gt;.</description></item><item><title>2022-06-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-28/</guid><description>2022-06-28 Resources HackTricks Tools SMB Server Message Blocks (Port 445) (aka Common Internet File System).
To enumerate:</description></item><item><title>2022-06-29</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-29/</guid><description>2022-06-29 Web App Guide Source here.
Easy way to record when I take my creatine. When a link is tapped on the home screen, it records the visit and this preserves a record of when creatine was taken.</description></item><item><title>2022-07-03 - Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-03-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-03-relaxation/</guid><description>2022-07-03 Relaxation Most companies do assembly relaxation whereas we do linker relaxation. The assembler typically works on one source at a time so it can&amp;rsquo;t see anything that is related to other source code files whereas the linker can.</description></item><item><title>2022-07-04</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-04/</guid><description>2022-07-04 CORE-V We have a static relocation in bfd/elfnn-riscv.c (perform_relocation) which switches on the instruction type and encodes the instruction.</description></item><item><title>2022-07-05</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-05/</guid><description>2022-07-05 BFD Front End A BFD has type bfd. Using BFD consists of making references through the BFD and to data in the BFD.</description></item><item><title>2022-07-06</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-06/</guid><description>2022-07-06 HTB File Transfers PowerShell Base64 Encode and Decode We can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.</description></item><item><title>2022-07-07</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-07/</guid><description>2022-07-07 Flag to ignore main: 1 --defsym=main=0x100 To ignore _start: 1 -nostartfiles RelocID Pass *howto: 1 {type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0, complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0, pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555cb8e0 &amp;lt;bfd_elf_generic_reloc&amp;gt;, name = 0x5555556c7506 &amp;#34;R_RISCV_CVPCREL_UI12&amp;#34;} *rel: 1 {r_offset = 2, r_info = 1504, r_addend = 0} value: 3145728 We first do CVPCREL with the *howto:</description></item><item><title>2022-07-08</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-08/</guid><description>2022-07-08 Nmap Can use the -Pn switch to enumerate machines when packets are blocked by firewall. SMB Sever Message Block Usually port 445 1 smbclient -L {taget_IP} -U Administrator Impacket It is a framework written in Python for working with network protocols.</description></item><item><title>2022-07-15</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-15/</guid><description>2022-07-15 Daily Bugle Writup (TryHackMe) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 nmap -sV -sC 10.</description></item><item><title>2022-07-17</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-17/</guid><description>2022-07-17 Remove duplicates and clean file:
1 sort &amp;lt;file&amp;gt; | uniq &amp;gt; &amp;lt;output_file&amp;gt; Find processes in shell:</description></item><item><title>2022-07-24</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-24/</guid><description>2022-07-24 HTB - Catch Catching an API key out of an Android APK file.
Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ~/htb/catch &amp;gt; sudo nmap -sC -sV -oA nmap/catch 10.</description></item><item><title>2022-07-25</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-25/</guid><description>2022-07-25 flw for example is only supported by 32-bits. Therefore, there is a fail march test which uses rv32i. rv64 doesn&amp;rsquo;t support zcf, so should I still do the same thing?</description></item><item><title>2022-07-26</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-26/</guid><description>2022-07-26 c.flwsp -&amp;gt; zero-extended 6-bit immediate, scaled by 4 (4^6=4096) and the boundary is half of that minus 1, thus 2047.</description></item><item><title>2022-07-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-28/</guid><description>2022-07-28 Write up Project Plan Don&amp;rsquo;t forget linker tests for jumps! Holiday on Monday</description></item><item><title>2022-08-02-cobra-report</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-02-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-02-cobra-report/</guid><description>Assembler Support for the CORE-V Zc* Extension - Report 2nd of August 2022
The Zc* extensions are being carefully tested and the testsuite for Zc* has been expanded.</description></item><item><title>2022-08-03</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-03/</guid><description>2022-08-03 Everest Originally with WD but now with the new company (secret).
Code size improvements, get close to GCC - LLVM Overlay - can have code as overlay, goes in slow memory and you can dynamically load it to RAM.</description></item><item><title>2022-08-04</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-04/</guid><description>2022-08-04 Message Arjan to let him know the assembler is complete and where to find it. Also that we are now working on the linker and documentation.</description></item><item><title>2022-08-08-cobra-report</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-08-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-08-cobra-report/</guid><description>Assembler Support for the CORE-V Zc* Extension - Report Completed Last Week Verified Zc* with the GNU assembler (gas).</description></item><item><title>2022-08-09</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-09/</guid><description>2022-08-09 Data Storage Sizes C/C++ Storage Size (bits) Size (bytes) char Byte 8-bits 1 byte short Word 16-bits 2 bytes int Double-word 32-bits 4 bytes long Quadword 64-bits 8 bytes long long Quadword 64-bits 8 bytes int * Quadword 64-bits 8 bytes double Quadword 64-bits 8 bytes float Double quadword 128-bits 16 bytes .</description></item><item><title>2022-08-09 - Cobra Meeting</title><link>https://pietraferreira.github.io/quartz/notes/2022-08-09-cobra-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/2022-08-09-cobra-meeting/</guid><description>2022-08-09 - Cobra Meeting We have finished verifying Zc* in the GNU assembler and dealt with all open pull requests.</description></item><item><title>2022-08-09 - Cobra Meeting</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-09-cobra-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-09-cobra-meeting/</guid><description>2022-08-09 - Cobra Meeting We have finished verifying Zc* in the GNU assembler and dealt with all open pull requests.</description></item><item><title>2022-08-16</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-16/</guid><description>2022-08-16 GCC - https://github.com/pietraferreira/corev-gcc/tree/cobra-stable Binutils-GDB - https://github.com/pietraferreira/corev-binutils-gdb/tree/cobra-stable Newlib - https://sourceware.org/git/newlib-cygwin.git files built with this compiler will misinform the version that is implemented</description></item><item><title>2022-08-17</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-17/</guid><description>2022-08-17 Cobra Tasks Fix Issues: Jump table located incorrectly Relaxation (Charlie has submitted a PR) (GCC) Incorrect version Then we can test the linker.</description></item><item><title>2022-08-21 - Cobra Plan of Action</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-21-cobra-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-21-cobra-plan/</guid><description>Cobra Plan of Action Overview of Work (August) 05 of Aug Nandni (14hrs) Verified tests (no added changes besides whitespaces and typos).</description></item><item><title>2022-08-24</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-24/</guid><description>2022-08-24 pull request from your repo to the official core-v-binutils-gdb repo to merge all the assembler/linker work (Pietra?) (REBASE) pull request from your repo to the official core-v-gcc repo to merge all the gcc work (Pietra?</description></item><item><title>2022-08-25</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-25/</guid><description>2022-08-25 1 ../../../../../install/bin/riscv32-unknown-elf-gdb eh1.elf -ex &amp;#39;source ../../../../../install/share/gdb/python/gdb/ovlymgr.py&amp;#39; -ex &amp;#39;tar rem 192.168.0.134:3333&amp;#39; -ex load -ex &amp;#39;b main.c:82&amp;#39; -ex When I run:</description></item><item><title>2022-09-01</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-09-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-09-01/</guid><description>2022-09-01</description></item><item><title>Admonition Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/admonition-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/admonition-cheatsheet/</guid><description>Admonition Cheatsheet 1 2 3 4 5 6 ad-&amp;lt;type&amp;gt; # Admonition type. title: # Admonition title. collapse: # Create a collapsible admonition.</description></item><item><title>alan-turing</title><link>https://pietraferreira.github.io/quartz/notes/alan-turing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/alan-turing/</guid><description>Alan Turing Alan Mathison Turing 23rd of June 1912 to 7th of June 1954. Mathematician. Pardoned in 2013. Created the concept of a [[notes/general/turing-machines|turing machine]].</description></item><item><title>Algorithms and Data Structure</title><link>https://pietraferreira.github.io/quartz/notes/algorithms-and-data-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/algorithms-and-data-structure/</guid><description>Algorithms and Data Structure Topics [[notes/general/sets-and-maps|Sets and Maps]] [[notes/general/vectors-arrays|Vectors and Arrays]] [[notes/general/big-o-notation|Big O Notation]] [[notes/general/lists|Lists]] [[notes/general/stacks-and-queues|Stacks and Queues]] [[notes/general/hash-tables|Hash Tables]] [[notes/general/trees|Trees]] [[notes/general/sorting|Sorting]] [[notes/general/graphs|Graphs]] [[notes/general/minimum-spanning-subtree|Minimum Spanning Subtree]] [[notes/general/dijkstra-algorithm|Dijkstra]] [[notes/general/floyd-warshall|Floyd-Warshall]] [[notes/general/inkblot-algorithm|Inkblot]] [[notes/general/garbage-collection|Garbage Collection]] [[notes/general/cs-problems|Problems]] Extra Resources Visualisation Youtube Course in Java 1 Youtube Course in Java 2 Princeton Course Java MOOC by University of Helsinki Mathematical Algorithms [[notes/general/linear-equations|Linear Equations]] [[notes/general/newton-raphson|Newton-Raphson Iteration]]</description></item><item><title>Ambiguous Grammars</title><link>https://pietraferreira.github.io/quartz/notes/ambiguous-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/ambiguous-grammars/</guid><description>Ambiguous Grammars An ambiguous grammar permits more than one parse [[notes/general/trees|tree]] for some sentences. For example, parsing xxx with the following grammar: S $\rightarrow$ AA</description></item><item><title>Assembler Support for the CORE-V Zc* Extension - Report</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-15-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-15-cobra-report/</guid><description>Assembler Support for the CORE-V Zc* Extension - Report We currently have a working toolchain with verified assembler. We had planned to provide the build today, however we have a remaining bug to fix.</description></item><item><title>Assembler Support for the RISC-V Zc* Extension - Report</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-08-22-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-08-22-cobra-report/</guid><description>Assembler Support for the RISC-V Zc* Extension - Report We&amp;rsquo;ve provided an interim release of the pre-built binaries and any support necessary to use them.</description></item><item><title>Assembly Test Example - CORE-V</title><link>https://pietraferreira.github.io/quartz/notes/private/work/assembly-test-example-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/assembly-test-example-corev/</guid><description>Assembly Test Example - CORE-V 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 * { dg-do run } */ #include &amp;lt;stdlib.</description></item><item><title>B-Trees</title><link>https://pietraferreira.github.io/quartz/notes/b-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/b-trees/</guid><description>B-Trees A B-tree of order m has the following properties:
every node has at most m children. every non-leaf node (except root) has at least m/2 children.</description></item><item><title>Big O Notation</title><link>https://pietraferreira.github.io/quartz/notes/big-o-notation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/big-o-notation/</guid><description>Big O Notation It describes how the performance of an algorithm scales with the size of the problem.
[[notes/general/compiler-optimisation#Performance|Performance]] may be time to execute or amount of memory.</description></item><item><title>Binary Exploitation - By HTB</title><link>https://pietraferreira.github.io/quartz/notes/binary-exploitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/binary-exploitation/</guid><description>Binary Exploitation 00 Check file vulnerabilities: 1 checksec --file &amp;lt;filename&amp;gt; Gets rid of Stack, NX and PIE protection (-m32 changes to 32bits): 1 gcc &amp;lt;filename&amp;gt;.</description></item><item><title>Binary Heap</title><link>https://pietraferreira.github.io/quartz/notes/binary-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/binary-heap/</guid><description>Binary Heap A binary heap is a form of [[notes/general/binary-trees|binary tree]], with two additional properties:
It is a complete binary tree, meaning that all levels of the tree (except possibly the last one) are full.</description></item><item><title>Binary Trees</title><link>https://pietraferreira.github.io/quartz/notes/binary-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/binary-trees/</guid><description>Binary Trees A binary tree is a set of nodes linked into a simple structure. Every node has at most two children.</description></item><item><title>Blockchain</title><link>https://pietraferreira.github.io/quartz/notes/blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/blockchain/</guid><description>Blockchain Video source. More https://github.com/smartcontractkit/full-blockchain-solidity-course-js#welcome-to-the-course. What is a Blockchain? It is a distributed database or ledger that is shared among the nodes of a computer network.</description></item><item><title>Brunel - Computer Science Hub</title><link>https://pietraferreira.github.io/quartz/notes/university-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university-hub/</guid><description>Brunel - Computer Science Hub Here you can find everything related to my university course.
Useful Links Blackboard</description></item><item><title>Brunel - Computer Science Hub</title><link>https://pietraferreira.github.io/quartz/notes/university/university-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/university-hub/</guid><description>Brunel - Computer Science Hub Here you can find everything related to my university course.
Useful Links Brightspace</description></item><item><title>Bubble Sort</title><link>https://pietraferreira.github.io/quartz/notes/bubble-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/bubble-sort/</guid><description>Bubble Sort Bubble sort is $O(n_2)$ meaning it is:
efficient if n is small. efficient if the array is mostly sorted.</description></item><item><title>Bucket Sort</title><link>https://pietraferreira.github.io/quartz/notes/bucket-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/bucket-sort/</guid><description>Bucket Sort Generally you can&amp;rsquo;t do better than $O_{n\ log\ n}$ with binary comparison.
However, can do better if the structure of the data is known, which allows to sort it into buckets in a single operation.</description></item><item><title>Building Cobra</title><link>https://pietraferreira.github.io/quartz/notes/private/work/building-cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/building-cobra/</guid><description>How to build I have a cobra folder which contains:
1 2 ❯ ls binutils build install logs toolchain Here binutils is my corev-binutils-gdb fork, I just renamed it so the build script can find it.</description></item><item><title>C</title><link>https://pietraferreira.github.io/quartz/notes/c-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/c-language/</guid><description>C Declaration vs Definition A definition associates a name with an implementation of that name, either data or code:
A definition of a variable induces the compiler to reserve some space for that variable and possibly fill that space with a particular value.</description></item><item><title>Callouts</title><link>https://pietraferreira.github.io/quartz/notes/callouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/callouts/</guid><description>Callout support Quartz supports the same Admonition-callout syntax as Obsidian.
This includes
12 Distinct callout types (each with several aliases) Collapsable callouts See documentation on supported types and syntax here.</description></item><item><title>Chomsky Grammars</title><link>https://pietraferreira.github.io/quartz/notes/chomsky-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/chomsky-grammars/</guid><description>Chomsky Grammars Type 0 (free) grammars:
Productions of the form u $\rightarrow$ v, where: u, v are arbitrary string in V.</description></item><item><title>Classes, Types and Objects</title><link>https://pietraferreira.github.io/quartz/notes/university/classes-types-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/classes-types-objects/</guid><description>Classes, Types and Objects Notes from &amp;ldquo;Data Structures and Algorithms in Java by Michael T. Goodrich&amp;rdquo;.
![[notes/images/Pasted image 20220814184657.</description></item><item><title>Cobra</title><link>https://pietraferreira.github.io/quartz/notes/private/work/cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/cobra/</guid><description>Cobra [[notes/private/work/building-cobra|How to build]] [[notes/private/work/2022-08-21-cobra-plan|Plan of Action (August)]] Related Notes 1 2 3 4 table without ID file.</description></item><item><title>Cobra reports hub</title><link>https://pietraferreira.github.io/quartz/notes/cobra-reports-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/cobra-reports-hub/</guid><description>Cobra reports hub</description></item><item><title>Code Generation</title><link>https://pietraferreira.github.io/quartz/notes/code-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/code-generation/</guid><description>Code Generation What is Code Generation? The first part of a [[notes/general/compilers|compiler]] analyses the source code into a structure that carries the meaning of the program; this structure is generally the abstract syntax tree that&amp;rsquo;s been checked and decorated.</description></item><item><title>Compiler Flags</title><link>https://pietraferreira.github.io/quartz/notes/compiler-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-flags/</guid><description>Compiler Flags An industrial-strength [[notes/general/compilers|compiler]] like GCC and LLVM has hundreds of flags that affect how the [[notes/general/compilers|compiler]] behaves. There are many types of [[notes/general/compilers|compiler]] flags and there is no easy way to classify types of [[notes/general/compilers|compiler]] flags.</description></item><item><title>Compiler Instrumentation</title><link>https://pietraferreira.github.io/quartz/notes/compiler-instrumentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-instrumentation/</guid><description>Compiler Instrumentation As the [[notes/general/compilers|compiler]] transforms the source code, it can also &amp;lsquo;insert&amp;rsquo; additional code into a program. These transformations are called [[notes/general/compilers|compiler]] instrumentation.</description></item><item><title>Compiler Optimsation</title><link>https://pietraferreira.github.io/quartz/notes/compiler-optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-optimisation/</guid><description>Compiler Optimisation [[notes/general/compilers|Compilers]] perform a set of transformations on the source code. While some of the transformations are necessary to generate machine code, most of the transformations are done to improve the performance of programs or to reduce the code size.</description></item><item><title>Compiler Toolchains</title><link>https://pietraferreira.github.io/quartz/notes/compiler-toolchains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-toolchains/</guid><description>Compiler Toolchains [[notes/general/gnu|GNU]] [[notes/general/riscv-toolchain|RISC-V Toolchain]] [[notes/general/corev-toolchain|CORE-V Toolchain]] What is a Compiler Toolchain? A compiler toolchain is a set of tools, supporting libraries, and header files that help build a program from source to an executable that can run on a machine.</description></item><item><title>Compilers</title><link>https://pietraferreira.github.io/quartz/notes/compilers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compilers/</guid><description>Compilers A compiler is a system that converts a program from one language to another. In the context of this course, we refer to a compiler as a program that converts a high-level language like C, C++ to a low-level language like assembly language or an executable format.</description></item><item><title>CORE-V Relocations</title><link>https://pietraferreira.github.io/quartz/notes/private/work/corev-relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/corev-relocations/</guid><description>CORE-V Relocations There are two custom relocations:
BDF_RELOC_RISCV_CVPCREL_URS1: 5-bit relocation for the rs1 operand in cv.setup, its relocation number is 225.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>Courses Dump</title><link>https://pietraferreira.github.io/quartz/notes/courses-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/courses-dump/</guid><description>Courses Dump Here you can find all of the cool courses and guides I find online.
Algorithms by Princeton NYU Compilers - Class Notes Compiler Principles - Notes (GitHub) Project Based Learning - Various Projects Build your own Lisp Lots of RISC-V resources - Nikiv Wiki Linux Up Skill Challenge - Website On going Courses I am taking: [[notes/private/kanban/what-am-i-studying-kanban|here]].</description></item><item><title>CPU Architecture</title><link>https://pietraferreira.github.io/quartz/notes/cpu-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/cpu-architecture/</guid><description>CPU Architecture This is part of a guide that you can find [[notes/general/htb-stack-based-overflow-linux|here]].
A Von-Neumann architecture consists of four functional units:</description></item><item><title>Cross-Compilation</title><link>https://pietraferreira.github.io/quartz/notes/cross-compilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/cross-compilation/</guid><description>Cross-Compilation To understand the concept of cross-compilation, let’s revisit the definition of a [[notes/general/compilers|compiler]]. A [[notes/general/compilers|compiler]] is a program that converts a program from one language to another.</description></item><item><title>CS Problems</title><link>https://pietraferreira.github.io/quartz/notes/cs-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/cs-problems/</guid><description>CS Problems [[notes/general/p-vs-np|P vs NP problem.]] K-clique in a graph. Boolean satisfiability. Travelling Salesman problem. Knapsack problem. [[notes/general/linear-knapsack-problem|Linear Knapsack Problem.</description></item><item><title>Debugging Techniques</title><link>https://pietraferreira.github.io/quartz/notes/debugging-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/debugging-techniques/</guid><description>Debugging Techniques Debugging is an essential part of the software development lifecycle. Even with the most robust programming practices bugs creep in, and debugging them is not a pleasant experience.</description></item><item><title>DejaGNU Notes</title><link>https://pietraferreira.github.io/quartz/notes/private/work/dejagnu-documentation-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/dejagnu-documentation-notes/</guid><description>DejaGNU Notes General notes on DejaGNU.
It is implemented as the runtest command: runtest [options] [test]
Comprises of a command to run tests, language in which to write the tests (expect), a standard directory structure for the tests and a set of configuration files.</description></item><item><title>Dijkstra Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/dijkstra-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/dijkstra-algorithm/</guid><description>Dijkstra Algorithm It is used to determine the shortest path from one node in the graph to every other node within the same graph, provided they can be reached from the source node.</description></item><item><title>Dotfile Management</title><link>https://pietraferreira.github.io/quartz/notes/dotfile-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/dotfile-management/</guid><description>Dotfile Management My dotfiles can be found on GitHub.
Just type config anywhere, for example config status to manage the repo.</description></item><item><title>Embedded Applications</title><link>https://pietraferreira.github.io/quartz/notes/embedded-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/embedded-applications/</guid><description>Embedded Applications The definition and use case of embedded systems have evolved over time. While embedded systems are used to denote computing systems performing very specific tasks, it is no longer the case in many situations.</description></item><item><title>Endianness</title><link>https://pietraferreira.github.io/quartz/notes/endianness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/endianness/</guid><description>Endianness This is part of a guide that you can find [[notes/general/htb-stack-based-overflow-linux|here]].
Bytes are loaded in different order, called endianness.</description></item><item><title>Engineer Training Hub</title><link>https://pietraferreira.github.io/quartz/notes/engineer-training-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/engineer-training-hub/</guid><description>Engineer Training Hub Syllabus: [[notes/general/algorithms-and-data-structure|Algorithms and Data Structure]] Assembly programming C/C++ Programming [[notes/general/compilers|Compilers]] [[notes/general/gnu|GNU]] Functional Programming Modeling Operating Systems Other Languages Software Engineering</description></item><item><title>Equivalent Grammars</title><link>https://pietraferreira.github.io/quartz/notes/equivalent-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/equivalent-grammars/</guid><description>Equivalent Grammars Equivalent grammars define the same language:
G A $\rightarrow$ Ax | y
G' A $\rightarrow$ yB B $\rightarrow$ yB | $\varepsilon$</description></item><item><title>Facial Recognition Board Talk Script</title><link>https://pietraferreira.github.io/quartz/notes/facial-recognition-board-talk-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/facial-recognition-board-talk-script/</guid><description>Facial Recognition on Google&amp;rsquo;s Edge TPU AI is typically associated with high power computing and big data</description></item><item><title>Facial Recognition Board Talk Script</title><link>https://pietraferreira.github.io/quartz/notes/private/work/facial-recognition-board-talk-script-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/facial-recognition-board-talk-script-1/</guid><description>Facial Recognition on Google&amp;rsquo;s Edge TPU AI is typically associated with high power computing and big data</description></item><item><title>Facial Recognition Google Board - Script</title><link>https://pietraferreira.github.io/quartz/notes/private/work/facial-recognition-board-talk-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/facial-recognition-board-talk-script/</guid><description>Facial Recognition Google Board - Script Will was the one to actually deliver this talk as I wasn&amp;rsquo;t feeling well on that day.</description></item><item><title>File Encryption</title><link>https://pietraferreira.github.io/quartz/notes/file-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/file-encryption/</guid><description>File Encryption Windows 1 2 PS Import-Module .\Invoke-AESEncryption.ps1 PS Invoke-AESEncryption.ps1 -Mode Encrypt -Key &amp;#39;p4ssw0rd&amp;#39; -Path .\scan-results.txt Linux Encrypt 1 openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.</description></item><item><title>File Transfer Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/htb-file-transfer-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-file-transfer-cheatsheet/</guid><description>File Transfer Cheatsheet Command Description  Invoke-WebRequest https://&amp;lt;snip&amp;gt;/PowerView.ps1 -OutFile PowerView.ps1 Download a file with PowerShell IEX (New-Object Net.</description></item><item><title>File Transfers</title><link>https://pietraferreira.github.io/quartz/notes/htb-file-transfers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-file-transfers/</guid><description>File Transfers Netcat ([[notes/general/netcat|here]]) RDP ([[notes/general/rdp|here]]) [[notes/general/file-encryption|File Encryption]] [[notes/general/nginx|Nginx]] [[notes/general/lolbins|Living off the land]] Windows Download Operations PowerShell Base64 Encode and Decode We can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.</description></item><item><title>Fixups</title><link>https://pietraferreira.github.io/quartz/notes/fixups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/fixups/</guid><description>Fix-ups Fix-ups are used to represent information in instructions which is currently unknown. During instruction encoding, if some information is unknown (such as a memory location of an external symbol), it is encoded as if the value is equal to 0 and a fix-up is emitted which contains information on how to rewrite the value when information is known.</description></item><item><title>Floyd-Warshall</title><link>https://pietraferreira.github.io/quartz/notes/floyd-warshall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/floyd-warshall/</guid><description>Floyd-Warshall It is a shortest path algorithm that calculates the shorted path between all pairs of vertices.
Negative edges are allowed.</description></item><item><title>Formal Languages</title><link>https://pietraferreira.github.io/quartz/notes/formal-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/formal-languages/</guid><description>Formal Languages Formal languages are used among others as the basis for defining the grammar of programming languages and formalised versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics.</description></item><item><title>Foundation of Algorithm Analysis</title><link>https://pietraferreira.github.io/quartz/notes/university/02-alg-foundation-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/02-alg-foundation-analysis/</guid><description>Foundation of Algorithm Analysis Running time. Pseudo-code. Counting primitive operations. Running Time Varies with the input and typically grows with the input size.</description></item><item><title>Garbage Collection</title><link>https://pietraferreira.github.io/quartz/notes/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/garbage-collection/</guid><description>Garbage Collection How do you reuse memory in a program?
Explicit allocation and free: malloc/free (C), new/delete (C++).
It traces garbage collection and does reference counting.</description></item><item><title>GCC</title><link>https://pietraferreira.github.io/quartz/notes/gcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/gcc/</guid><description>GCC The popular gcc [[notes/general/compilers|compiler]] ships with the gcc toolchain. It can be downloaded from GCC mirror sites. In order to download the precompiled binaries that are ready to use, go to the  Installing GCC: Binaries page.</description></item><item><title>GCC Guide by Maxim</title><link>https://pietraferreira.github.io/quartz/notes/private/work/gcc-guide-by-maxim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/gcc-guide-by-maxim/</guid><description>GCC Guide by Maxim 1: How Generic GCC lowers GIMPLE memory operations into RTL memory operations, and how we can have a hand in its operation This is the top level function that GCC calls when it is lowering GIMPLE -&amp;gt; RTL, and wishes to generate a memory move/memory copy operation:</description></item><item><title>GDB</title><link>https://pietraferreira.github.io/quartz/notes/gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/gdb/</guid><description>GDB All the basic commands can be found [[notes/general/useful-commands-dump#GDB]].
Remote Debugging gdb can be used to debug programs running on another machine.</description></item><item><title>Generate Shellcode</title><link>https://pietraferreira.github.io/quartz/notes/generate-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/generate-shellcode/</guid><description>Generate Shellcode This is part of a guide that you can find [[notes/general/htb-stack-based-overflow-linux|here]].
We have to pay attention to:</description></item><item><title>GNU</title><link>https://pietraferreira.github.io/quartz/notes/gnu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/gnu/</guid><description>GNU Extensive collection of free software which can be used as an operating system or in parts with other operating systems.</description></item><item><title>Graphs</title><link>https://pietraferreira.github.io/quartz/notes/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/graphs/</guid><description>Graphs A graph consists of:
A set of fixed objects, nodes. A set of edges, which may have arrows and have values attached.</description></item><item><title>Graphviz</title><link>https://pietraferreira.github.io/quartz/notes/graphviz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/graphviz/</guid><description>Graphviz Graphiz is a package of tools supporting the DOT [[notes/general/graphs|graph]] description language.
DOT is a textual representation of arbitrary graphs (suffix .</description></item><item><title>HackTheBox</title><link>https://pietraferreira.github.io/quartz/notes/hackthebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hackthebox/</guid><description>HackTheBox Everything related to HackTheBox.
Files Transfers ([[notes/general/htb-file-transfers|here]]) Netcat ([[notes/general/netcat|here]]) Stack-based Buffer Overflows on Linux x86 ([[notes/general/htb-stack-based-overflow-linux|here]]) MSFConsole ([[notes/general/htb-msfconsole-cheatsheet|here]]) Meterpreter ([[notes/general/htb-meterpreter-cheatsheet|here]]) Cheatsheets Files Transfers Cheatsheet ([[notes/general/htb-file-transfer-cheatsheet|here]]) NMap Cheatsheet ([[notes/general/nmap-cheatsheet|here]]) Write-ups [[notes/general/htb-driver|Driver]] [[notes/general/htb-pandora|Pandora]] [[notes/general/htb-secret|Secret]]</description></item><item><title>Halting Problem</title><link>https://pietraferreira.github.io/quartz/notes/halting-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/halting-problem/</guid><description>Halting Problem A program to determine if any given program will complete in finite time.
So imagine you write this program, P, and in its main program it has:</description></item><item><title>Hardware Loops - COREV</title><link>https://pietraferreira.github.io/quartz/notes/daily/hardware-loops-gcc-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/hardware-loops-gcc-corev/</guid><description>Hardware Loops (GCC) - COREV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (define_insn &amp;#34;set_hwloop_cvstart&amp;#34; [(set (match_operand:SI 0 &amp;#34;le_register_operand&amp;#34; &amp;#34;=t&amp;#34;) (label_ref (match_operand 1 &amp;#34;&amp;#34; &amp;#34;&amp;#34; )) ) (use (match_operand:SI 2 &amp;#34;immediate_operand&amp;#34; &amp;#34;I&amp;#34;)) ] &amp;#34;&amp;#34; &amp;#34;cv.</description></item><item><title>Hash Tables</title><link>https://pietraferreira.github.io/quartz/notes/hash-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hash-tables/</guid><description>Hash Tables A hash table is a data structure which offers a fast implementation of the associative array (abstract data structure, also called a map, symbol table or dictionary) [[notes/general/hash-tables#API|API]].</description></item><item><title>Heapsort</title><link>https://pietraferreira.github.io/quartz/notes/heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/heapsort/</guid><description>Heapsort Uses [[notes/general/binary-heap|binary heap trees]] to [[notes/general/sorting|sort]] (I think!).
It has average [[notes/general/compiler-optimisation#Performance|performance]]: $O_{n\ log\ n}$ Worst case performance: $O_{n\ log\ n}$</description></item><item><title>Help</title><link>https://pietraferreira.github.io/quartz/notes/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/help/</guid><description>HELP Various cheatsheets of different application I use and all the help I can get compiled in one place.
Cheatsheets [[notes/general/vim-cheatsheet|Vim]] [[notes/general/iterm2-cheatsheet|iTerm2]] [[notes/obsidian-cheatsheet.</description></item><item><title>Hosting with Docker</title><link>https://pietraferreira.github.io/quartz/notes/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/docker/</guid><description>If you want to host Quartz on a machine without using a webpage hosting service, it may be easier to install Docker Compose and follow the instructions below than to install Quartz&amp;rsquo;s dependencies manually.</description></item><item><title>How to add an instruction to the GNU assembler</title><link>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as/</guid><description>How to add an instruction to the GNU assembler We can use cv.starti as an example. It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.</description></item><item><title>How to Manually Check a Test</title><link>https://pietraferreira.github.io/quartz/notes/how-to-manually-check-as-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-manually-check-as-test/</guid><description>How to Manually Check a Test Instruction listing:
![[notes/images/Pasted image 20220727125733.png]] ![[notes/images/Pasted image 20220727125701.png]]
So we have:
1 011u uurr ruud dd00 For example, if we want to test:</description></item><item><title>How to Use Creduce by Ed</title><link>https://pietraferreira.github.io/quartz/notes/daily/2021-04-23-how-to-use-creduce-by-ed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2021-04-23-how-to-use-creduce-by-ed/</guid><description>How to Use Creduce by Ed As for steps on how to use Creduce:
Take a copy of the failing test in a temporary directory:</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/howto-table/</guid><description>Howto Table The [[notes/general/relocations|relocation]] table records the list of items that the file needs (from other object files or libraries).</description></item><item><title>HTB - Driver</title><link>https://pietraferreira.github.io/quartz/notes/htb-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-driver/</guid><description>HTB - Driver Printer exploitation!!
IP: 10.10.11.106
1 sudo nmap -sC -sV -oA driver.nmap $ip Where:</description></item><item><title>HTB - Pandora</title><link>https://pietraferreira.github.io/quartz/notes/htb-pandora/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-pandora/</guid><description>HTB - Pandora We first enumerate:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo nmap -sC -sV -oA pandora 10.</description></item><item><title>HTB - Secret</title><link>https://pietraferreira.github.io/quartz/notes/htb-secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-secret/</guid><description>HTB - Secret It is all about secret ways to extract information from applications.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ~/htb/secret &amp;gt; sudo nmap -sC -sV -oA nmap/secret 10.</description></item><item><title>Identify Return Address</title><link>https://pietraferreira.github.io/quartz/notes/identify-return-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/identify-return-address/</guid><description>Identify Return Address We need a memory address where our NOPs are located to tell the EIP to jump to it.</description></item><item><title>Inkblot Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/inkblot-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/inkblot-algorithm/</guid><description>Inkblot Algorithm Couldn&amp;rsquo;t find much online about it, but I think it&amp;rsquo;s a &amp;ldquo;populating&amp;rdquo; algorithm to find a path (A-&amp;gt;B).</description></item><item><title>Instruction Set Semantics</title><link>https://pietraferreira.github.io/quartz/notes/instruction-set-semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/instruction-set-semantics/</guid><description>Instruction Set Semantics Most general is the three address instruction set:
result = operand1 operator operand2 ^44cfb5
Two address instruction sets use one of the operand addresses for the result.</description></item><item><title>Intermediate Representations</title><link>https://pietraferreira.github.io/quartz/notes/intermediate-representations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/intermediate-representations/</guid><description>Intermediate Representations There are three main ones:
[[notes/general/parse-trees|Parse Trees]] [[notes/general/parse-trees#DAGs for Parse Trees|DAGs]] [[notes/general/three-address-code|Three Address Code]]</description></item><item><title>Introduction</title><link>https://pietraferreira.github.io/quartz/notes/university/01-gp-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/01-gp-intro/</guid><description>Introduction to the Module The theme of the project will be based on the UN Sustainable Development Goals.
![[notes/images/Screenshot 2022-09-19 at 14.</description></item><item><title>Introduction to Algorithms</title><link>https://pietraferreira.github.io/quartz/notes/university/01-alg-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/01-alg-intro/</guid><description>Introduction to Algorithms An algorithm is a set of steps for solving a problem. It is a well-defined computational procedure that takes some value(s) as input and produces some value(s) as output.</description></item><item><title>Introduction to Networking</title><link>https://pietraferreira.github.io/quartz/notes/htb-intro-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-intro-networking/</guid><description>Introduction to Networking Overview There is a wide array of topologies (mesh, tree, star), mediums (ethernet, fiber, coax, wireless) and protocols (TCP, UDP, IPX).</description></item><item><title>Introduction to RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</guid><description>Introduction to RISC-V Notes on the Introduction to RISC-V LinuxFoundation course.
[[notes/general/introduction-to-riscv#Chapter 1 - Getting to know RISC-V|Chapter 1]] - Getting to know RISC-V [[notes/general/introduction-to-riscv#Chapter 2 - The RISC-V Story|Chapter 2]] - The RISC-V Story [[notes/general/introduction-to-riscv#Chapter 3 - The RISC-V Community|Chapter 3]] - The RISC-V Community [[notes/general/introduction-to-riscv#Chapter 4 - Developing RISC-V|Chapter 4]] - Developing RISC-V [[notes/general/introduction-to-riscv#Chapter 5 - RISC-V In Practice|Chapter 5]] - RISC-V in Practice Chapter 1 - Getting to know RISC-V Overview Difference between RISC-V [[notes/general/isa|ISA]] and RISC-V international.</description></item><item><title>ISA (Instruction Set Architecture)</title><link>https://pietraferreira.github.io/quartz/notes/isa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/isa/</guid><description>ISA (Instruction Set Architecture) An instruction set architecture (ISA) is an abstract model of a computer. It is also referred to as architecture or computer architecture.</description></item><item><title>iTerm2 Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/iterm2-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/iterm2-cheatsheet/</guid><description>iTerm2 Cheatsheet I basically copied this from a Git repo&amp;hellip; all very useful.
Tabs and Windows Function Shortcut New Tab ⌘ + T Close Tab or Window ⌘ + W (same as many mac apps) Go to Tab ⌘ + Number Key (ie: ⌘2 is 2nd tab) Go to Split Pane by Direction ⌘ + Option + Arrow Key Cycle iTerm Windows ⌘ + backtick (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) ⌘ + D Split Window Horizontally (same profile) ⌘ + Shift + D (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse ⌘ + Alt + Shift and then drag the pane from anywhere Fullscreen Fullscreen ⌘+ Enter Maximize a pane ⌘ + Shift + Enter (use with fullscreen to temp fullscreen a pane!</description></item><item><title>Jump Table</title><link>https://pietraferreira.github.io/quartz/notes/jump-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/jump-table/</guid><description>Jump Table It can either be an array of pointers to functions or an array of machine code jump instructions.</description></item><item><title>Knowledge Hub</title><link>https://pietraferreira.github.io/quartz/notes/knowledge-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/knowledge-hub/</guid><description>Knowledge Hub Where all of my notes live!!! There are no rules here 😎
General [[notes/general/help|HELP]] - very useful shortcuts for Vim, Obsidian (and plugins), tmux etc and general help.</description></item><item><title>Kruskal's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/kruskals-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/kruskals-algorithm/</guid><description>Kruskal&amp;rsquo;s Algorithm It is a [[notes/general/minimum-spanning-subtree|minimum spanning subtree]] algorithm.
It performs well for sparse [[notes/general/graphs]] due to simple data structures: $O_(E\ log\ N)$.</description></item><item><title>Lexical Analysis</title><link>https://pietraferreira.github.io/quartz/notes/lexical-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/lexical-analysis/</guid><description>Lexical Analysis It is the process of grouping individual characters into basic entities, known as tokens or lexemes.
Examples: integer, variable, addition operator.</description></item><item><title>Linear Equations</title><link>https://pietraferreira.github.io/quartz/notes/linear-equations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linear-equations/</guid><description>Linear Equations The basic representation is: $$\begin{align*} \begin{pmatrix} a_{11} &amp;amp; a_{12}\\ a_{21} &amp;amp; a_{22} \end{pmatrix} \begin{pmatrix} x_1\\ x_2 \end{pmatrix} = \begin{pmatrix} b_1\\ b_2 \end{pmatrix} \end{align*}$$</description></item><item><title>Linear Knapsack Problem</title><link>https://pietraferreira.github.io/quartz/notes/linear-knapsack-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linear-knapsack-problem/</guid><description>Linear Knapsack Problem Also known as the stock cutting problem.
Consider capacity 100, and object of size {53, 53, 49, 49, 3}.</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linker/</guid><description>Linker Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Linker Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/linker-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linker-relaxation/</guid><description>Linker Relaxation How the linker optimises instructions for the compiler by having a second relaxation.
Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ cat test.</description></item><item><title>Linux Fundamentals</title><link>https://pietraferreira.github.io/quartz/notes/linux-fundamentals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linux-fundamentals/</guid><description>Linux Fundamentals Bunch of old notes on Linux stuff.
Find command 1 2 3 4 5 6 7 8 9 10 11 -type f -&amp;gt; type: file -name *.</description></item><item><title>Lists</title><link>https://pietraferreira.github.io/quartz/notes/lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/lists/</guid><description>Lists ![[notes/images/lists.png]]
Lists in C 1 2 3 4 struct elem { struct elem *next; int val; }; 1 2 3 4 5 struct elem struct elem *next; struct elem *head; int val; }; 1 2 struct elem *head = NULL; struct elem *tail = NULL;</description></item><item><title>LLVM</title><link>https://pietraferreira.github.io/quartz/notes/llvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/llvm/</guid><description>LLVM The LLVM Project is a collection of modular and reusable [[notes/general/compilers|compiler]] and toolchain technologies. Prebuilt binaries of the LLVM toolchain can be downloaded from the LLVM Download Page.</description></item><item><title>LOLBins</title><link>https://pietraferreira.github.io/quartz/notes/lolbins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/lolbins/</guid><description>LOLBins Aka Living off the land binaries, which are binaries that an attacker can use to perform actions beyond their original purpose.</description></item><item><title>Meet-up 2020 CORE-V - Script</title><link>https://pietraferreira.github.io/quartz/notes/private/work/meetup-2020-corev-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/meetup-2020-corev-script/</guid><description>Meet-up 2020 CORE-V - Script Slides can be found [[assets/meetup-2020-corev-presentation-v11.odp|here]].
Good evening, I’m Pietra and today together with my colleagues Mary and Jessica we will be presenting our work on porting the GNU CORE-V toolchain.</description></item><item><title>Meterpreter</title><link>https://pietraferreira.github.io/quartz/notes/htb-meterpreter-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-meterpreter-cheatsheet/</guid><description>Meterpreter Command Description help Open Meterpreter usage help. run &amp;lt;scriptname&amp;gt; Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.</description></item><item><title>Minimum Spanning Subtree</title><link>https://pietraferreira.github.io/quartz/notes/minimum-spanning-subtree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/minimum-spanning-subtree/</guid><description>Minimum Spanning Subtree It is a subtree with the minimum possible edge weight that connects all nodes together.
There must exist no cycles in the subtree.</description></item><item><title>Modules</title><link>https://pietraferreira.github.io/quartz/notes/university/year-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/year-2/</guid><description>Modules A list of all the different modules I am taking during my second year.
Year 2 is 1/3 of the final grade!</description></item><item><title>MSFConsole Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/htb-msfconsole-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-msfconsole-cheatsheet/</guid><description>MSFConsole Cheatsheet Command Description show exploits Show all exploits within the Framework. show payloads Show all payloads within the Framework.</description></item><item><title>Netcat</title><link>https://pietraferreira.github.io/quartz/notes/netcat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/netcat/</guid><description>Netcat Networking utility for reading from and writing to network connections using TCP or UDP.
Listening 1 victim@target:~$ nc -l -p 8080 &amp;gt; SharpKatz.</description></item><item><title>Newton-Raphson Iteration</title><link>https://pietraferreira.github.io/quartz/notes/newton-raphson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/newton-raphson/</guid><description>Newton-Raphson Iteration Want to find the root of $f(x)$, for example a value for $x$ such that $f(x) = 0$.</description></item><item><title>Nginx</title><link>https://pietraferreira.github.io/quartz/notes/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/nginx/</guid><description>Nginx Used for transferring files to Apache.
Create Directory to Handle Uploaded Files 1 sudo mkdir -p /var/www/uploads/SecretUploadDirectory Change the Owner to www-data 1 sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory Create Nginx Configuration File In /etc/nginx/sites-available/upload.</description></item><item><title>Nmap Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/nmap-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/nmap-cheatsheet/</guid><description>Nmap Cheatsheet nmap flag Description -sV Versions -p &amp;lt;x&amp;gt; or -p- Port scan for port or all -Pn Disable host discovery -A Enables OS and version detection, execute built-in scripts -sC Scan with the default nmap scripts -v Verbose mode -sU UDP port scan -sS TCP SYN port scan`</description></item><item><title>P vs NP Problem</title><link>https://pietraferreira.github.io/quartz/notes/p-vs-np/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/p-vs-np/</guid><description>P vs NP Problem Imagine an Oracle. Guesses and gets the right answer.
Build by (infinitely) many processors in a tree.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>Parse Trees</title><link>https://pietraferreira.github.io/quartz/notes/parse-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/parse-trees/</guid><description>Parse Trees ![[notes/images/parse-tree-example.png]]
Grammatically $S \rightarrow A | B$ $A \rightarrow A\ x | y$ $B \rightarrow z$
Parse tree for yxxz: !</description></item><item><title>Pimm's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/pimms-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/pimms-algorithm/</guid><description>Pimm&amp;rsquo;s Algorithm It is a [[notes/general/minimum-spanning-subtree|minimum spanning subtree]] algorithm.
It scales well, fast with dense [[notes/general/graphs]].
It has a [[notes/general/compiler-optimisation#Performance|performance]] of $O_{E\ log\ N}$ with [[notes/general/binary-heap|binary heap]] and $O_{E\ +\ log\ N}$ with Fibonacci heap.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the [[notes/general/linker|dynamic linker]].</description></item><item><title>Quicksort</title><link>https://pietraferreira.github.io/quartz/notes/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/quicksort/</guid><description>Quicksort It picks a midpoint (approximate the median) and partition values, into those less than the midpoint (left) and greater (right).</description></item><item><title>RDP</title><link>https://pietraferreira.github.io/quartz/notes/rdp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/rdp/</guid><description>RDP Stands for Remote Desktop Protocol.
Mounting using rdesktop 1 rdesktop 10.10.10.132 -d HTB -u administrator -p &amp;#39;Password&amp;#39; -r disk:linux=&amp;#39;home/user/rdesktop/files&amp;#39; 1 xfreerdp /v:10.</description></item><item><title>Relocation Prototype</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype/</guid><description>Relocation Handling Prototype Introduction to the project needed for future psABI meeting eg: in COREV we have custom relocations that live in the reserved space, but we need to be able to share that reserved space with other tool chains.</description></item><item><title>Relocation Prototype Reports</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/relocation-prototype-reports-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype-reports/relocation-prototype-reports-hub/</guid><description>Relocation Prototype Reports Where I keep all of my reports related to the relocation handling prototype project.
Here they are nicely sorted:</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/relocations/</guid><description>Relocations Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item><item><title>Relocations - COREV</title><link>https://pietraferreira.github.io/quartz/notes/daily/relocations-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/relocations-corev/</guid><description>Relocations - COREV what is complain and overflow?
howto_table in bfd/elfxx-riscv.c
what is size? bitsize? pc relative is a pc relative rellocation</description></item><item><title>REST API</title><link>https://pietraferreira.github.io/quartz/notes/university/rest-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/rest-api/</guid><description>REST API APIs provide a standardised way for two applications to send data back and forth.
REST is a set of guidelines that software can use to communicate over the internet in order to make integrations simple and scalable.</description></item><item><title>RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv/</guid><description>RISC-V [[notes/general/introduction-to-riscv|Introduction to RISC-V]] [[notes/general/riscv-assembler-reference|RISC-V Assembler Reference]] Instruction Set ![[notes/images/riscv-cheatsheet-is.png]]
Reference RISC-V IS Cheatsheet ( here) RISC-V ASM Cheatsheet ( here) RISC-V Assembly for Beginners ( here) RISC-V Assembly Code Examples ( here)</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv-assembler-reference/</guid><description>RISC-V Assembler Reference This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>RISC-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/riscv-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv-toolchain/</guid><description>RISC-V Toolchain There are two RISC-V toolchains that are popularly used:
The GNU RISC-V toolchain The LLVM RISC-V toolchain Both toolchains provide a state-of-the-art optimising [[notes/general/compilers|compiler]], assembler, linker, and various other tools to build applications that run on RISC-V machines.</description></item><item><title>Scrum</title><link>https://pietraferreira.github.io/quartz/notes/university/scrum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/scrum/</guid><description>Scrum</description></item><item><title>Search</title><link>https://pietraferreira.github.io/quartz/notes/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/search/</guid><description>Quartz supports two modes of searching through content.
Full-text Full-text search is the default in Quartz. It produces results that exactly match the search query.</description></item><item><title>Sets and Maps</title><link>https://pietraferreira.github.io/quartz/notes/sets-and-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sets-and-maps/</guid><description>Sets and Maps Sets are a collection of objects:
They might be ordered or unordered. Two variants: Single instance of any object.</description></item><item><title>Shell Sort</title><link>https://pietraferreira.github.io/quartz/notes/shell-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/shell-sort/</guid><description>Shell Sort Shell sort adds one more loop outside [[notes/general/bubble-sort|bubble sort]].
It starts by sorting small overlapping subsets, then makes then smaller but by then the array is mostly sorted.</description></item><item><title>Software Overlay Standard</title><link>https://pietraferreira.github.io/quartz/notes/private/work/software-overlay-standard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/software-overlay-standard/</guid><description>Software Overlay Standard To solve the limited memory issue with embedded systems, we use virtual memory. Meaning the OS will use a hardware MMU (Memory Management Unit) with direct mapping between the virtual and physical memory.</description></item><item><title>Sorting</title><link>https://pietraferreira.github.io/quartz/notes/sorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sorting/</guid><description>Sorting Sorting methods [[notes/general/bubble-sort|Bubble Sort]] [[notes/general/shell-sort|Shell Sort]] [[notes/general/quicksort|Quicksort]] [[notes/general/heapsort|Heapsort]] [[notes/general/bucket-sort|Bucket Sort]] Stability A stable sort guarantee to preserve the ordering from a first sort, where the second sort finds the records to be equal.</description></item><item><title>Source Code Optimisation</title><link>https://pietraferreira.github.io/quartz/notes/source-code-optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/source-code-optimisation/</guid><description>Source Code Optimisation In addition to [[notes/general/compilers|compiler]] optimisations, there are several software engineering techniques to reduce code size. These techniques take advantage of well-known software engineering methodologies and programming language features.</description></item><item><title>Stack-based Overflow - Linux x86</title><link>https://pietraferreira.github.io/quartz/notes/htb-stack-based-overflow-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-stack-based-overflow-linux/</guid><description>Stack-based Overflow - Linux x86 They are caused by incorrect program code, which cannot process too large amounts of data correctly by the CPU and can, therefore, manipulate the CPU&amp;rsquo;s processing.</description></item><item><title>Stack-overflow Prevention Techniques and Mechanisms</title><link>https://pietraferreira.github.io/quartz/notes/so-prevention-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/so-prevention-techniques/</guid><description>Stack-overflow Prevention Techniques and Mechanisms Security mechanisms:
Canaries Address Space Layout Randomisation ([[notes/general/cpu-architecture#ASLR]]) Data Execution Prevention (DEP) Canaries They are known values written to the stack between buffer and control data to detect buffer overflows.</description></item><item><title>Stacks and Queues</title><link>https://pietraferreira.github.io/quartz/notes/stacks-and-queues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/stacks-and-queues/</guid><description>Stacks and Queues Stack: last in, first out (LIFO), simple [[notes/general/lists|list]] works well for this.
Think of a stack of plates.</description></item><item><title>Strode College Talk - Script</title><link>https://pietraferreira.github.io/quartz/notes/private/work/strode-talk-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/strode-talk-script/</guid><description>Strode College Talk - Script What do I do? I&amp;rsquo;m currently a software engineer at Embecosm. At Embecosm we work on the boundary of hardware, more specifically with compilers.</description></item><item><title>Strode Talk Script</title><link>https://pietraferreira.github.io/quartz/notes/private/work/strode-talk-script-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/strode-talk-script-1/</guid><description>Strode Talk Script What do I do? I&amp;rsquo;m currently a software engineer at Embecosm. At Embecosm we work on the boundary of hardware, more specifically with compilers.</description></item><item><title>Strode Talk Script</title><link>https://pietraferreira.github.io/quartz/notes/strode-talk-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/strode-talk-script/</guid><description>Strode Talk Script What do I do? I&amp;rsquo;m currently a software engineer at Embecosm. At Embecosm we work on the boundary of hardware, more specifically with compilers.</description></item><item><title>Syntax Directed Translation</title><link>https://pietraferreira.github.io/quartz/notes/syntax-directed-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/syntax-directed-translation/</guid><description>Syntax Directed Translation Use attribute grammars, where productions are supplemented with information to control semantic analysis and translation.
Associate attributes with each grammar symbol to describe its properties.</description></item><item><title>Sysroot</title><link>https://pietraferreira.github.io/quartz/notes/sysroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sysroot/</guid><description>Sysroot Any [[notes/general/compilers|compiler]] needs to know where the standard headers, standard libraries, and the c-runtime are present. All of these are packaged together for each target (e.</description></item><item><title>Take Control of EIP</title><link>https://pietraferreira.github.io/quartz/notes/take-control-eip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/take-control-eip/</guid><description>Take Control of EIP This is part of a guide that you can find [[notes/general/htb-stack-based-overflow-linux|here]].
We need to get the instruction pointer (EIP) under control so we can tell it to which address to jump.</description></item><item><title>Task Hub</title><link>https://pietraferreira.github.io/quartz/notes/task-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/task-hub/</guid><description>Tasks For Today 1 2 not done due today Available Tasks 1 2 not done path does not include private/ Completed 1 done</description></item><item><title>Testing Relaxation - COREV</title><link>https://pietraferreira.github.io/quartz/notes/daily/testing-relaxation-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/testing-relaxation-corev/</guid><description>Testing Relaxation - COREV readelf -r on .o files -&amp;gt; looks for particular relocations -&amp;gt; instead of -a it checks if we&amp;rsquo;re getting the right relocation</description></item><item><title>Three Address Code</title><link>https://pietraferreira.github.io/quartz/notes/three-address-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/three-address-code/</guid><description>Three Address Code [[notes/general/parse-trees|Parse trees]] are sometimes used in early stages of [[notes/general/compilers]].
They are not ideal for [[notes/general/compiler-optimisation|optimisation]].</description></item><item><title>Tiger - Sync-up</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-11-18-tiger-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-11-18-tiger-meeting/</guid><description>Tiger - Synch-up Paolo been working on testing. He has TIGER/toolchain/gcc-test-scan, inside he has folders with errors for practicality. First take the directories from Jenkins and run the script.</description></item><item><title>Tiger Optimisation (memset/memcpy)</title><link>https://pietraferreira.github.io/quartz/notes/daily/tiger-optimisation-memset-memcpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/tiger-optimisation-memset-memcpy/</guid><description>Tiger Optimisation (memset/memcpy) Optimising expansion of memcpy/memset using hardware loops Currently memcpy and memset get expanded to a list of stores and loads for small sized values.</description></item><item><title>Titan Simulator Meeting</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2021-08-05-titan-simulator-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2021-08-05-titan-simulator-meeting/</guid><description>05/08/21 - Titan Simulator Meeting The source code is in the LLVM project: BSCSimulator.cpp.
Central to this is the include file: BSCGenRegisterInfo.</description></item><item><title>Tmux Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/tmux-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/tmux-cheatsheet/</guid><description>Tmux Cheatsheet tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.</description></item><item><title>Trees</title><link>https://pietraferreira.github.io/quartz/notes/trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/trees/</guid><description>Trees Abstract data type that represents a hierarchical tree structure with a set of connected nodes. Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the root node, which has no parent.</description></item><item><title>TryHackMe - Encryption 101</title><link>https://pietraferreira.github.io/quartz/notes/thm-encryption101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/thm-encryption101/</guid><description>Encryption - Crypto 101 Ciphertext - The result of encrypting a plain text, encrypted data
Cipher - A method of encrypting or decrypting data.</description></item><item><title>TryHackMe - Metasploit</title><link>https://pietraferreira.github.io/quartz/notes/thm-metasploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/thm-metasploit/</guid><description>Metasploit Docs: https://docs.metasploit.com/
Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation.</description></item><item><title>turing-machines</title><link>https://pietraferreira.github.io/quartz/notes/turing-machines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/turing-machines/</guid><description>Turing Machines Turning machine manipulate symbols on a strip of tape according to a table of rules and it is capable of implementing any computer algorithm.</description></item><item><title>UML @ Classroom - Chapter 3</title><link>https://pietraferreira.github.io/quartz/notes/university/uml-classroom-chap3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/uml-classroom-chap3/</guid><description>UML @ Classroom - Chapter 3 Use Case Diagram Allows to describe the possible usage scenarios (use cases) that a system is developed for.</description></item><item><title>UML Class Diagram</title><link>https://pietraferreira.github.io/quartz/notes/university/uml-class-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/uml-class-diagram/</guid><description>UML - Class Diagram Objects Individuals of a system:
![[notes/images/Screenshot 2022-10-21 at 13.10.25.png]]
Object Diagram The objects of a system and their relationships, snapshot of objects at a specific moment in time:</description></item><item><title>UML Sequence Diagram</title><link>https://pietraferreira.github.io/quartz/notes/university/uml-sequence-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/uml-sequence-diagram/</guid><description>UML Sequence Diagram Inter-object behaviour: interactions between objects.
Interaction: how data is exchanged between interaction partners.
Interaction partners: - Human (lectures, administrator, &amp;hellip;) - Non-human (sever, printer, executable software, &amp;hellip;)</description></item><item><title>University of Bologna Meeting</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2021-08-13-uob-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2021-08-13-uob-meeting/</guid><description>University of Bologna Meeting They seem to be working on Immediate Branching
I reported that we finished all testing
Just Nazareno showed up.</description></item><item><title>Useful Commands Dump</title><link>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</guid><description>Useful Commands Dump Well&amp;hellip; where I dump any useful commands I find and them hopefully I&amp;rsquo;ll categorise them&amp;hellip; eventually&amp;hellip;</description></item><item><title>User Models and Conceptual Design</title><link>https://pietraferreira.github.io/quartz/notes/university/user-models-and-conceptual-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/user-models-and-conceptual-design/</guid><description>User Models and Conceptual Design Making Sense of the World Transparent objects expose their functions, for example a bicycle.
Opaque objects however, hide their functions.</description></item><item><title>Vectors and Arrays</title><link>https://pietraferreira.github.io/quartz/notes/vectors-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/vectors-arrays/</guid><description>Vectors and Arrays Vectors are typically 1-d whereas arrays can be multi-dimensional. in C/C++ they are indexed from zero.</description></item><item><title>Vim Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/vim-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/vim-cheatsheet/</guid><description>Vim Cheatsheet Thankfully I remember most of these but all of them are great :)
MD to PDF and MD to HTML are custom.</description></item><item><title>What am I Studying Kanban</title><link>https://pietraferreira.github.io/quartz/notes/private/kanban/what-am-i-studying-kanban/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/kanban/what-am-i-studying-kanban/</guid><description>Studying Interesting courses: [[notes/general/courses-dump|here]] Intro to Binary Exploitation (8) - https www.youtube.com/watch?v=NAUA1EB-TZg - [[notes/general/binary-exploitation|Notes]] ^u2mm1t HackTheBox -https://app.hackthebox.com/home FullStack - https://fullstackopen.</description></item><item><title>Work Hub</title><link>https://pietraferreira.github.io/quartz/notes/private/work/work-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/work-hub/</guid><description>Work Hub Everything work related, mostly organised by project.
Useful Links Wiki Engineering Training Onboarding Guide for the OpenHW Group Projects Engineer Training [[notes/general/engineer-training-hub|Hub]] RISC-V [[notes/general/riscv|Notes]] Relocation Handling Prototype (CORE-V) [[notes/private/work/relocation-prototype/relocation-prototype|Notes]] [[notes/private/work/relocation-prototype/relocation-prototype-reports/relocation-prototype-reports-hub|Reports]] CORE-V [[notes/general/corev-toolchain|CORE-V Toolchain]] [[notes/private/work/assembly-test-example-corev|Assembly Test Example]] Cobra (CORE-V) [[notes/private/work/cobra|Notes]] Videos Porting the GNU CORE-V Toolchain Adding an Instruction to the GNU assembler GNU toolchain for CORE-V (Jessica talks about relocation handling here) Tiger [[assets/tiger.</description></item><item><title>Work Hub</title><link>https://pietraferreira.github.io/quartz/notes/work-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/work-hub/</guid><description>Work Hub Everything work related, mostly organised by project.
Useful Links Wiki Engineering Training Onboarding Guide for the OpenHW Group Projects Engineer Training Hub RISC-V Notes Relocation Handling Prototype (CORE-V) Notes Reports CORE-V CORE-V Toolchain Assembly Test Example Videos Porting the GNU CORE-V Toolchain Adding an Instruction to the GNU assembler GNU toolchain for CORE-V (Jessica talks about relocation handling here) Tiger Introduction to the project DejaGNU DejaGNU documentation notes LLVM LLVM How to Write a LLVM backend GCC GCC Talks 2020 Meetup Script Slides Facial Recognition - Coral Board Script Strode College Talk - About me Script</description></item><item><title>ZFinx Notes</title><link>https://pietraferreira.github.io/quartz/notes/daily/zfinx-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/zfinx-notes/</guid><description>ZFinx Notes Hi I&amp;rsquo;m Pietra, I&amp;rsquo;ve been looking at your problem with my colleagues Mary and Jessica. I&amp;rsquo;m wondering if there were any changes to the problem since we last spoke?</description></item></channel></rss>