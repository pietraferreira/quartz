<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://pietraferreira.github.io/quartz/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying Quartz to the Web</title><link>https://pietraferreira.github.io/quartz/notes/hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hosting/</guid><description>Hosting on GitHub Pages Quartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go!</description></item><item><title>2-3 Trees</title><link>https://pietraferreira.github.io/quartz/notes/2-3-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/2-3-trees/</guid><description>2-3 Trees A tree, where every internal node has either:
two children and one data element (2-node); or three children and two data elements (3-node).</description></item><item><title>2020-09-07</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-09-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-09-07/</guid><description>Linker readelf -r on .o files -&amp;gt; looks for particular relocations -&amp;gt; instead of -a it checks if we&amp;rsquo;re getting the right relocation</description></item><item><title>2020-09-18 - GCC Guide by Maxim</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-09-18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-09-18/</guid><description>2020-09-18 - GCC Guide by Maxim 1: How Generic GCC lowers GIMPLE memory operations into RTL memory operations, and how we can have a hand in its operation This is the top level function that GCC calls when it is lowering GIMPLE -&amp;gt; RTL, and wishes to generate a memory move/memory copy operation:</description></item><item><title>2020-09-25 - Hardware Loops</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-09-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-09-25/</guid><description>2020-09-25 - Hardware Loops 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (define_insn &amp;#34;set_hwloop_cvstart&amp;#34; [(set (match_operand:SI 0 &amp;#34;le_register_operand&amp;#34; &amp;#34;=t&amp;#34;) (label_ref (match_operand 1 &amp;#34;&amp;#34; &amp;#34;&amp;#34; )) ) (use (match_operand:SI 2 &amp;#34;immediate_operand&amp;#34; &amp;#34;I&amp;#34;)) ] &amp;#34;&amp;#34; &amp;#34;cv.</description></item><item><title>2020-09-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-09-28/</guid><description>2020-09-28 a5 is t1 and a4 is t0
it is optimising out add and move
adjust the address to the same mode, and move the des from one the regis, and then (instead of setupi using starti) push no rvc, then copy source to reg0 then back to reg1 then emit the label</description></item><item><title>2020-10-02 - Relocations</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-10-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-10-02/</guid><description>2020-10-02 - Relocations what is complain and overflow?
howto_table in bfd/elfxx-riscv.c
what is size? bitsize? pc relative is a pc relative rellocation</description></item><item><title>2020-10-08</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-10-08/</guid><description>2020-10-08 need mcorev-loops flag optmisation needs to be on for it to work nothing is on by default gen functions -&amp;gt; gen starti etc you can write gen_starti etc, they can be useful</description></item><item><title>2020-10-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-10-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-10-28/</guid><description>2020-10-28 gcc/gcc/config/arc:2201
It has a gen_mac_600 which is the closest to gen_mac I could find
In gcc/gcc/config/mips:2563 it has Floating point multiply accumulate instructions but they look very different.</description></item><item><title>2020-11-13 - ZFinx Notes</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-11-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-11-13/</guid><description>2020-11-13 - ZFinx Notes Hi I&amp;rsquo;m Pietra, I&amp;rsquo;ve been looking at your problem with my colleagues Mary and Jessica. I&amp;rsquo;m wondering if there were any changes to the problem since we last spoke?</description></item><item><title>2020-11-18</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-11-18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-11-18/</guid><description>2020-11-18 - Tiger Meeting Notes Paolo been working on testing. He has TIGER/toolchain/gcc-test-scan, inside he has folders with errors for practicality.</description></item><item><title>2020-11-19</title><link>https://pietraferreira.github.io/quartz/notes/daily/2020-11-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2020-11-19/</guid><description>2020-11-19 p.extbz rD, rs1
1 2 3 4 5 6 7 8 9 (define_insn &amp;#34;cv_extbz&amp;#34; [(set (match_operand:SI 0 &amp;#34;register_operand&amp;#34; &amp;#34;=r&amp;#34;) (zero_extend:SI (match_operand:HI 1 &amp;#34;register_operand&amp;#34; &amp;#34;r&amp;#34;)) )] &amp;#34;TARGET_COREV_ALU&amp;#34; &amp;#34;cv.</description></item><item><title>2021-01-13 - Tiger Optimisation (memset/memcpy)</title><link>https://pietraferreira.github.io/quartz/notes/daily/2021-01-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2021-01-13/</guid><description>2021-01-13 - Tiger Optimisation (memset/memcpy) Optimising expansion of memcpy/memset using hardware loops Currently memcpy and memset get expanded to a list of stores and loads for small sized values.</description></item><item><title>2021-04-06</title><link>https://pietraferreira.github.io/quartz/notes/daily/2021-04-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2021-04-06/</guid><description>2021-04-06 go to main wiki
jenkins
tiger-user-branches
go to build with parameters
choose my branch
riscv32-clang-gcc-testing
imc ilp 32</description></item><item><title>2021-04-23 - How to Use Creduce by Ed</title><link>https://pietraferreira.github.io/quartz/notes/daily/2021-04-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2021-04-23/</guid><description>2021-04-23 - How to Use Creduce by Ed As for steps on how to use Creduce:
Take a copy of the failing test in a temporary directory:</description></item><item><title>2022-06-17 - Jeremy Relocation Notes</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-17/</guid><description>2022-06-17 - Jeremy Relocation Notes end of linker -&amp;gt; introduce the issue of being no mechanism for vendor specific relocation -&amp;gt; discuss issue of relocations, we can do vendor specific but not vendor specific relocations.</description></item><item><title>2022-06-27</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-27/</guid><description>2022-06-27 React Game of Life ( Here) npm init react-app react-gameoflife
HackTheBox Setting Up Can track commands on the terminal by doing: 1 2 3 script &amp;lt;name&amp;gt;.</description></item><item><title>2022-06-28</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-28/</guid><description>2022-06-28 Resources HackTricks Tools SMB Server Message Blocks (Port 445) (aka Common Internet File System).
To enumerate:</description></item><item><title>2022-06-29</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-29/</guid><description>2022-06-29 Web App Guide Source here.
Easy way to record when I take my creatine. When a link is tapped on the home screen, it records the visit and this preserves a record of when creatine was taken.</description></item><item><title>2022-06-30</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-30/</guid><description>2022-06-30 Linker Linking is the process of bringing external programs together required by the one we write for its successful execution.</description></item><item><title>2022-07-01-blockchain</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-01/</guid><description>2022-07-01 - Blockchain Video source. More here. What is a Blockchain? It is a distributed database or ledger that is shared among the nodes of a computer network.</description></item><item><title>2022-07-03</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-03/</guid><description>2022-07-03 Relaxation Most companies do assembly relaxation whereas we do linker relaxation. The assembler typically works on one source at a time so it can&amp;rsquo;t see anything that is related to other source code files whereas the linker can.</description></item><item><title>2022-07-04</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-07-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-07-04/</guid><description>2022-07-04 CORE-V We have a static relocation in bfd/elfnn-riscv.c (perform_relocation) which switches on the instruction type and encodes the instruction.</description></item><item><title>Admonition Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/admonition-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/admonition-cheatsheet/</guid><description>Admonition Cheatsheet 1 2 3 4 5 6 ad-&amp;lt;type&amp;gt; # Admonition type. title: # Admonition title. collapse: # Create a collapsible admonition.</description></item><item><title>Algorithms and Data Structure</title><link>https://pietraferreira.github.io/quartz/notes/algorithms-and-data-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/algorithms-and-data-structure/</guid><description>Algorithms and Data Structure Topics Sets and Maps Vectors and Arrays Big O Notation Lists Stacks and Queues Hash Tables Trees Sorting Graphs Minimum Spanning Subtree Dijkstra Floyd-Warshall Inkblot Garbage Collection Problems Extra Resources Visualisation Youtube Course in Java 1 Youtube Course in Java 2 Princeton Course Java MOOC by University of Helsinki Mathematical Algorithms Linear Equations Newton-Raphson Iteration</description></item><item><title>Ambiguous Grammars</title><link>https://pietraferreira.github.io/quartz/notes/ambiguous-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/ambiguous-grammars/</guid><description>Ambiguous Grammars An ambiguous grammar permits more than one parse tree for some sentences. For example, parsing xxx with the following grammar: S $\rightarrow$ AA</description></item><item><title>B-Trees</title><link>https://pietraferreira.github.io/quartz/notes/b-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/b-trees/</guid><description>B-Trees A B-tree of order m has the following properties:
every node has at most m children. every non-leaf node (except root) has at least m/2 children.</description></item><item><title>Big O Notation</title><link>https://pietraferreira.github.io/quartz/notes/big-o-notation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/big-o-notation/</guid><description>Big O Notation It describes how the performance of an algorithm scales with the size of the problem.
Performance may be time to execute or amount of memory.</description></item><item><title>Binary Heap</title><link>https://pietraferreira.github.io/quartz/notes/binary-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/binary-heap/</guid><description>Binary Heap A binary heap is a form of binary tree, with two additional properties:
It is a complete binary tree, meaning that all levels of the tree (except possibly the last one) are full.</description></item><item><title>Binary Trees</title><link>https://pietraferreira.github.io/quartz/notes/binary-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/binary-trees/</guid><description>Binary Trees A binary tree is a set of nodes linked into a simple structure. Every node has at most two children.</description></item><item><title>Brunel - Computer Science Hub</title><link>https://pietraferreira.github.io/quartz/notes/university-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university-hub/</guid><description>Brunel - Computer Science Hub Here you can find everything related to my university course.
Useful Links Blackboard</description></item><item><title>Brunel - Computer Science Hub</title><link>https://pietraferreira.github.io/quartz/notes/university/university-hub-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/university-hub-2/</guid><description>Brunel - Computer Science Hub Here you can find everything related to my university course.
Useful Links Blackboard</description></item><item><title>Brunel - Computer Science Hub</title><link>https://pietraferreira.github.io/quartz/notes/university/university-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/university-hub/</guid><description>Brunel - Computer Science Hub Here you can find everything related to my university course.
Useful Links Blackboard</description></item><item><title>Bubble Sort</title><link>https://pietraferreira.github.io/quartz/notes/bubble-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/bubble-sort/</guid><description>Bubble Sort Bubble sort is $O(n_2)$ meaning it is:
efficient if n is small. efficient if the array is mostly sorted.</description></item><item><title>Bucket Sort</title><link>https://pietraferreira.github.io/quartz/notes/bucket-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/bucket-sort/</guid><description>Bucket Sort Generally you can&amp;rsquo;t do better than $O_{n\ log\ n}$ with binary comparison.
However, can do better if the structure of the data is known, which allows to sort it into buckets in a single operation.</description></item><item><title>Chomsky Grammars</title><link>https://pietraferreira.github.io/quartz/notes/chomsky-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/chomsky-grammars/</guid><description>Chomsky Grammars Type 0 (free) grammars:
Productions of the form u $\rightarrow$ v, where: u, v are arbitrary string in V.</description></item><item><title>Code Generation</title><link>https://pietraferreira.github.io/quartz/notes/code-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/code-generation/</guid><description>Code Generation What is Code Generation? The first part of a compiler analyses the source code into a structure that carries the meaning of the program; this structure is generally the abstract syntax tree that&amp;rsquo;s been checked and decorated.</description></item><item><title>Compiler Flags</title><link>https://pietraferreira.github.io/quartz/notes/compiler-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-flags/</guid><description>Compiler Flags An industrial-strength compiler like GCC and LLVM has hundreds of flags that affect how the compiler behaves. There are many types of compiler flags and there is no easy way to classify types of compiler flags.</description></item><item><title>Compiler Instrumentation</title><link>https://pietraferreira.github.io/quartz/notes/compiler-instrumentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-instrumentation/</guid><description>Compiler Instrumentation As the compiler transforms the source code, it can also &amp;lsquo;insert&amp;rsquo; additional code into a program. These transformations are called compiler instrumentation.</description></item><item><title>Compiler Optimsation</title><link>https://pietraferreira.github.io/quartz/notes/compiler-optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-optimisation/</guid><description>Compiler Optimisation Compilers perform a set of transformations on the source code. While some of the transformations are necessary to generate machine code, most of the transformations are done to improve the performance of programs or to reduce the code size.</description></item><item><title>Compiler Toolchains</title><link>https://pietraferreira.github.io/quartz/notes/compiler-toolchains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-toolchains/</guid><description>Compiler Toolchains GCC Toolchain LLVM Toolchain RISC-V Toolchain CORE-V Toolchain What is a Compiler Toolchain?</description></item><item><title>Compilers</title><link>https://pietraferreira.github.io/quartz/notes/compilers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compilers/</guid><description>Compilers A compiler is a system that converts a program from one language to another. In the context of this course, we refer to a compiler as a program that converts a high-level language like C, C++ to a low-level language like assembly language or an executable format.</description></item><item><title>Configuration</title><link>https://pietraferreira.github.io/quartz/notes/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/config/</guid><description>Configuration Quartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you&amp;rsquo;d like to get.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>Courses Dump</title><link>https://pietraferreira.github.io/quartz/notes/courses-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/courses-dump/</guid><description>Courses Dump Here you can find all of the cool courses and guides I find online.
Algorithms by Princeton NYU Compilers - Class Notes Compiler Principles - Notes (GitHub) Project Based Learning - Various Projects Build your own Lisp Lots of RISC-V resources - Nikiv Wiki Linux Up Skill Challenge - Website On going Courses I am taking: here.</description></item><item><title>Cross-Compilation</title><link>https://pietraferreira.github.io/quartz/notes/cross-compilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/cross-compilation/</guid><description>Cross-Compilation To understand the concept of cross-compilation, let’s revisit the definition of a compiler. A compiler is a program that converts a program from one language to another.</description></item><item><title>CS Problems</title><link>https://pietraferreira.github.io/quartz/notes/cs-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/cs-problems/</guid><description>CS Problems P vs NP problem. K-clique in a graph. Boolean satisfiability. Travelling Salesman problem. Knapsack problem. Linear Knapsack Problem.</description></item><item><title>Debugging Techniques</title><link>https://pietraferreira.github.io/quartz/notes/debugging-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/debugging-techniques/</guid><description>Debugging Techniques Debugging is an essential part of the software development lifecycle. Even with the most robust programming practices bugs creep in, and debugging them is not a pleasant experience.</description></item><item><title>Dijkstra Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/dijkstra-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/dijkstra-algorithm/</guid><description>Dijkstra Algorithm It is used to determine the shortest path from one node in the graph to every other node within the same graph, provided they can be reached from the source node.</description></item><item><title>Dotfile Management</title><link>https://pietraferreira.github.io/quartz/notes/dotfile-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/dotfile-management/</guid><description>Dotfile Management My dotfiles can be found on GitHub.
Just type config anywhere, for example config status to manage the repo.</description></item><item><title>Embedded Applications</title><link>https://pietraferreira.github.io/quartz/notes/embedded-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/embedded-applications/</guid><description>Embedded Applications The definition and use case of embedded systems have evolved over time. While embedded systems are used to denote computing systems performing very specific tasks, it is no longer the case in many situations.</description></item><item><title>Engineer Training Hub</title><link>https://pietraferreira.github.io/quartz/notes/engineer-training-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/engineer-training-hub/</guid><description>Engineer Training Hub Syllabus: Algorithms and Data Structure
Assembly programming C/C++ Programming Compilers
Functional Programming Modeling Operating Systems Other Languages Software Engineering</description></item><item><title>Equivalent Grammars</title><link>https://pietraferreira.github.io/quartz/notes/equivalent-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/equivalent-grammars/</guid><description>Equivalent Grammars Equivalent grammars define the same language:
G A $\rightarrow$ Ax | y
G' A $\rightarrow$ yB B $\rightarrow$ yB | $\varepsilon$</description></item><item><title>Fixups</title><link>https://pietraferreira.github.io/quartz/notes/fixups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/fixups/</guid><description>Fix-ups Fix-ups are used to represent information in instructions which is currently unknown. During instruction encoding, if some information is unknown (such as a memory location of an external symbol), it is encoded as if the value is equal to 0 and a fix-up is emitted which contains information on how to rewrite the value when information is known.</description></item><item><title>Floyd-Warshall</title><link>https://pietraferreira.github.io/quartz/notes/floyd-warshall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/floyd-warshall/</guid><description>Floyd-Warshall It is a shortest path algorithm that calculates the shorted path between all pairs of vertices.
Negative edges are allowed.</description></item><item><title>Formal Languages</title><link>https://pietraferreira.github.io/quartz/notes/formal-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/formal-languages/</guid><description>Formal Languages Formal languages are used among others as the basis for defining the grammar of programming languages and formalised versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics.</description></item><item><title>Garbage Collection</title><link>https://pietraferreira.github.io/quartz/notes/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/garbage-collection/</guid><description>Garbage Collection How do you reuse memory in a program?
Explicit allocation and free: malloc/free (C), new/delete (C++).
It traces garbage collection and does reference counting.</description></item><item><title>GCC</title><link>https://pietraferreira.github.io/quartz/notes/gcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/gcc/</guid><description>GCC The popular gcc compiler ships with the gcc toolchain. It can be downloaded from GCC mirror sites. In order to download the precompiled binaries that are ready to use, go to the  Installing GCC: Binaries page.</description></item><item><title>GDB</title><link>https://pietraferreira.github.io/quartz/notes/gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/gdb/</guid><description>GDB All the basic commands can be found .
Remote Debugging gdb can be used to debug programs running on another machine.</description></item><item><title>Graphs</title><link>https://pietraferreira.github.io/quartz/notes/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/graphs/</guid><description>Graphs A graph consists of:
A set of fixed objects, nodes. A set of edges, which may have arrows and have values attached.</description></item><item><title>Graphviz</title><link>https://pietraferreira.github.io/quartz/notes/graphviz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/graphviz/</guid><description>Graphviz Graphiz is a package of tools supporting the DOT graph description language.
DOT is a textual representation of arbitrary graphs (suffix .</description></item><item><title>Halting Problem</title><link>https://pietraferreira.github.io/quartz/notes/halting-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/halting-problem/</guid><description>Halting Problem A program to determine if any given program will complete in finite time.
So imagine you write this program, P, and in its main program it has:</description></item><item><title>Hash Tables</title><link>https://pietraferreira.github.io/quartz/notes/hash-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hash-tables/</guid><description>Hash Tables A hash table is a data structure which offers a fast implementation of the associative array (abstract data structure, also called a map, symbol table or dictionary) .</description></item><item><title>Heapsort</title><link>https://pietraferreira.github.io/quartz/notes/heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/heapsort/</guid><description>Heapsort Uses binary heap trees to sort (I think!).
It has average : $O_{n\ log\ n}$ Worst case performance: $O_{n\ log\ n}$</description></item><item><title>Help</title><link>https://pietraferreira.github.io/quartz/notes/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/help/</guid><description>HELP Various cheatsheets of different application I use and all the help I can get compiled in one place.
Cheatsheets Vim iTerm2 Obsidian Tmux Hacking x86 CheatSheet Reverse Engineering Malicious Code x86 Opcode and Instructions Linux System Call Table for x86-64 HTTP Status List Other Commands Dump Linux Fundamentals Dotfiles Management Courses Dump All of them 1 2 3 4 table without ID title as &amp;#34;Title&amp;#34;, file.</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/howto-table/</guid><description>Howto Table a.k.a. Relocation Table The relocation table records the list of items that the file needs (from other object files or libraries).</description></item><item><title>Inkblot Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/inkblot-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/inkblot-algorithm/</guid><description>Inkblot Algorithm Couldn&amp;rsquo;t find much online about it, but I think it&amp;rsquo;s a &amp;ldquo;populating&amp;rdquo; algorithm to find a path (A-&amp;gt;B).</description></item><item><title>Instruction Set Semantics</title><link>https://pietraferreira.github.io/quartz/notes/instruction-set-semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/instruction-set-semantics/</guid><description>Instruction Set Semantics Most general is the three address instruction set:
result = operand1 operator operand2 ^44cfb5
Two address instruction sets use one of the operand addresses for the result.</description></item><item><title>Intermediate Representations</title><link>https://pietraferreira.github.io/quartz/notes/intermediate-representations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/intermediate-representations/</guid><description>Intermediate Representations There are three main ones:
Parse Trees Three Address Code</description></item><item><title>Introduction to RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</guid><description>Introduction to RISC-V Notes on the Introduction to RISC-V LinuxFoundation course.
- Getting to know RISC-V - The RISC-V Story - The RISC-V Community - Developing RISC-V - RISC-V in Practice Chapter 1 - Getting to know RISC-V Overview Difference between RISC-V ISA and RISC-V international.</description></item><item><title>ISA (Instruction Set Architecture)</title><link>https://pietraferreira.github.io/quartz/notes/isa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/isa/</guid><description>ISA (Instruction Set Architecture) An instruction set architecture (ISA) is an abstract model of a computer. It is also referred to as architecture or computer architecture.</description></item><item><title>iTerm2 Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/iterm2-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/iterm2-cheatsheet/</guid><description>iTerm2 Cheatsheet I basically copied this from a Git repo&amp;hellip; all very useful.
Tabs and Windows Function Shortcut New Tab ⌘ + T Close Tab or Window ⌘ + W (same as many mac apps) Go to Tab ⌘ + Number Key (ie: ⌘2 is 2nd tab) Go to Split Pane by Direction ⌘ + Option + Arrow Key Cycle iTerm Windows ⌘ + backtick (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) ⌘ + D Split Window Horizontally (same profile) ⌘ + Shift + D (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse ⌘ + Alt + Shift and then drag the pane from anywhere Fullscreen Fullscreen ⌘+ Enter Maximize a pane ⌘ + Shift + Enter (use with fullscreen to temp fullscreen a pane!</description></item><item><title>Knowledge Hub</title><link>https://pietraferreira.github.io/quartz/notes/knowledge-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/knowledge-hub/</guid><description>Knowledge Hub Where all of my notes live!!! There are no rules here 😎
General HELP - very useful shortcuts for Vim, Obsidian (and plugins), tmux etc and general help.</description></item><item><title>Kruskal's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/kruskals-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/kruskals-algorithm/</guid><description>Kruskal&amp;rsquo;s Algorithm It is a minimum spanning subtree algorithm.
It performs well for sparse graphs due to simple data structures: $O_(E\ log\ N)$.</description></item><item><title>Lexical Analysis</title><link>https://pietraferreira.github.io/quartz/notes/lexical-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/lexical-analysis/</guid><description>Lexical Analysis It is the process of grouping individual characters into basic entities, known as tokens or lexemes.
Examples: integer, variable, addition operator.</description></item><item><title>Linear Equations</title><link>https://pietraferreira.github.io/quartz/notes/linear-equations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linear-equations/</guid><description>Linear Equations The basic representation is: $$\begin{align*} \begin{pmatrix} a_{11} &amp;amp; a_{12}\\ a_{21} &amp;amp; a_{22} \end{pmatrix} \begin{pmatrix} x_1\\ x_2 \end{pmatrix} = \begin{pmatrix} b_1\\ b_2 \end{pmatrix} \end{align*}$$</description></item><item><title>Linear Knapsack Problem</title><link>https://pietraferreira.github.io/quartz/notes/linear-knapsack-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linear-knapsack-problem/</guid><description>Linear Knapsack Problem Also known as the stock cutting problem.
Consider capacity 100, and object of size {53, 53, 49, 49, 3}.</description></item><item><title>Linker Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/linker-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linker-relaxation/</guid><description>Linker Relaxation How the linker optimises instructions for the compiler by having a second relaxation.
Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ cat test.</description></item><item><title>Linux Fundamentals</title><link>https://pietraferreira.github.io/quartz/notes/linux-fundamentals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linux-fundamentals/</guid><description>Linux Fundamentals Bunch of old notes on Linux stuff.
Find command 1 2 3 4 5 6 7 8 9 10 11 -type f -&amp;gt; type: file -name *.</description></item><item><title>Lists</title><link>https://pietraferreira.github.io/quartz/notes/lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/lists/</guid><description>Lists Lists in C 1 2 3 4 struct elem { struct elem *next; int val; }; 1 2 3 4 5 struct elem struct elem *next; struct elem *head; int val; }; 1 2 struct elem *head = NULL; struct elem *tail = NULL;</description></item><item><title>LLVM</title><link>https://pietraferreira.github.io/quartz/notes/llvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/llvm/</guid><description>LLVM The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Prebuilt binaries of the LLVM toolchain can be downloaded from the LLVM Download Page.</description></item><item><title>Minimum Spanning Subtree</title><link>https://pietraferreira.github.io/quartz/notes/minimum-spanning-subtree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/minimum-spanning-subtree/</guid><description>Minimum Spanning Subtree It is a subtree with the minimum possible edge weight that connects all nodes together.
There must exist no cycles in the subtree.</description></item><item><title>Modules</title><link>https://pietraferreira.github.io/quartz/notes/university/year-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/year-2/</guid><description>Modules A list of all the different modules I am taking during my second year.
Year 2 is 1/3 of the final grade!</description></item><item><title>Newton-Raphson Iteration</title><link>https://pietraferreira.github.io/quartz/notes/newton-raphson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/newton-raphson/</guid><description>Newton-Raphson Iteration Want to find the root of $f(x)$, for example a value for $x$ such that $f(x) = 0$.</description></item><item><title>Notes from meeting 03-05-2022</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-05-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-05-03/</guid><description>Monthly (or quaterly?) meeting - Relocation Prototype 1 2 3 ../../../binutils-gdb/bfd/elfxx-riscv.c:1046:1: warning: no previous prototype for ‘riscv_reloc_name_lookup_custom’ [-Wmissing-prototypes] riscv_reloc_name_lookup_custom (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name) ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Have secondary howto table with RELOCID</description></item><item><title>Notes on relocation-prototype from 02-06-2022</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-02/</guid><description>Notes on relocation-prototype: Assuming we already have RELOCID in place:
There is a bool pretend_im_corev in gas/config/tc-riscv.c which sets the relocation as CORE-V.</description></item><item><title>Notes on relocation-prototype from 23-06-2022</title><link>https://pietraferreira.github.io/quartz/notes/daily/2022-06-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2022-06-23/</guid><description>Notes on Relocation Handling Prototype I think I am getting this error:
1 2 ../bfd/.libs/libbfd.a(elf32-riscv.o): In function `perform_relocation&amp;#39;: /home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.</description></item><item><title>Obsidian Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/obsidian-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/obsidian-cheatsheet/</guid><description>Obsidian Cheatsheet Where I dump all the useful Obsidian commands I&amp;rsquo;d hope to remember.
Here is the website and everything on how to run it here.</description></item><item><title>Ozan's Image Editor</title><link>https://pietraferreira.github.io/quartz/notes/ozans-image-editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/ozans-image-editor/</guid><description>Ozan&amp;rsquo;s Image Editor More here.
To embed a PDF:</description></item><item><title>P vs NP Problem</title><link>https://pietraferreira.github.io/quartz/notes/p-vs-np/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/p-vs-np/</guid><description>P vs NP Problem Imagine an Oracle. Guesses and gets the right answer.
Build by (infinitely) many processors in a tree.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>Parse Trees</title><link>https://pietraferreira.github.io/quartz/notes/parse-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/parse-trees/</guid><description>Parse Trees Grammatically $S \rightarrow A | B$ $A \rightarrow A\ x | y$ $B \rightarrow z$
Parse tree for yxxz: Parsing Sentences Apply successive productions.</description></item><item><title>Pimm's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/pimms-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/pimms-algorithm/</guid><description>Pimm&amp;rsquo;s Algorithm It is a minimum spanning subtree algorithm.
It scales well, fast with dense graphs.
It has a of $O_{E\ log\ N}$ with binary heap and $O_{E\ +\ log\ N}$ with Fibonacci heap.</description></item><item><title>Quicksort</title><link>https://pietraferreira.github.io/quartz/notes/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/quicksort/</guid><description>Quicksort It picks a midpoint (approximate the median) and partition values, into those less than the midpoint (left) and greater (right).</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/relocations/</guid><description>Relocations What is a relocation? They are very common in position-dependant code and implemented at link time.
Before linking, an instruction might need a label which gets assigned a temporary symbolic reference.</description></item><item><title>RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv/</guid><description>RISC-V Introduction to RISC-V Instruction Set Reference RISC-V IS Cheatsheet ( here) RISC-V ASM Cheatsheet ( here) RISC-V Assembly for Beginners ( here) RISC-V Assembly Code Examples ( here)</description></item><item><title>RISC-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/riscv-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv-toolchain/</guid><description>RISC-V Toolchain There are two RISC-V toolchains that are popularly used:
The GNU RISC-V toolchain The LLVM RISC-V toolchain Both toolchains provide a state-of-the-art optimising compiler, assembler, linker, and various other tools to build applications that run on RISC-V machines.</description></item><item><title>Sets and Maps</title><link>https://pietraferreira.github.io/quartz/notes/sets-and-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sets-and-maps/</guid><description>Sets and Maps Sets are a collection of objects:
They might be ordered or unordered. Two variants: Single instance of any object.</description></item><item><title>Shell Sort</title><link>https://pietraferreira.github.io/quartz/notes/shell-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/shell-sort/</guid><description>Shell Sort Shell sort adds one more loop outside bubble sort.
It starts by sorting small overlapping subsets, then makes then smaller but by then the array is mostly sorted.</description></item><item><title>Sorting</title><link>https://pietraferreira.github.io/quartz/notes/sorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sorting/</guid><description>Sorting Sorting methods Bubble Sort Shell Sort Quicksort Heapsort Bucket Sort Stability A stable sort guarantee to preserve the ordering from a first sort, where the second sort finds the records to be equal.</description></item><item><title>Source Code Optimisation</title><link>https://pietraferreira.github.io/quartz/notes/source-code-optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/source-code-optimisation/</guid><description>Source Code Optimisation In addition to compiler optimisations, there are several software engineering techniques to reduce code size. These techniques take advantage of well-known software engineering methodologies and programming language features.</description></item><item><title>Stacks and Queues</title><link>https://pietraferreira.github.io/quartz/notes/stacks-and-queues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/stacks-and-queues/</guid><description>Stacks and Queues Stack: last in, first out (LIFO), simple list works well for this.
Think of a stack of plates.</description></item><item><title>Syntax Directed Translation</title><link>https://pietraferreira.github.io/quartz/notes/syntax-directed-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/syntax-directed-translation/</guid><description>Syntax Directed Translation Use attribute grammars, where productions are supplemented with information to control semantic analysis and translation.
Associate attributes with each grammar symbol to describe its properties.</description></item><item><title>Sysroot</title><link>https://pietraferreira.github.io/quartz/notes/sysroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sysroot/</guid><description>Sysroot Any compiler needs to know where the standard headers, standard libraries, and the c-runtime are present. All of these are packaged together for each target (e.</description></item><item><title>Three Address Code</title><link>https://pietraferreira.github.io/quartz/notes/three-address-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/three-address-code/</guid><description>Three Address Code Parse trees are sometimes used in early stages of compilers.
They are not ideal for optimisation.</description></item><item><title>Tmux Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/tmux-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/tmux-cheatsheet/</guid><description>Tmux Cheatsheet tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.</description></item><item><title>Trees</title><link>https://pietraferreira.github.io/quartz/notes/trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/trees/</guid><description>Trees Abstract data type that represents a hierarchical tree structure with a set of connected nodes. Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the root node, which has no parent.</description></item><item><title>Useful Commands Dump</title><link>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</guid><description>Useful Commands Dump Well&amp;hellip; where I dump any useful commands I find and them hopefully I&amp;rsquo;ll categorise them&amp;hellip; eventually&amp;hellip;</description></item><item><title>Vectors and Arrays</title><link>https://pietraferreira.github.io/quartz/notes/vectors-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/vectors-arrays/</guid><description>Vectors and Arrays Vectors are typically 1-d whereas arrays can be multi-dimensional. in C/C++ they are indexed from zero.</description></item><item><title>Vim Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/vim-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/vim-cheatsheet/</guid><description>Vim Cheatsheet Thankfully I remember most of these but all of them are great :)
MD to PDF and MD to HTML are custom.</description></item><item><title>Work Hub</title><link>https://pietraferreira.github.io/quartz/notes/work-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/work-hub/</guid><description>Work Hub Everything work related, mostly organised by project.
Useful Links Wiki Engineering Training Onboarding Guide for the OpenHW Group Projects Engineer Training Hub RISC-V Notes Relocation Handling Prototype (CORE-V) Notes Reports CORE-V CORE-V Toolchain Assembly Test Example Videos Porting the GNU CORE-V Toolchain Adding an Instruction to the GNU assembler GNU toolchain for CORE-V (Jessica talks about relocation handling here) Tiger Introduction to the project DejaGNU DejaGNU documentation notes LLVM LLVM Toolchain How to Write a LLVM backend GCC GCC Toolchain Talks 2020 Meetup Script Slides Facial Recognition - Coral Board Script Strode College Talk - About me Script Meeting Notes 1 2 3 4 table without ID file.</description></item></channel></rss>