<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>relocations on</title><link>https://pietraferreira.github.io/quartz/tags/relocations/</link><description>Recent content in relocations on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/relocations/index.xml" rel="self" type="application/rss+xml"/><item><title>Fixups</title><link>https://pietraferreira.github.io/quartz/notes/general/fixups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/fixups/</guid><description>Fix-ups Fix-ups are used to represent information in instructions which is currently unknown. During instruction encoding, if some information is unknown (such as a memory location of an external symbol), it is encoded as if the value is equal to 0 and a fix-up is emitted which contains information on how to rewrite the value when information is known.</description></item><item><title>GNU</title><link>https://pietraferreira.github.io/quartz/notes/general/gnu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gnu/</guid><description>GNU Extensive collection of free software which can be used as an operating system or in parts with other operating systems.</description></item><item><title>How to add an instruction to the GNU assembler</title><link>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</guid><description>How to add an instruction to the GNU assembler We can use cv.starti as an example. It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/general/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/howto-table/</guid><description>Howto Table The relocation table records the list of items that the file needs (from other object files or libraries).</description></item><item><title>Jump Table</title><link>https://pietraferreira.github.io/quartz/notes/general/jump-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/jump-table/</guid><description>Jump Table It can either be an array of pointers to functions or an array of machine code jump instructions.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/general/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the dynamic linker.</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/general/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/relocations/</guid><description>Relocations Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item></channel></rss>