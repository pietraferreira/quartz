<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>help on</title><link>https://pietraferreira.github.io/quartz/tags/help/</link><description>Recent content in help on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/help/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://pietraferreira.github.io/quartz/notes/private/work/how-to-add-instructions-to-as-slides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/how-to-add-instructions-to-as-slides/</guid><description>How to add instructions to the GNU Assembler Instruction Example Using cv.starti as an example:
1 cv.starti Ln, uimmL Ln: 0 for inner loop, 1 for outer loop.</description></item><item><title>Admonition Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/general/admonition-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/admonition-cheatsheet/</guid><description>Admonition Cheatsheet 1 2 3 4 5 6 ad-&amp;lt;type&amp;gt; # Admonition type. title: # Admonition title. collapse: # Create a collapsible admonition.</description></item><item><title>Blockchain</title><link>https://pietraferreira.github.io/quartz/notes/general/blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/blockchain/</guid><description>Blockchain Video source. More https://github.com/smartcontractkit/full-blockchain-solidity-course-js#welcome-to-the-course. What is a Blockchain? It is a distributed database or ledger that is shared among the nodes of a computer network.</description></item><item><title>Building Cobra</title><link>https://pietraferreira.github.io/quartz/notes/private/work/projects/cobra/building-cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/projects/cobra/building-cobra/</guid><description>How to build I have a cobra folder which contains:
1 2 ❯ ls binutils build install logs toolchain Here binutils is my corev-binutils-gdb fork, I just renamed it so the build script can find it.</description></item><item><title>Dotfile Management</title><link>https://pietraferreira.github.io/quartz/notes/general/dotfile-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/dotfile-management/</guid><description>Dotfile Management My dotfiles can be found on GitHub.
Just type config anywhere, for example config status to manage the repo.</description></item><item><title>GCC Guide by Maxim</title><link>https://pietraferreira.github.io/quartz/notes/private/work/gcc-guide-by-maxim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/gcc-guide-by-maxim/</guid><description>GCC Guide by Maxim 1: How Generic GCC lowers GIMPLE memory operations into RTL memory operations, and how we can have a hand in its operation This is the top level function that GCC calls when it is lowering GIMPLE -&amp;gt; RTL, and wishes to generate a memory move/memory copy operation:</description></item><item><title>Help</title><link>https://pietraferreira.github.io/quartz/notes/general/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/help/</guid><description>HELP Various cheatsheets of different application I use and all the help I can get compiled in one place.
Cheatsheets Vim iTerm2 Obsidian Tmux HackTheBox How to manually check an Assembly test How to add an instruction to the GNU Assembler Slides Hacking x86 CheatSheet Reverse Engineering Malicious Code Linux System Call Table for x86-64 Other Commands Dump Linux Fundamentals Dotfiles Management Courses Dump All of them 1 2 3 4 table without ID title as &amp;#34;Title&amp;#34;, file.</description></item><item><title>How to add an instruction to the GNU assembler</title><link>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</guid><description>How to add an instruction to the GNU assembler We can use cv.starti as an example. It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.</description></item><item><title>How to Manually Check a Test</title><link>https://pietraferreira.github.io/quartz/notes/private/work/projects/cobra/how-to-manually-check-as-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/projects/cobra/how-to-manually-check-as-test/</guid><description>How to Manually Check a Test Instruction listing:
So we have:
1 011u uurr ruud dd00 For example, if we want to test:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</guid><description>The relocation table records the list of items that the file needs (from other object files or libraries).
The relocation record contains information like: which instructions need to be relocated (the offsets), which symbols are involved with the relocation and how to relocate the files relative to the symbols.</description></item><item><title>iTerm2 Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/general/iterm2-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/iterm2-cheatsheet/</guid><description>iTerm2 Cheatsheet I basically copied this from a Git repo&amp;hellip; all very useful.
Tabs and Windows Function Shortcut New Tab ⌘ + T Close Tab or Window ⌘ + W (same as many mac apps) Go to Tab ⌘ + Number Key (ie: ⌘2 is 2nd tab) Go to Split Pane by Direction ⌘ + Option + Arrow Key Cycle iTerm Windows ⌘ + backtick (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) ⌘ + D Split Window Horizontally (same profile) ⌘ + Shift + D (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse ⌘ + Alt + Shift and then drag the pane from anywhere Fullscreen Fullscreen ⌘+ Enter Maximize a pane ⌘ + Shift + Enter (use with fullscreen to temp fullscreen a pane!</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/private/work/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/linker/</guid><description>Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Linux Fundamentals</title><link>https://pietraferreira.github.io/quartz/notes/general/linux-fundamentals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linux-fundamentals/</guid><description>Linux Fundamentals Bunch of old notes on Linux stuff.
Find command 1 2 3 4 5 6 7 8 9 10 11 -type f -&amp;gt; type: file -name *.</description></item><item><title>Meterpreter</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-meterpreter-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-meterpreter-cheatsheet/</guid><description>Meterpreter Command Description help Open Meterpreter usage help. run &amp;lt;scriptname&amp;gt; Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.</description></item><item><title>MSFConsole Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-msfconsole-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-msfconsole-cheatsheet/</guid><description>MSFConsole Cheatsheet Command Description show exploits Show all exploits within the Framework. show payloads Show all payloads within the Framework.</description></item><item><title>Nmap Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/nmap-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/nmap-cheatsheet/</guid><description>nmap flag Description -sV Versions -p &amp;lt;x&amp;gt; or -p- Port scan for port or all -Pn Disable host discovery -A Enables OS and version detection, execute built-in scripts -sC Scan with the default nmap scripts -v Verbose mode -sU UDP port scan -sS TCP SYN port scan` [!</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</guid><description>Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</guid><description>This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>Tmux Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/general/tmux-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/tmux-cheatsheet/</guid><description>Tmux Cheatsheet tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.</description></item><item><title>Useful Commands Dump</title><link>https://pietraferreira.github.io/quartz/notes/private/work/useful-commands-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/useful-commands-dump/</guid><description>Useful Commands Dump Well&amp;hellip; where I dump any useful commands I find and them hopefully I&amp;rsquo;ll categorise them&amp;hellip; eventually&amp;hellip;</description></item><item><title>Vim Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/general/vim-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/vim-cheatsheet/</guid><description>Vim Cheatsheet Thankfully I remember most of these but all of them are great :)
MD to PDF and MD to HTML are custom.</description></item></channel></rss>