<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>help on</title><link>https://pietraferreira.github.io/quartz/tags/help/</link><description>Recent content in help on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/help/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as-slides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as-slides/</guid><description>How to add instructions to the GNU Assembler Instruction Example Using cv.starti as an example:
1 cv.starti Ln, uimmL Ln: 0 for inner loop, 1 for outer loop.</description></item><item><title>Admonition Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/admonition-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/admonition-cheatsheet/</guid><description>Admonition Cheatsheet 1 2 3 4 5 6 ad-&amp;lt;type&amp;gt; # Admonition type. title: # Admonition title. collapse: # Create a collapsible admonition.</description></item><item><title>Assembly Test Example - CORE-V</title><link>https://pietraferreira.github.io/quartz/notes/private/work/assembly-test-example-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/assembly-test-example-corev/</guid><description>Assembly Test Example - CORE-V 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 * { dg-do run } */ #include &amp;lt;stdlib.</description></item><item><title>Binary Exploitation - By HTB</title><link>https://pietraferreira.github.io/quartz/notes/binary-exploitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/binary-exploitation/</guid><description>Binary Exploitation 00 Check file vulnerabilities: 1 checksec --file &amp;lt;filename&amp;gt; Gets rid of Stack, NX and PIE protection (-m32 changes to 32bits): 1 gcc &amp;lt;filename&amp;gt;.</description></item><item><title>Blockchain</title><link>https://pietraferreira.github.io/quartz/notes/blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/blockchain/</guid><description>Blockchain Video source. More https://github.com/smartcontractkit/full-blockchain-solidity-course-js#welcome-to-the-course. What is a Blockchain? It is a distributed database or ledger that is shared among the nodes of a computer network.</description></item><item><title>Code Generation</title><link>https://pietraferreira.github.io/quartz/notes/code-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/code-generation/</guid><description>Code Generation What is Code Generation? The first part of a [[notes/general/compilers|compiler]] analyses the source code into a structure that carries the meaning of the program; this structure is generally the abstract syntax tree that&amp;rsquo;s been checked and decorated.</description></item><item><title>Dotfile Management</title><link>https://pietraferreira.github.io/quartz/notes/dotfile-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/dotfile-management/</guid><description>Dotfile Management My dotfiles can be found on GitHub.
Just type config anywhere, for example config status to manage the repo.</description></item><item><title>File Transfer Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/htb-file-transfer-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-file-transfer-cheatsheet/</guid><description>File Transfer Cheatsheet Command Description  Invoke-WebRequest https://&amp;lt;snip&amp;gt;/PowerView.ps1 -OutFile PowerView.ps1 Download a file with PowerShell IEX (New-Object Net.</description></item><item><title>GCC Guide by Maxim</title><link>https://pietraferreira.github.io/quartz/notes/private/work/gcc-guide-by-maxim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/gcc-guide-by-maxim/</guid><description>GCC Guide by Maxim 1: How Generic GCC lowers GIMPLE memory operations into RTL memory operations, and how we can have a hand in its operation This is the top level function that GCC calls when it is lowering GIMPLE -&amp;gt; RTL, and wishes to generate a memory move/memory copy operation:</description></item><item><title>Help</title><link>https://pietraferreira.github.io/quartz/notes/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/help/</guid><description>HELP Various cheatsheets of different application I use and all the help I can get compiled in one place.
Cheatsheets [[notes/general/vim-cheatsheet|Vim]] [[notes/general/iterm2-cheatsheet|iTerm2]] [[notes/obsidian-cheatsheet.</description></item><item><title>How to add an instruction to the GNU assembler</title><link>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-add-instructions-to-as/</guid><description>How to add an instruction to the GNU assembler We can use cv.starti as an example. It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.</description></item><item><title>How to Manually Check a Test</title><link>https://pietraferreira.github.io/quartz/notes/how-to-manually-check-as-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-manually-check-as-test/</guid><description>How to Manually Check a Test Instruction listing:
![[notes/images/Pasted image 20220727125733.png]] ![[notes/images/Pasted image 20220727125701.png]]
So we have:
1 011u uurr ruud dd00 For example, if we want to test:</description></item><item><title>How to Use Creduce by Ed</title><link>https://pietraferreira.github.io/quartz/notes/daily/2021-04-23-how-to-use-creduce-by-ed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/2021-04-23-how-to-use-creduce-by-ed/</guid><description>How to Use Creduce by Ed As for steps on how to use Creduce:
Take a copy of the failing test in a temporary directory:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/howto-table/</guid><description>Howto Table The [[notes/general/relocations|relocation]] table records the list of items that the file needs (from other object files or libraries).</description></item><item><title>iTerm2 Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/iterm2-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/iterm2-cheatsheet/</guid><description>iTerm2 Cheatsheet I basically copied this from a Git repo&amp;hellip; all very useful.
Tabs and Windows Function Shortcut New Tab ⌘ + T Close Tab or Window ⌘ + W (same as many mac apps) Go to Tab ⌘ + Number Key (ie: ⌘2 is 2nd tab) Go to Split Pane by Direction ⌘ + Option + Arrow Key Cycle iTerm Windows ⌘ + backtick (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) ⌘ + D Split Window Horizontally (same profile) ⌘ + Shift + D (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse ⌘ + Alt + Shift and then drag the pane from anywhere Fullscreen Fullscreen ⌘+ Enter Maximize a pane ⌘ + Shift + Enter (use with fullscreen to temp fullscreen a pane!</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linker/</guid><description>Linker Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Linux Fundamentals</title><link>https://pietraferreira.github.io/quartz/notes/linux-fundamentals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/linux-fundamentals/</guid><description>Linux Fundamentals Bunch of old notes on Linux stuff.
Find command 1 2 3 4 5 6 7 8 9 10 11 -type f -&amp;gt; type: file -name *.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the [[notes/general/linker|dynamic linker]].</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/relocations/</guid><description>Relocations Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv-assembler-reference/</guid><description>RISC-V Assembler Reference This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>Stack-based Overflow - Linux x86</title><link>https://pietraferreira.github.io/quartz/notes/htb-stack-based-overflow-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/htb-stack-based-overflow-linux/</guid><description>Stack-based Overflow - Linux x86 They are caused by incorrect program code, which cannot process too large amounts of data correctly by the CPU and can, therefore, manipulate the CPU&amp;rsquo;s processing.</description></item><item><title>Tiger Optimisation (memset/memcpy)</title><link>https://pietraferreira.github.io/quartz/notes/daily/tiger-optimisation-memset-memcpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/daily/tiger-optimisation-memset-memcpy/</guid><description>Tiger Optimisation (memset/memcpy) Optimising expansion of memcpy/memset using hardware loops Currently memcpy and memset get expanded to a list of stores and loads for small sized values.</description></item><item><title>Tmux Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/tmux-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/tmux-cheatsheet/</guid><description>Tmux Cheatsheet tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.</description></item><item><title>Useful Commands Dump</title><link>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</guid><description>Useful Commands Dump Well&amp;hellip; where I dump any useful commands I find and them hopefully I&amp;rsquo;ll categorise them&amp;hellip; eventually&amp;hellip;</description></item><item><title>Vim Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/vim-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/vim-cheatsheet/</guid><description>Vim Cheatsheet Thankfully I remember most of these but all of them are great :)
MD to PDF and MD to HTML are custom.</description></item></channel></rss>