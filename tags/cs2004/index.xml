<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs2004 on</title><link>https://pietraferreira.github.io/quartz/tags/cs2004/</link><description>Recent content in cs2004 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/cs2004/index.xml" rel="self" type="application/rss+xml"/><item><title>Ant Colony Optimisation and Particle Swarm Optimisation</title><link>https://pietraferreira.github.io/quartz/notes/university/aco-and-pso/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/aco-and-pso/</guid><description>Swarm Intelligence The interaction of many simple parts creating complex behaviour. This means that the net effect of group&amp;rsquo;s collective wisdom is greater than the sum of the individuals.</description></item><item><title>Asymptotic Analysis</title><link>https://pietraferreira.github.io/quartz/notes/university/asymptotic-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/asymptotic-analysis/</guid><description>The asymptotic analysis of an algorithm determines the running time in Big O notation.
To perform the asymptotic analysis:</description></item><item><title>Big O Notation</title><link>https://pietraferreira.github.io/quartz/notes/general/big-o-notation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/big-o-notation/</guid><description>Big O Notation It describes how the performance of an algorithm scales with the size of the problem.
may be time to execute or amount of memory.</description></item><item><title>CS2004 - Algorithms</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/</guid><description> Lecturer: Mahir Arzoky
60% Coursework -&amp;gt; Due on Friday, Week 21.
40% Exam -&amp;gt; Available on Week 23.
Lectures Introduction Foundation Analysis - (Lecture 2) Time Complexity - (Lecture 4) Asymptotic Notation - (Lecture 4) Data Structures and Applications - (Lecture 5) Sorting - (Lecture 6) Graph Traversal - (Lecture 7) Depth-First Search Exhaustive Search Breath-First Search Best-First Search - A* Search Minimum Spanning Tree (MST) - Prim&amp;rsquo;s Shortest Path Problem Dijkstra&amp;rsquo;s Algorithm - (Lecture 8) Search and Fitness - (Lecture 9) Heuristic Search and Simulated Annealing - (Lecture 10) Introduction to Genetic Algorithms - (Lecture 11) Evolutionary Computation - (Lecture 12) Ant Colony Optimisation and Particle Swarm Optimisation - (Lecture 13) References Classes, Types, and Objects Big O Notation Sets and Maps Trees</description></item><item><title>Evolutionary Programming</title><link>https://pietraferreira.github.io/quartz/notes/university/evolutionary-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/evolutionary-programming/</guid><description>Similar to Genetic Algorithms.
The emphasis here is on mutation and there is no crossover.
Every individual mutates, doubling the population.</description></item><item><title>Graphs</title><link>https://pietraferreira.github.io/quartz/notes/general/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/graphs/</guid><description>Graphs A graph consists of:
A set of fixed objects, nodes. A set of edges, which may have arrows and have values attached.</description></item><item><title>Heuristic Seach, Hill Climbing and Simulated Annealing</title><link>https://pietraferreira.github.io/quartz/notes/university/hc-and-sa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/hc-and-sa/</guid><description>Heuristic Search Some difficult problems (NP-hard) cannot be solved in a straightforward manner.
We need to develop approximation algorithms to solve these problems.</description></item><item><title>Lists</title><link>https://pietraferreira.github.io/quartz/notes/general/lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/lists/</guid><description>Lists A list is a sequence of zero or more data items, with the total number of items being the length of the list.</description></item><item><title>Search and Fitness</title><link>https://pietraferreira.github.io/quartz/notes/university/search-and-fitness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/search-and-fitness/</guid><description>Definition of a Search Problem For some problems we need to search for a solution from a (usually) very large number of possibilities, search problems.</description></item><item><title>Selection Sort</title><link>https://pietraferreira.github.io/quartz/notes/university/selection-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/selection-sort/</guid><description>Selection Sort It sorts an array by repeatedly finding the minimum element from the unsorted part of the array and puts it at the beginning.</description></item><item><title>Shortest Path Problem</title><link>https://pietraferreira.github.io/quartz/notes/university/shortest-path-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/shortest-path-problem/</guid><description/></item><item><title>Sorting</title><link>https://pietraferreira.github.io/quartz/notes/general/sorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/sorting/</guid><description>Sorting The sorting problem is a mapping from $x$ to $y$, where:
$x$ and $y$ are both n length real vectors (lists and/or arrays).</description></item><item><title>Time Complexity</title><link>https://pietraferreira.github.io/quartz/notes/university/time-complexity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/time-complexity/</guid><description>Sorting It is one of the most common tasks in data analysis.
Examples:
Print out a collection of employees sorted by salary.</description></item></channel></rss>