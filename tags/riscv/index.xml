<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>riscv on</title><link>https://pietraferreira.github.io/quartz/tags/riscv/</link><description>Recent content in riscv on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/riscv/index.xml" rel="self" type="application/rss+xml"/><item><title>Assembly Test Example - CORE-V</title><link>https://pietraferreira.github.io/quartz/notes/private/work/assembly-test-example-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/assembly-test-example-corev/</guid><description>Assembly Test Example - CORE-V 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 * { dg-do run } */ #include &amp;lt;stdlib.</description></item><item><title>Building Cobra</title><link>https://pietraferreira.github.io/quartz/notes/private/work/building-cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/building-cobra/</guid><description>How to build I have a cobra folder which contains:
1 2 ❯ ls binutils build install logs toolchain Here binutils is my corev-binutils-gdb fork, I just renamed it so the build script can find it.</description></item><item><title>CORE-V Relocations</title><link>https://pietraferreira.github.io/quartz/notes/private/work/corev-relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/corev-relocations/</guid><description>CORE-V Relocations There are two custom relocations:
BDF_RELOC_RISCV_CVPCREL_URS1: 5-bit relocation for the rs1 operand in cv.setup, its relocation number is 225.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>Introduction to RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</guid><description>Introduction to RISC-V Notes on the Introduction to RISC-V LinuxFoundation course.
[[notes/general/introduction-to-riscv#Chapter 1 - Getting to know RISC-V|Chapter 1]] - Getting to know RISC-V [[notes/general/introduction-to-riscv#Chapter 2 - The RISC-V Story|Chapter 2]] - The RISC-V Story [[notes/general/introduction-to-riscv#Chapter 3 - The RISC-V Community|Chapter 3]] - The RISC-V Community [[notes/general/introduction-to-riscv#Chapter 4 - Developing RISC-V|Chapter 4]] - Developing RISC-V [[notes/general/introduction-to-riscv#Chapter 5 - RISC-V In Practice|Chapter 5]] - RISC-V in Practice Chapter 1 - Getting to know RISC-V Overview Difference between RISC-V [[notes/general/isa|ISA]] and RISC-V international.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the [[notes/general/linker|dynamic linker]].</description></item><item><title>Relocation Prototype</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype/</guid><description>Relocation Handling Prototype Introduction to the project needed for future psABI meeting eg: in COREV we have custom relocations that live in the reserved space, but we need to be able to share that reserved space with other tool chains.</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/relocations/</guid><description>Relocations Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item><item><title>RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv/</guid><description>RISC-V [[notes/general/introduction-to-riscv|Introduction to RISC-V]] [[notes/general/riscv-assembler-reference|RISC-V Assembler Reference]] Instruction Set ![[notes/images/riscv-cheatsheet-is.png]]
Reference RISC-V IS Cheatsheet ( here) RISC-V ASM Cheatsheet ( here) RISC-V Assembly for Beginners ( here) RISC-V Assembly Code Examples ( here)</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv-assembler-reference/</guid><description>RISC-V Assembler Reference This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>Software Overlay Standard</title><link>https://pietraferreira.github.io/quartz/notes/private/work/software-overlay-standard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/software-overlay-standard/</guid><description>Software Overlay Standard To solve the limited memory issue with embedded systems, we use virtual memory. Meaning the OS will use a hardware MMU (Memory Management Unit) with direct mapping between the virtual and physical memory.</description></item></channel></rss>