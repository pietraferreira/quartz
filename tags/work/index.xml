<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>work on</title><link>https://pietraferreira.github.io/quartz/tags/work/</link><description>Recent content in work on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/work/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as-slides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as-slides/</guid><description>How to add instructions to the GNU Assembler Instruction Example Using cv.starti as an example:
1 cv.starti Ln, uimmL Ln: 0 for inner loop, 1 for outer loop.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/cobra/</guid><description>Cobra How to build Related Notes 1 2 3 4 table without ID file.link as &amp;#34;Link&amp;#34;, file.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-01-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-01-report/</guid><description>Hi all,
I am sending a report regarding the third lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-10-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-10-report/</guid><description>Hi all,
I am sending a report regarding the fourth lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-16-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-16-report/</guid><description>Hi all,
I am sending a report regarding the fifth lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-25-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-02-25-report/</guid><description>Hi all,
I am sending a report regarding the sixth lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-03-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-03-report/</guid><description>Hi all,
I am sending a report regarding the seventh lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-16-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-16-report/</guid><description>Hi all,
I am sending a report regarding the 8th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-17-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-17-report/</guid><description>Hi all,
I am sending a report regarding the 9th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-24-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-24-report/</guid><description>Hi all,
I am sending a report regarding the 10th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-30-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-03-30-report/</guid><description>Hi all,
I am sending a report regarding the 11th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-01-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-01-report/</guid><description>Hi all,
I am sending a report regarding the 11th lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-09-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-09-report/</guid><description>Hi all,
I am sending a report regarding the 12th lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-15-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-15-report/</guid><description>Hi all,
I am sending a report regarding the 13th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-22-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-22-report/</guid><description>Hi all,
I am sending a report regarding the 14th lot of 10h worked on the RISC-V
Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-28-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-04-28-report/</guid><description>Hi all,
I am sending a report regarding the 15th lot of 10h worked on the RISC-V Custom Relocation Handling prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-07-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-07-report/</guid><description>Hi all,
I am sending a report regarding the 16th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-14-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-14-report/</guid><description>Hi all,
I am sending a report regarding the 17th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-18-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-18-report/</guid><description>Hi all,
I am sending a report regarding the 18th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-27-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-05-27-report/</guid><description>Hi all,
I am sending a report regarding the 19th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-02-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-02-report/</guid><description>Hi all,
I am sending a report regarding the 20th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-11-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-11-report/</guid><description>Hi all,
I am sending a report regarding the 21th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-16-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-16-report/</guid><description>Hi all,
I am sending a report regarding the 22nd lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-25-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-06-25-report/</guid><description>Hi all,
I am sending a report regarding the 23rd lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-07-02-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2022-07-02-report/</guid><description>Hi all,
I am sending a report regarding the 24th lot of 10h worked on the RISC-V Custom Relocation prototype.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2023-06-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2023-06-10/</guid><description>Hi all,
I am sending a report regarding the work done on the RISC-V Custom Relocation prototype project this week.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2023-06-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2023-06-10/</guid><description>Hi all,
I am sending a report regarding the work done on the RISC-V Custom Relocation prototype project this week.</description></item><item><title/><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2023-06-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/2023-06-10/</guid><description>Hi all,
I am sending a report regarding the work done on the RISC-V Custom Relocation prototype project this week.</description></item><item><title>2-3 Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/2-3-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/2-3-trees/</guid><description>2-3 Trees A tree, where every internal node has either:
two children and one data element (2-node); or three children and two data elements (3-node).</description></item><item><title>2020-09-28</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-09-28/</guid><description>2020-09-28 a5 is t1 and a4 is t0
it is optimising out add and move
adjust the address to the same mode, and move the des from one the regis, and then (instead of setupi using starti) push no rvc, then copy source to reg0 then back to reg1 then emit the label</description></item><item><title>2020-09-28</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-09-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-09-28/</guid><description>2020-09-28 a5 is t1 and a4 is t0
it is optimising out add and move
adjust the address to the same mode, and move the des from one the regis, and then (instead of setupi using starti) push no rvc, then copy source to reg0 then back to reg1 then emit the label</description></item><item><title>2020-10-08</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-08/</guid><description>2020-10-08 need mcorev-loops flag optmisation needs to be on for it to work nothing is on by default gen functions -&amp;gt; gen starti etc you can write gen_starti etc, they can be useful</description></item><item><title>2020-10-08</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-08/</guid><description>2020-10-08 need mcorev-loops flag optmisation needs to be on for it to work nothing is on by default gen functions -&amp;gt; gen starti etc you can write gen_starti etc, they can be useful</description></item><item><title>2020-10-28</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-28/</guid><description>2020-10-28 gcc/gcc/config/arc:2201
It has a gen_mac_600 which is the closest to gen_mac I could find
In gcc/gcc/config/mips:2563 it has Floating point multiply accumulate instructions but they look very different.</description></item><item><title>2020-10-28</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-10-28/</guid><description>2020-10-28 gcc/gcc/config/arc:2201
It has a gen_mac_600 which is the closest to gen_mac I could find
In gcc/gcc/config/mips:2563 it has Floating point multiply accumulate instructions but they look very different.</description></item><item><title>2020-11-19</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-19/</guid><description>2020-11-19 p.extbz rD, rs1
1 2 3 4 5 6 7 8 9 (define_insn &amp;#34;cv_extbz&amp;#34; [(set (match_operand:SI 0 &amp;#34;register_operand&amp;#34; &amp;#34;=r&amp;#34;) (zero_extend:SI (match_operand:HI 1 &amp;#34;register_operand&amp;#34; &amp;#34;r&amp;#34;)) )] &amp;#34;TARGET_COREV_ALU&amp;#34; &amp;#34;cv.</description></item><item><title>2020-11-19</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-19/</guid><description>2020-11-19 p.extbz rD, rs1
1 2 3 4 5 6 7 8 9 (define_insn &amp;#34;cv_extbz&amp;#34; [(set (match_operand:SI 0 &amp;#34;register_operand&amp;#34; &amp;#34;=r&amp;#34;) (zero_extend:SI (match_operand:HI 1 &amp;#34;register_operand&amp;#34; &amp;#34;r&amp;#34;)) )] &amp;#34;TARGET_COREV_ALU&amp;#34; &amp;#34;cv.</description></item><item><title>2021-04-06 - Tiger Jenkins Guide</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-06-tiger-jenkins-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-06-tiger-jenkins-guide/</guid><description>2021-04-06 - Tiger Jenkins Guide go to main wiki
jenkins
tiger-user-branches
go to build with parameters
choose my branch</description></item><item><title>2021-04-06 - Tiger Jenkins Guide</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-06-tiger-jenkins-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-06-tiger-jenkins-guide/</guid><description>2021-04-06 - Tiger Jenkins Guide go to main wiki
jenkins
tiger-user-branches
go to build with parameters
choose my branch</description></item><item><title>2022 08 18</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-18/</guid><description>Hello Robin,
Thanks for reporting this issue.
We&amp;rsquo;ve taken a look at it and it seems to be an issue with the latest development Newlib that doesn&amp;rsquo;t show up in GCC testing.</description></item><item><title>2022-06-02</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-06-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-06-02/</guid><description>2022-06-02 Assuming we already have RELOCID in place:
There is a bool pretend_im_corev in gas/config/tc-riscv.c which sets the relocation as CORE-V.</description></item><item><title>2022-06-17 - Jeremy Relocation Notes</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-06-17-jeremy-relocation-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-06-17-jeremy-relocation-notes/</guid><description>2022-06-17 end of linker -&amp;gt; introduce the issue of being no mechanism for vendor specific relocation -&amp;gt; discuss issue of relocations, we can do vendor specific but not vendor specific relocations.</description></item><item><title>2022-06-17 - Jeremy Relocation Notes</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-06-17-jeremy-relocation-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-06-17-jeremy-relocation-notes/</guid><description>2022-06-17 end of linker -&amp;gt; introduce the issue of being no mechanism for vendor specific relocation -&amp;gt; discuss issue of relocations, we can do vendor specific but not vendor specific relocations.</description></item><item><title>2022-06-23</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-06-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-06-23/</guid><description>2022-06-23 I think I am getting this error:
1 2 ../bfd/.libs/libbfd.a(elf32-riscv.o): In function `perform_relocation&amp;#39;: /home/pietraferreira/corev/build/binutils-gdb/bfd/elfnn-riscv.c:1653: undefined reference to `riscv_elf_custom_relocid&amp;#39; Because riscv_elf_custom_relocid is being called from inside perform_relocation, thus it doesn&amp;rsquo;t exist in that space.</description></item><item><title>2022-07-03 - Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-03-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-03-relaxation/</guid><description>2022-07-03 Relaxation Most companies do assembly relaxation whereas we do linker relaxation. The assembler typically works on one source at a time so it can&amp;rsquo;t see anything that is related to other source code files whereas the linker can.</description></item><item><title>2022-07-03 - Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-03-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-03-relaxation/</guid><description>2022-07-03 Relaxation Most companies do assembly relaxation whereas we do linker relaxation. The assembler typically works on one source at a time so it can&amp;rsquo;t see anything that is related to other source code files whereas the linker can.</description></item><item><title>2022-07-04</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-07-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-07-04/</guid><description>2022-07-04 CORE-V We have a static relocation in bfd/elfnn-riscv.c (perform_relocation) which switches on the instruction type and encodes the instruction.</description></item><item><title>2022-07-05</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-07-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-07-05/</guid><description>BFD Front End A BFD has type bfd. Using BFD consists of making references through the BFD and to data in the BFD.</description></item><item><title>2022-07-07</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-07-07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-07-07/</guid><description>Flag to ignore main: 1 --defsym=main=0x100 To ignore _start: 1 -nostartfiles RelocID Pass *howto: 1 {type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0, complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0, pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555cb8e0 &amp;lt;bfd_elf_generic_reloc&amp;gt;, name = 0x5555556c7506 &amp;#34;R_RISCV_CVPCREL_UI12&amp;#34;} *rel: 1 {r_offset = 2, r_info = 1504, r_addend = 0} value: 3145728 We first do CVPCREL with the *howto:</description></item><item><title>2022-07-25</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-25/</guid><description>2022-07-25 flw for example is only supported by 32-bits. Therefore, there is a fail march test which uses rv32i. rv64 doesn&amp;rsquo;t support zcf, so should I still do the same thing?</description></item><item><title>2022-07-25</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-25/</guid><description>2022-07-25 flw for example is only supported by 32-bits. Therefore, there is a fail march test which uses rv32i. rv64 doesn&amp;rsquo;t support zcf, so should I still do the same thing?</description></item><item><title>2022-07-26</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-26/</guid><description>2022-07-26 c.flwsp -&amp;gt; zero-extended 6-bit immediate, scaled by 4 (4^6=4096) and the boundary is half of that minus 1, thus 2047.</description></item><item><title>2022-07-26</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-07-26/</guid><description>2022-07-26 c.flwsp -&amp;gt; zero-extended 6-bit immediate, scaled by 4 (4^6=4096) and the boundary is half of that minus 1, thus 2047.</description></item><item><title>2022-08-02-cobra-report</title><link>https://pietraferreira.github.io/quartz/work/2022-08-02-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/2022-08-02-cobra-report/</guid><description>Assembler Support for the CORE-V Zc* Extension - Report 2nd of August 2022
The Zc* extensions are being carefully tested and the testsuite for Zc* has been expanded.</description></item><item><title>2022-08-03</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-03/</guid><description>Everest Originally with WD but now with the new company (secret).
Code size improvements, get close to GCC - LLVM Overlay - can have code as overlay, goes in slow memory and you can dynamically load it to RAM.</description></item><item><title>2022-08-03</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-03/</guid><description>Everest Originally with WD but now with the new company (secret).
Code size improvements, get close to GCC - LLVM Overlay - can have code as overlay, goes in slow memory and you can dynamically load it to RAM.</description></item><item><title>2022-08-08-cobra-report</title><link>https://pietraferreira.github.io/quartz/work/2022-08-08-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/2022-08-08-cobra-report/</guid><description>Assembler Support for the CORE-V Zc* Extension - Report Completed Last Week Verified Zc* with the GNU assembler (gas).</description></item><item><title>2022-08-09</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-09/</guid><description>2022-08-09 Data Storage Sizes C/C++ Storage Size (bits) Size (bytes) char Byte 8-bits 1 byte short Word 16-bits 2 bytes int Double-word 32-bits 4 bytes long Quadword 64-bits 8 bytes long long Quadword 64-bits 8 bytes int * Quadword 64-bits 8 bytes double Quadword 64-bits 8 bytes float Double quadword 128-bits 16 bytes .</description></item><item><title>2022-08-09</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-09/</guid><description>2022-08-09 Data Storage Sizes C/C++ Storage Size (bits) Size (bytes) char Byte 8-bits 1 byte short Word 16-bits 2 bytes int Double-word 32-bits 4 bytes long Quadword 64-bits 8 bytes long long Quadword 64-bits 8 bytes int * Quadword 64-bits 8 bytes double Quadword 64-bits 8 bytes float Double quadword 128-bits 16 bytes .</description></item><item><title>2022-08-16</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-16/</guid><description>GCC - https://github.com/pietraferreira/corev-gcc/tree/cobra-stable Binutils-GDB - https://github.com/pietraferreira/corev-binutils-gdb/tree/cobra-stable Newlib - https://sourceware.org/git/newlib-cygwin.git files built with this compiler will misinform the version that is implemented</description></item><item><title>2022-08-17</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-17/</guid><description>2022-08-17 Cobra Tasks Fix Issues: Jump table located incorrectly Relaxation (Charlie has submitted a PR) (GCC) Incorrect version Then we can test the linker.</description></item><item><title>2022-08-17</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-17/</guid><description>2022-08-17 Cobra Tasks Fix Issues: Jump table located incorrectly Relaxation (Charlie has submitted a PR) (GCC) Incorrect version Then we can test the linker.</description></item><item><title>2022-08-24</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-24/</guid><description>2022-08-24 pull request from your repo to the official core-v-binutils-gdb repo to merge all the assembler/linker work (Pietra?) (REBASE) ✅ 2023-05-08 pull request from your repo to the official core-v-gcc repo to merge all the gcc work (Pietra?</description></item><item><title>2022-08-24</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-24/</guid><description>2022-08-24 pull request from your repo to the official core-v-binutils-gdb repo to merge all the assembler/linker work (Pietra?) (REBASE) ✅ 2023-05-08 pull request from your repo to the official core-v-gcc repo to merge all the gcc work (Pietra?</description></item><item><title>2022-08-25</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-25/</guid><description>2022-08-25 1 ../../../../../install/bin/riscv32-unknown-elf-gdb eh1.elf -ex &amp;#39;source ../../../../../install/share/gdb/python/gdb/ovlymgr.py&amp;#39; -ex &amp;#39;tar rem 192.168.0.134:3333&amp;#39; -ex load -ex &amp;#39;b main.c:82&amp;#39; -ex When I run:</description></item><item><title>2022-08-25</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-25/</guid><description>2022-08-25 1 ../../../../../install/bin/riscv32-unknown-elf-gdb eh1.elf -ex &amp;#39;source ../../../../../install/share/gdb/python/gdb/ovlymgr.py&amp;#39; -ex &amp;#39;tar rem 192.168.0.134:3333&amp;#39; -ex load -ex &amp;#39;b main.c:82&amp;#39; -ex When I run:</description></item><item><title>2022-10-06</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-10-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-10-06/</guid><description>2022-10-06 Trying to better understand the howto table and how the linker retrieves/stores information as I can&amp;rsquo;t seem to retrieve the value for the relocation, even though it seems to be retrieving the relocation itself.</description></item><item><title>2022-10-06</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-10-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-10-06/</guid><description>2022-10-06 Trying to better understand the howto table and how the linker retrieves/stores information as I can&amp;rsquo;t seem to retrieve the value for the relocation, even though it seems to be retrieving the relocation itself.</description></item><item><title>2022-10-11</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-10-11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/2022-10-11/</guid><description>We first get:
1 2 3 4 5 6 7 8 9 10 11 12 13 value = 65628 *rel -&amp;gt; r_offset = 2, r_info = 1760, r_addend = 0; howto: $21 = {type = 224, size = 2, bitsize = 32, rightshift = 1, bitpos = 0, complain_on_overflow = complain_overflow_unsigned, negate = 0, pc_relative = 1, partial_inplace = 0, pcrel_offset = 1, src_mask = 0, dst_mask = 4293918720, special_function = 0x5555555eca6f &amp;lt;bfd_elf_generic_reloc&amp;gt;, name = 0x55555572a20e &amp;#34;R_RISCV_CVPCREL_UI12&amp;#34;} value after getting the addend = 6 type = 224</description></item><item><title>2022-11-22</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-11-22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-11-22/</guid><description>Open Source SG AGM Im Pietra, as mentioned previously I&amp;rsquo;m a computer Science student at brunel university and a software engineer working for Embecosm.</description></item><item><title>2022-11-22</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-11-22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-11-22/</guid><description>Open Source SG AGM Im Pietra, as mentioned previously I&amp;rsquo;m a computer Science student at brunel university and a software engineer working for Embecosm.</description></item><item><title>Ambiguous Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/ambiguous-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/ambiguous-grammars/</guid><description>Ambiguous Grammars An ambiguous grammar permits more than one parse tree for some sentences. For example, parsing xxx with the following grammar: S $\rightarrow$ AA</description></item><item><title>Assembler Support for the RISC-V Zc* Extension - Report</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-22-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-22-cobra-report/</guid><description>Assembler Support for the RISC-V Zc* Extension - Report We&amp;rsquo;ve provided an interim release of the pre-built binaries and any support necessary to use them.</description></item><item><title>Assembler Support for the RISC-V Zc* Extension - Report</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-22-cobra-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2022-08-22-cobra-report/</guid><description>Assembler Support for the RISC-V Zc* Extension - Report We&amp;rsquo;ve provided an interim release of the pre-built binaries and any support necessary to use them.</description></item><item><title>Assembly Test Example - CORE-V</title><link>https://pietraferreira.github.io/quartz/work/assembly-test-example-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/assembly-test-example-corev/</guid><description>Assembly Test Example - CORE-V 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 * { dg-do run } */ #include &amp;lt;stdlib.</description></item><item><title>B-Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/b-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/b-trees/</guid><description>B-Trees A B-tree of order m has the following properties:
every node has at most m children. every non-leaf node (except root) has at least m/2 children.</description></item><item><title>Binary Heap</title><link>https://pietraferreira.github.io/quartz/notes/general/binary-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/binary-heap/</guid><description>Binary Heap A binary heap is a form of binary tree, with two additional properties:
It is a complete binary tree, meaning that all levels of the tree (except possibly the last one) are full.</description></item><item><title>Binary Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/binary-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/binary-trees/</guid><description>Binary Trees A binary tree is a set of nodes linked into a simple structure. Every node has at most two children.</description></item><item><title>Bubble Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/bubble-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/bubble-sort/</guid><description>Bubble Sort Bubble sort is $O(n_2)$ meaning it is:
efficient if n is small. efficient if the array is mostly sorted.</description></item><item><title>Bucket Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/bucket-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/bucket-sort/</guid><description>Bucket Sort Generally you can&amp;rsquo;t do better than $O_{n\ log\ n}$ with binary comparison.
However, can do better if the structure of the data is known, which allows to sort it into buckets in a single operation.</description></item><item><title>Building Cobra</title><link>https://pietraferreira.github.io/quartz/work/building-cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/building-cobra/</guid><description>How to build I have a cobra folder which contains:
1 2 ❯ ls binutils build install logs toolchain Here binutils is my corev-binutils-gdb fork, I just renamed it so the build script can find it.</description></item><item><title>C</title><link>https://pietraferreira.github.io/quartz/notes/general/c-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/c-language/</guid><description>Declaration vs Definition A definition associates a name with an implementation of that name, either data or code:
A definition of a variable induces the compiler to reserve some space for that variable and possibly fill that space with a particular value.</description></item><item><title>Chomsky Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/chomsky-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/chomsky-grammars/</guid><description>Chomsky Grammars Type 0 (free) grammars:
Productions of the form u $\rightarrow$ v, where: u, v are arbitrary string in V.</description></item><item><title>Code Generation</title><link>https://pietraferreira.github.io/quartz/notes/private/work/code-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/code-generation/</guid><description>What is Code Generation? The first part of a compiler analyses the source code into a structure that carries the meaning of the program; this structure is generally the abstract syntax tree that&amp;rsquo;s been checked and decorated.</description></item><item><title>Compiler Optimsation</title><link>https://pietraferreira.github.io/quartz/notes/private/work/compiler-optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/compiler-optimisation/</guid><description>Compilers perform a set of transformations on the source code. While some of the transformations are necessary to generate machine code, most of the transformations are done to improve the performance of programs or to reduce the code size.</description></item><item><title>Compiler Toolchains</title><link>https://pietraferreira.github.io/quartz/notes/private/work/compiler-toolchains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/compiler-toolchains/</guid><description>GNU RISC-V Toolchain CORE-V Toolchain What is a Compiler Toolchain? A compiler toolchain is a set of tools, supporting libraries, and header files that help build a program from source to an executable that can run on a machine.</description></item><item><title>Compilers</title><link>https://pietraferreira.github.io/quartz/notes/private/work/compilers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/compilers/</guid><description>A compiler is a system that converts a program from one language to another. In the context of this course, we refer to a compiler as a program that converts a high-level language like C, C++ to a low-level language like assembly language or an executable format.</description></item><item><title>CORE-V Relocations</title><link>https://pietraferreira.github.io/quartz/work/corev-relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/corev-relocations/</guid><description>CORE-V Relocations There are two custom relocations:
BDF_RELOC_RISCV_CVPCREL_URS1: 5-bit relocation for the rs1 operand in cv.setup, its relocation number is 225.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/private/work/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/private/work/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/private/work/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Group’s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>CS Problems</title><link>https://pietraferreira.github.io/quartz/notes/general/cs-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/cs-problems/</guid><description>CS Problems P vs NP problem. K-clique in a graph. Boolean satisfiability. Travelling Salesman problem. Knapsack problem. Linear Knapsack Problem.</description></item><item><title>Debugging Techniques</title><link>https://pietraferreira.github.io/quartz/notes/private/work/debugging-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/debugging-techniques/</guid><description>Debugging is an essential part of the software development lifecycle. Even with the most robust programming practices bugs creep in, and debugging them is not a pleasant experience.</description></item><item><title>DejaGNU Notes</title><link>https://pietraferreira.github.io/quartz/work/dejagnu-documentation-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/dejagnu-documentation-notes/</guid><description>DejaGNU Notes General notes on DejaGNU.
It is implemented as the runtest command: runtest [options] [test]
Comprises of a command to run tests, language in which to write the tests (expect), a standard directory structure for the tests and a set of configuration files.</description></item><item><title>Engineer Training Hub</title><link>https://pietraferreira.github.io/quartz/notes/private/work/engineer-training-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/engineer-training-hub/</guid><description>1 2 3 4 table without ID title as &amp;#34;Title&amp;#34;, file.ctime as &amp;#34;Created Time&amp;#34;, file.link as &amp;#34;Link&amp;#34; from #work/engineer-training sort file.</description></item><item><title>Equivalent Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/equivalent-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/equivalent-grammars/</guid><description>Equivalent Grammars Equivalent grammars define the same language:
G A $\rightarrow$ Ax | y
G' A $\rightarrow$ yB B $\rightarrow$ yB | $\varepsilon$</description></item><item><title>Facial Recognition Google Board - Script</title><link>https://pietraferreira.github.io/quartz/work/facial-recognition-board-talk-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/facial-recognition-board-talk-script/</guid><description>Facial Recognition Google Board - Script Will was the one to actually deliver this talk as I wasn&amp;rsquo;t feeling well on that day.</description></item><item><title>Floyd-Warshall</title><link>https://pietraferreira.github.io/quartz/notes/general/floyd-warshall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/floyd-warshall/</guid><description>Floyd-Warshall It is a shortest path algorithm that calculates the shorted path between all pairs of vertices.
Negative edges are allowed.</description></item><item><title>Formal Languages</title><link>https://pietraferreira.github.io/quartz/notes/general/formal-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/formal-languages/</guid><description>Formal Languages Formal languages are used among others as the basis for defining the grammar of programming languages and formalised versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics.</description></item><item><title>Garbage Collection</title><link>https://pietraferreira.github.io/quartz/notes/general/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/garbage-collection/</guid><description>Garbage Collection How do you reuse memory in a program?
Explicit allocation and free: malloc/free (C), new/delete (C++).
It traces garbage collection and does reference counting.</description></item><item><title>GCC Guide by Maxim</title><link>https://pietraferreira.github.io/quartz/work/gcc-guide-by-maxim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/gcc-guide-by-maxim/</guid><description>GCC Guide by Maxim 1: How Generic GCC lowers GIMPLE memory operations into RTL memory operations, and how we can have a hand in its operation This is the top level function that GCC calls when it is lowering GIMPLE -&amp;gt; RTL, and wishes to generate a memory move/memory copy operation:</description></item><item><title>GDB</title><link>https://pietraferreira.github.io/quartz/notes/private/work/gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/gdb/</guid><description>All the basic commands can be found here.
Remote Debugging gdb can be used to debug programs running on another machine.</description></item><item><title>GNU</title><link>https://pietraferreira.github.io/quartz/notes/general/gnu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gnu/</guid><description>Extensive collection of free software which can be used as an operating system or in parts with other operating systems.</description></item><item><title>Graphviz</title><link>https://pietraferreira.github.io/quartz/notes/private/work/graphviz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/graphviz/</guid><description>Graphiz is a package of tools supporting the DOT graph description language.
DOT is a textual representation of arbitrary graphs (suffix .</description></item><item><title>Halting Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/halting-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/halting-problem/</guid><description>A program to determine if any given program will complete in finite time.
So imagine you write this program, P, and in its main program it has:</description></item><item><title>Hardware Loops - COREV</title><link>https://pietraferreira.github.io/quartz/notes/private/work/hardware-loops-gcc-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/hardware-loops-gcc-corev/</guid><description>Hardware Loops (GCC) - COREV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (define_insn &amp;#34;set_hwloop_cvstart&amp;#34; [(set (match_operand:SI 0 &amp;#34;le_register_operand&amp;#34; &amp;#34;=t&amp;#34;) (label_ref (match_operand 1 &amp;#34;&amp;#34; &amp;#34;&amp;#34; )) ) (use (match_operand:SI 2 &amp;#34;immediate_operand&amp;#34; &amp;#34;I&amp;#34;)) ] &amp;#34;&amp;#34; &amp;#34;cv.</description></item><item><title>Hardware Loops - COREV</title><link>https://pietraferreira.github.io/quartz/notes/private/work/hardware-loops-gcc-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/hardware-loops-gcc-corev/</guid><description>Hardware Loops (GCC) - COREV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 (define_insn &amp;#34;set_hwloop_cvstart&amp;#34; [(set (match_operand:SI 0 &amp;#34;le_register_operand&amp;#34; &amp;#34;=t&amp;#34;) (label_ref (match_operand 1 &amp;#34;&amp;#34; &amp;#34;&amp;#34; )) ) (use (match_operand:SI 2 &amp;#34;immediate_operand&amp;#34; &amp;#34;I&amp;#34;)) ] &amp;#34;&amp;#34; &amp;#34;cv.</description></item><item><title>Hash Tables</title><link>https://pietraferreira.github.io/quartz/notes/general/hash-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/hash-tables/</guid><description>Hash Tables A hash table is a data structure which offers a fast implementation of the associative array (abstract data structure, also called a map, symbol table or dictionary) .</description></item><item><title>Heapsort</title><link>https://pietraferreira.github.io/quartz/notes/general/heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/heapsort/</guid><description>Heapsort Uses binary heap trees to sort (I think!).
It has average : $O_{n\ log\ n}$ Worst case performance: $O_{n\ log\ n}$</description></item><item><title>How to add an instruction to the GNU assembler</title><link>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</guid><description>How to add an instruction to the GNU assembler We can use cv.starti as an example. It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.</description></item><item><title>How to Manually Check a Test</title><link>https://pietraferreira.github.io/quartz/notes/private/work/how-to-manually-check-as-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/how-to-manually-check-as-test/</guid><description>How to Manually Check a Test Instruction listing:
So we have:
1 011u uurr ruud dd00 For example, if we want to test:</description></item><item><title>How to Manually Check a Test</title><link>https://pietraferreira.github.io/quartz/notes/private/work/how-to-manually-check-as-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/how-to-manually-check-as-test/</guid><description>How to Manually Check a Test Instruction listing:
So we have:
1 011u uurr ruud dd00 For example, if we want to test:</description></item><item><title>How to Use Creduce by Ed</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-23-how-to-use-creduce-by-ed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-23-how-to-use-creduce-by-ed/</guid><description>How to Use Creduce by Ed As for steps on how to use Creduce:
Take a copy of the failing test in a temporary directory:</description></item><item><title>How to Use Creduce by Ed</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-23-how-to-use-creduce-by-ed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2021-04-23-how-to-use-creduce-by-ed/</guid><description>How to Use Creduce by Ed As for steps on how to use Creduce:
Take a copy of the failing test in a temporary directory:</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/private/work/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/private/work/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</guid><description>The relocation table records the list of items that the file needs (from other object files or libraries).
The relocation record contains information like: which instructions need to be relocated (the offsets), which symbols are involved with the relocation and how to relocate the files relative to the symbols.</description></item><item><title>Inkblot Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/inkblot-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/inkblot-algorithm/</guid><description>Inkblot Algorithm Couldn&amp;rsquo;t find much online about it, but I think it&amp;rsquo;s a &amp;ldquo;populating&amp;rdquo; algorithm to find a path (A-&amp;gt;B).</description></item><item><title>Instruction Set Semantics</title><link>https://pietraferreira.github.io/quartz/notes/general/instruction-set-semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/instruction-set-semantics/</guid><description>Instruction Set Semantics Most general is the three address instruction set:
result = operand1 operator operand2 ^44cfb5
Two address instruction sets use one of the operand addresses for the result.</description></item><item><title>Intermediate Representations</title><link>https://pietraferreira.github.io/quartz/notes/general/intermediate-representations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/intermediate-representations/</guid><description>Intermediate Representations There are three main ones:
Parse Trees IDK What this is sorry :( Three Address Code</description></item><item><title>Introduction to RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/private/work/introduction-to-riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/introduction-to-riscv/</guid><description>Introduction to RISC-V Notes on the Introduction to RISC-V LinuxFoundation course.
Chapter 1 - Getting to know RISC-V Overview Difference between RISC-V ISA and RISC-V international.</description></item><item><title>ISA (Instruction Set Architecture)</title><link>https://pietraferreira.github.io/quartz/notes/private/work/isa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/isa/</guid><description>An instruction set architecture (ISA) is an abstract model of a computer. It is also referred to as architecture or computer architecture.</description></item><item><title>Jump Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</guid><description>Jump Table It can either be an array of pointers to functions or an array of machine code jump instructions.</description></item><item><title>Kruskal's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/kruskals-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/kruskals-algorithm/</guid><description>Kruskal&amp;rsquo;s Algorithm It is a minimum spanning subtree algorithm.
It performs well for sparse graphs due to simple data structures: $O_(E\ log\ N)$.</description></item><item><title>Lexical Analysis</title><link>https://pietraferreira.github.io/quartz/notes/general/lexical-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/lexical-analysis/</guid><description>Lexical Analysis It is the process of grouping individual characters into basic entities, known as tokens or lexemes.
Examples: integer, variable, addition operator.</description></item><item><title>Linear Equations</title><link>https://pietraferreira.github.io/quartz/notes/general/linear-equations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linear-equations/</guid><description>Linear Equations The basic representation is: $$\begin{align*} \begin{pmatrix} a_{11} &amp;amp; a_{12}\\ a_{21} &amp;amp; a_{22} \end{pmatrix} \begin{pmatrix} x_1\\ x_2 \end{pmatrix} = \begin{pmatrix} b_1\\ b_2 \end{pmatrix} \end{align*}$$</description></item><item><title>Linear Knapsack Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/linear-knapsack-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linear-knapsack-problem/</guid><description>Linear Knapsack Problem Also known as the stock cutting problem.
Consider capacity 100, and object of size {53, 53, 49, 49, 3}.</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/private/work/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/linker/</guid><description>Linker Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Lists</title><link>https://pietraferreira.github.io/quartz/notes/general/lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/lists/</guid><description>Lists A list is a sequence of zero or more data items, with the total number of items being the length of the list.</description></item><item><title>LLVM</title><link>https://pietraferreira.github.io/quartz/notes/general/llvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/llvm/</guid><description>LLVM The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Prebuilt binaries of the LLVM toolchain can be downloaded from the LLVM Download Page.</description></item><item><title>Meet-up 2020 CORE-V - Script</title><link>https://pietraferreira.github.io/quartz/work/meetup-2020-corev-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/meetup-2020-corev-script/</guid><description>Meet-up 2020 CORE-V - Script Slides can be found here.
Good evening, I’m Pietra and today together with my colleagues Mary and Jessica we will be presenting our work on porting the GNU CORE-V toolchain.</description></item><item><title>Minimum Spanning Tree</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/minimum-spanning-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/minimum-spanning-tree/</guid><description>It is a subtree with the minimum possible edge weight that connects all nodes together.
There must exist no cycles in the tree, meaning it is usually a complete graph.</description></item><item><title>Newton-Raphson Iteration</title><link>https://pietraferreira.github.io/quartz/notes/general/newton-raphson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/newton-raphson/</guid><description>Newton-Raphson Iteration Want to find the root of $f(x)$, for example a value for $x$ such that $f(x) = 0$.</description></item><item><title>P vs NP Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/p-vs-np/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/p-vs-np/</guid><description>P vs NP Problem Imagine an Oracle. Guesses and gets the right answer.
Build by (infinitely) many processors in a tree.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/private/work/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/private/work/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>Parse Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/parse-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/parse-trees/</guid><description>Grammatically $S \rightarrow A | B$ $A \rightarrow A\ x | y$ $B \rightarrow z$
Parse tree for yxxz: Parsing Sentences Apply successive productions.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the dynamic linker.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the dynamic linker.</description></item><item><title>Prim's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</guid><description>Prim&amp;rsquo;s Algorithm It is a minimum spanning tree algorithm.
It scales well, fast with dense graphs.
It has a of $O_{E\ log\ N}$ with binary heap and $O_{E\ +\ log\ N}$ with Fibonacci heap.</description></item><item><title>Quicksort</title><link>https://pietraferreira.github.io/quartz/notes/general/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/quicksort/</guid><description>It picks a midpoint (approximate the median) and partition values, into those less than the midpoint (left) and greater (right).</description></item><item><title>Relocation Prototype</title><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype/</guid><description>Relocation Handling Prototype Introduction to the project needed for future psABI meeting eg: in COREV we have custom relocations that live in the reserved space, but we need to be able to share that reserved space with other tool chains.</description></item><item><title>Relocation Prototype Reports</title><link>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/relocation-prototype-reports-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/relocation-prototype/relocation-prototype-reports/relocation-prototype-reports-hub/</guid><description>Relocation Prototype Reports Where I keep all of my reports related to the relocation handling prototype project.
Here they are nicely sorted:</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</guid><description>Relocations Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item><item><title>Relocations - COREV</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocations-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocations-corev/</guid><description>Relocations - COREV what is complain and overflow?
howto_table in bfd/elfxx-riscv.c
what is size? bitsize? pc relative is a pc relative rellocation</description></item><item><title>RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/private/work/riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/riscv/</guid><description>RISC-V Introduction to RISC-V RISC-V Assembler Reference Instruction Set Reference RISC-V IS Cheatsheet ( here) RISC-V ASM Cheatsheet ( here) RISC-V Assembly for Beginners ( here) RISC-V Assembly Code Examples ( here)</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</guid><description>RISC-V Assembler Reference This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</guid><description>RISC-V Assembler Reference This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>Sets and Maps</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/sets-and-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/sets-and-maps/</guid><description>Sets are a collection of objects:
They might be ordered or unordered. Two variants: Single instance of any object.</description></item><item><title>Shell Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/shell-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/shell-sort/</guid><description>Shell sort adds one more loop outside bubble sort.
It starts by sorting small overlapping subsets, then makes then smaller but by then the array is mostly sorted.</description></item><item><title>Stack</title><link>https://pietraferreira.github.io/quartz/notes/general/stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/stack/</guid><description>Stack Last in, first out (LIFO), simple list works well for this. Think of a stack of plates.</description></item><item><title>Strode College Talk - Script</title><link>https://pietraferreira.github.io/quartz/work/strode-talk-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/strode-talk-script/</guid><description>Strode College Talk - Script What do I do? I&amp;rsquo;m currently a software engineer at Embecosm. At Embecosm we work on the boundary of hardware, more specifically with compilers.</description></item><item><title>Syntax Directed Translation</title><link>https://pietraferreira.github.io/quartz/notes/general/syntax-directed-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/syntax-directed-translation/</guid><description>Syntax Directed Translation Use attribute grammars, where productions are supplemented with information to control semantic analysis and translation.
Associate attributes with each grammar symbol to describe its properties.</description></item><item><title>Sysroot</title><link>https://pietraferreira.github.io/quartz/notes/private/work/sysroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/sysroot/</guid><description>Sysroot Any compiler needs to know where the standard headers, standard libraries, and the c-runtime are present. All of these are packaged together for each target (e.</description></item><item><title>Testing Relaxation - COREV</title><link>https://pietraferreira.github.io/quartz/notes/private/work/testing-relaxation-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/testing-relaxation-corev/</guid><description>Testing Relaxation - COREV readelf -r on .o files -&amp;gt; looks for particular relocations -&amp;gt; instead of -a it checks if we&amp;rsquo;re getting the right relocation</description></item><item><title>Testing Relaxation - COREV</title><link>https://pietraferreira.github.io/quartz/notes/private/work/testing-relaxation-corev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/testing-relaxation-corev/</guid><description>Testing Relaxation - COREV readelf -r on .o files -&amp;gt; looks for particular relocations -&amp;gt; instead of -a it checks if we&amp;rsquo;re getting the right relocation</description></item><item><title>Three Address Code</title><link>https://pietraferreira.github.io/quartz/notes/private/work/three-address-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/three-address-code/</guid><description>Three Address Code Parse trees are sometimes used in early stages of compilers.
They are not ideal for optimisation.</description></item><item><title>Tiger - Sync-up</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-18-tiger-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-18-tiger-meeting/</guid><description>Tiger - Synch-up Paolo been working on testing. He has TIGER/toolchain/gcc-test-scan, inside he has folders with errors for practicality. First take the directories from Jenkins and run the script.</description></item><item><title>Tiger - Sync-up</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-18-tiger-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-18-tiger-meeting/</guid><description>Tiger - Synch-up Paolo been working on testing. He has TIGER/toolchain/gcc-test-scan, inside he has folders with errors for practicality. First take the directories from Jenkins and run the script.</description></item><item><title>Tiger - Sync-up</title><link>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-18-tiger-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/2020-11-18-tiger-meeting/</guid><description>Tiger - Synch-up Paolo been working on testing. He has TIGER/toolchain/gcc-test-scan, inside he has folders with errors for practicality. First take the directories from Jenkins and run the script.</description></item><item><title>Tiger Optimisation (memset/memcpy)</title><link>https://pietraferreira.github.io/quartz/notes/private/work/tiger-optimisation-memset-memcpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/tiger-optimisation-memset-memcpy/</guid><description>Tiger Optimisation (memset/memcpy) Optimising expansion of memcpy/memset using hardware loops Currently memcpy and memset get expanded to a list of stores and loads for small sized values.</description></item><item><title>Tiger Optimisation (memset/memcpy)</title><link>https://pietraferreira.github.io/quartz/notes/private/work/tiger-optimisation-memset-memcpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/tiger-optimisation-memset-memcpy/</guid><description>Tiger Optimisation (memset/memcpy) Optimising expansion of memcpy/memset using hardware loops Currently memcpy and memset get expanded to a list of stores and loads for small sized values.</description></item><item><title>Titan Simulator Meeting</title><link>https://pietraferreira.github.io/quartz/work/2021-08-05-titan-simulator-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/2021-08-05-titan-simulator-meeting/</guid><description>05/08/21 - Titan Simulator Meeting The source code is in the LLVM project: BSCSimulator.cpp.
Central to this is the include file: BSCGenRegisterInfo.</description></item><item><title>Trees</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/trees/</guid><description>Trees Abstract data type that represents a hierarchical tree structure with a set of connected nodes. Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the root node, which has no parent.</description></item><item><title>University of Bologna Meeting</title><link>https://pietraferreira.github.io/quartz/work/2021-08-13-uob-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/work/2021-08-13-uob-meeting/</guid><description>University of Bologna Meeting They seem to be working on Immediate Branching
I reported that we finished all testing
Just Nazareno showed up.</description></item><item><title>Useful Commands Dump</title><link>https://pietraferreira.github.io/quartz/notes/private/work/useful-commands-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/useful-commands-dump/</guid><description>Useful Commands Dump Well&amp;hellip; where I dump any useful commands I find and them hopefully I&amp;rsquo;ll categorise them&amp;hellip; eventually&amp;hellip;</description></item><item><title>Vectors and Arrays</title><link>https://pietraferreira.github.io/quartz/notes/general/vectors-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/vectors-arrays/</guid><description>Vectors and Arrays Vectors are typically 1-d whereas arrays can be multi-dimensional. in C/C++ they are indexed from zero.</description></item><item><title>ZFinx Notes</title><link>https://pietraferreira.github.io/quartz/notes/private/work/zfinx-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/zfinx-notes/</guid><description>ZFinx Notes Hi I&amp;rsquo;m Pietra, I&amp;rsquo;ve been looking at your problem with my colleagues Mary and Jessica. I&amp;rsquo;m wondering if there were any changes to the problem since we last spoke?</description></item></channel></rss>