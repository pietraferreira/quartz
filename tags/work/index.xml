<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>work on</title><link>https://pietraferreira.github.io/quartz/tags/work/</link><description>Recent content in work on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/work/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiler Toolchains</title><link>https://pietraferreira.github.io/quartz/notes/compiler-toolchains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compiler-toolchains/</guid><description>Compiler Toolchains [[gcc|GCC Toolchain]] [[llvm|LLVM Toolchain]] [[riscv-toolchain|RISC-V Toolchain]] [[corev-toolchain|CORE-V Toolchain]] What is a Compiler Toolchain? A compiler toolchain is a set of tools, supporting libraries, and header files that help build a program from source to an executable that can run on a machine.</description></item><item><title>Compilers</title><link>https://pietraferreira.github.io/quartz/notes/compilers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/compilers/</guid><description>Compilers A compiler is a system that converts a program from one language to another. In the context of this course, we refer to a compiler as a program that converts a high-level language like C, C++ to a low-level language like assembly language or an executable format.</description></item><item><title>CORE-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/corev-toolchain/</guid><description>CORE-V Toolchain CORE-V is a family of RISC-V cores developed by the OpenHW Group.
The first two projects within the OpenHW Groupâ€™s CORE-V family of RISC-V cores are the CV32E40P and CVA6.</description></item><item><title>Debugging Techniques</title><link>https://pietraferreira.github.io/quartz/notes/debugging-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/debugging-techniques/</guid><description>Debugging Techniques Debugging is an essential part of the software development lifecycle. Even with the most robust programming practices bugs creep in, and debugging them is not a pleasant experience.</description></item><item><title>Engineer Training Hub</title><link>https://pietraferreira.github.io/quartz/notes/engineer-training-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/engineer-training-hub/</guid><description>Engineer Training Hub Syllabus: [[algorithms-and-data-structure|Algorithms and Data Structure]]
Assembly programming C/C++ Programming [[compilers|Compilers]]
Functional Programming Modeling Operating Systems Other Languages Software Engineering</description></item><item><title>GDB</title><link>https://pietraferreira.github.io/quartz/notes/gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/gdb/</guid><description>GDB All the basic commands can be found [[useful-commands-dump#GDB|here]].
Remote Debugging gdb can be used to debug programs running on another machine.</description></item><item><title>Graphviz</title><link>https://pietraferreira.github.io/quartz/notes/graphviz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/graphviz/</guid><description>Graphviz Graphiz is a package of tools supporting the DOT [[graphs|graph]] description language.
DOT is a textual representation of arbitrary graphs (suffix .</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/howto-table/</guid><description>Howto Table a.k.a. Relocation Table The relocation table records the list of items that the file needs (from other object files or libraries).</description></item><item><title>Introduction to RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/introduction-to-riscv/</guid><description>Introduction to RISC-V Notes on the Introduction to RISC-V LinuxFoundation course.
[[introduction-to-riscv#Chapter 1 - Getting to know RISC-V|Chapter 1]] - Getting to know RISC-V [[introduction-to-riscv#Chapter 2 - The RISC-V Story|Chapter 2]] - The RISC-V Story [[introduction-to-riscv#Chapter 3 - The RISC-V Community|Chapter 3]] - The RISC-V Community [[introduction-to-riscv#Chapter 4 - Developing RISC-V|Chapter 4]] - Developing RISC-V [[introduction-to-riscv#Chapter 5 - RISC-V In Practice|Chapter 5]] - RISC-V in Practice Chapter 1 - Getting to know RISC-V Overview Difference between RISC-V [[isa|ISA]] and RISC-V international.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>RISC-V</title><link>https://pietraferreira.github.io/quartz/notes/riscv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/riscv/</guid><description>RISC-V [[introduction-to-riscv|Introduction to RISC-V]]</description></item><item><title>Sysroot</title><link>https://pietraferreira.github.io/quartz/notes/sysroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/sysroot/</guid><description>Sysroot Any [[compilers|compiler]] needs to know where the standard headers, standard libraries, and the c-runtime are present. All of these are packaged together for each target (e.</description></item><item><title>Useful Commands Dump</title><link>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/useful-commands-dump/</guid><description>Useful Commands Dump Well&amp;hellip; where I dump any useful commands I find and them hopefully I&amp;rsquo;ll categorise them&amp;hellip; eventually&amp;hellip;</description></item></channel></rss>