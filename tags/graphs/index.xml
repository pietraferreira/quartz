<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graphs on</title><link>https://pietraferreira.github.io/quartz/tags/graphs/</link><description>Recent content in graphs on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/graphs/index.xml" rel="self" type="application/rss+xml"/><item><title>Best-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/best-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/best-first-search/</guid><description>Best-First Search It is an improvement upon depth-first search.
A heuristic is used to decide which node is explored next:</description></item><item><title>Breadth-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/breadth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/breadth-first-search/</guid><description>Breadth-First Search It explores the graph differently from depth-first search.
It considers the neighbouring nodes first:
All the neighbours at the start node are expanded first.</description></item><item><title>Depth-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/depth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/depth-first-search/</guid><description>Depth-First Search It allows us to explore nodes and edges of a graph.
The traversal will go as far as possible down a path until a dead end is reached.</description></item><item><title>Exhaustive Search</title><link>https://pietraferreira.github.io/quartz/notes/university/exhaustive-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/exhaustive-search/</guid><description>Exhaustive Search It systematically evaluates every possible path in a graph. It is guaranteed to find what we are looking for, however it is unsuitable for most real world problems.</description></item><item><title>Graphs</title><link>https://pietraferreira.github.io/quartz/notes/general/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/graphs/</guid><description>Graphs A graph consists of:
A set of fixed objects, nodes. A set of edges, which may have arrows and have values attached.</description></item><item><title>Minimum Spanning Tree</title><link>https://pietraferreira.github.io/quartz/notes/general/minimum-spanning-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/minimum-spanning-tree/</guid><description>Minimum Spanning Tree It is a subtree with the minimum possible edge weight that connects all nodes together.
There must exist no cycles in the tree, meaning it is usually a complete graph.</description></item><item><title>Prim's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</guid><description>Prim&amp;rsquo;s Algorithm It is a minimum spanning tree algorithm.
It scales well, fast with dense graphs.
It has a of $O_{E\ log\ N}$ with binary heap and $O_{E\ +\ log\ N}$ with Fibonacci heap.</description></item></channel></rss>