<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>university/cs2004 on</title><link>https://pietraferreira.github.io/quartz/tags/university/cs2004/</link><description>Recent content in university/cs2004 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/university/cs2004/index.xml" rel="self" type="application/rss+xml"/><item><title>Ant Colony Optimisation and Particle Swarm Optimisation</title><link>https://pietraferreira.github.io/quartz/notes/university/aco-and-pso/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/aco-and-pso/</guid><description>Swarm Intelligence The interaction of many simple parts creating complex behaviour. This means that the net effect of group&amp;rsquo;s collective wisdom is greater than the sum of the individuals.</description></item><item><title>Asymptotic Analysis</title><link>https://pietraferreira.github.io/quartz/notes/university/asymptotic-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/asymptotic-analysis/</guid><description>The asymptotic analysis of an algorithm determines the running time in Big O notation.
To perform the asymptotic analysis:</description></item><item><title>Best-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/best-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/best-first-search/</guid><description>It is an improvement upon depth-first search.
A heuristic is used to decide which node is explored next:
A heuristic is a rule of thumb or best practice.</description></item><item><title>Big O Notation</title><link>https://pietraferreira.github.io/quartz/notes/general/big-o-notation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/big-o-notation/</guid><description>Big O Notation It describes how the performance of an algorithm scales with the size of the problem.
may be time to execute or amount of memory.</description></item><item><title>Breadth-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/breadth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/breadth-first-search/</guid><description>It explores the graph differently from depth-first search.
It considers the neighbouring nodes first:
All the neighbours at the start node are expanded first.</description></item><item><title>Classes, Types and Objects</title><link>https://pietraferreira.github.io/quartz/notes/university/classes-types-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/classes-types-objects/</guid><description>Notes from &amp;ldquo;Data Structures and Algorithms in Java by Michael T. Goodrich&amp;rdquo;.
Objects store data and provide methods for accessing and modifying data.</description></item><item><title>CS2004 - Algorithms</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/</guid><description> Lecturer: Mahir Arzoky
60% Coursework -&amp;gt; Due on Friday, Week 21.
40% Exam -&amp;gt; Available on Week 23.
Lectures Introduction Foundation Analysis - (Lecture 2) Time Complexity - (Lecture 4) Asymptotic Notation - (Lecture 4) Data Structures and Applications - (Lecture 5) Sorting - (Lecture 6) Graph Traversal - (Lecture 7) Depth-First Search Exhaustive Search Breath-First Search Best-First Search - A* Search Minimum Spanning Tree (MST) - Prim&amp;rsquo;s Dijkstra&amp;rsquo;s Algorithm - (Lecture 8) Search and Fitness - (Lecture 9) Heuristic Search and Simulated Annealing - (Lecture 10) Introduction to Genetic Algorithms - (Lecture 11) Evolutionary Computation - (Lecture 12) Ant Colony Optimisation and Particle Swarm Optimisation - (Lecture 13) References Classes, Types, and Objects Big O Notation Sets and Maps Trees</description></item><item><title>CS2004 - Data Structures</title><link>https://pietraferreira.github.io/quartz/notes/university/data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/data-structures/</guid><description>CS2004 - Data Structures Data structures are the foundation stone of all algorithms.
We can measure how good a particular data structure is by using big-O notation.</description></item><item><title>Depth-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/depth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/depth-first-search/</guid><description>Depth-First Search It allows us to explore nodes and edges of a graph.
The traversal will go as far as possible down a path until a dead end is reached.</description></item><item><title>Dijkstra Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/dijkstra-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/dijkstra-algorithm/</guid><description>It is used to determine the shortest path from one node in the graph to every other node within the same graph, provided they can be reached from the source node.</description></item><item><title>Evolutionary Programming</title><link>https://pietraferreira.github.io/quartz/notes/university/evolutionary-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/evolutionary-programming/</guid><description>Similar to Genetic Algorithms.
The emphasis here is on mutation and there is no crossover.
Every individual mutates, doubling the population.</description></item><item><title>Exhaustive Search</title><link>https://pietraferreira.github.io/quartz/notes/university/exhaustive-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/exhaustive-search/</guid><description>It systematically evaluates every possible path in a graph. It is guaranteed to find what we are looking for, however it is unsuitable for most real world problems.</description></item><item><title>Foundation of Algorithm Analysis</title><link>https://pietraferreira.github.io/quartz/notes/university/alg-foundation-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/alg-foundation-analysis/</guid><description>Running time. Pseudo-code. Counting primitive operations. Running Time Varies with the input and typically grows with the input size.</description></item><item><title>Graphs</title><link>https://pietraferreira.github.io/quartz/notes/general/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/graphs/</guid><description>Graphs A graph consists of:
A set of fixed objects, nodes. A set of edges, which may have arrows and have values attached.</description></item><item><title>Heuristic Seach, Hill Climbing and Simulated Annealing</title><link>https://pietraferreira.github.io/quartz/notes/university/hc-and-sa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/hc-and-sa/</guid><description>Heuristic Search Some difficult problems (NP-hard) cannot be solved in a straightforward manner.
We need to develop approximation algorithms to solve these problems.</description></item><item><title>Introduction to Algorithms</title><link>https://pietraferreira.github.io/quartz/notes/university/alg-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/alg-intro/</guid><description>An algorithm is a set of steps for solving a problem. It is a well-defined computational procedure that takes some value(s) as input and produces some value(s) as output.</description></item><item><title>Introduction to Genetic Algorithms</title><link>https://pietraferreira.github.io/quartz/notes/university/intro-gen-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/intro-gen-algorithms/</guid><description>Genetic Algorithms belong to a family of techniques that are inspired from evolution theory.
Each gene is a binary digit.</description></item><item><title>Minimum Spanning Tree</title><link>https://pietraferreira.github.io/quartz/notes/general/minimum-spanning-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/minimum-spanning-tree/</guid><description>It is a subtree with the minimum possible edge weight that connects all nodes together.
There must exist no cycles in the tree, meaning it is usually a complete graph.</description></item><item><title>Search and Fitness</title><link>https://pietraferreira.github.io/quartz/notes/university/search-and-fitness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/search-and-fitness/</guid><description>Definition of a Search Problem For some problems we need to search for a solution from a (usually) very large number of possibilities, search problems.</description></item><item><title>Sets and Maps</title><link>https://pietraferreira.github.io/quartz/notes/general/sets-and-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/sets-and-maps/</guid><description>Sets and Maps Sets are a collection of objects:
They might be ordered or unordered. Two variants: Single instance of any object.</description></item><item><title>Sorting</title><link>https://pietraferreira.github.io/quartz/notes/general/sorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/sorting/</guid><description>Sorting The sorting problem is a mapping from $x$ to $y$, where:
$x$ and $y$ are both n length real vectors (lists and/or arrays).</description></item><item><title>Time Complexity</title><link>https://pietraferreira.github.io/quartz/notes/university/time-complexity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/time-complexity/</guid><description>Sorting It is one of the most common tasks in data analysis.
Examples:
Print out a collection of employees sorted by salary.</description></item><item><title>Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/trees/</guid><description>Trees Abstract data type that represents a hierarchical tree structure with a set of connected nodes. Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the root node, which has no parent.</description></item></channel></rss>