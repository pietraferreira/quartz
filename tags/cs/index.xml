<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs on</title><link>https://pietraferreira.github.io/quartz/tags/cs/</link><description>Recent content in cs on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>2-3 Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/2-3-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/2-3-trees/</guid><description>2-3 Trees A tree, where every internal node has either:
two children and one data element (2-node); or three children and two data elements (3-node).</description></item><item><title>2022-06-27</title><link>https://pietraferreira.github.io/quartz/notes/hacking/2022-06-27-benefits-of-vms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/2022-06-27-benefits-of-vms/</guid><description>2022-06-27 React Game of Life ( Here) npm init react-app react-gameoflife
HackTheBox Setting Up Can track commands on the terminal by doing: 1 2 3 script &amp;lt;name&amp;gt;.</description></item><item><title>2022-06-27</title><link>https://pietraferreira.github.io/quartz/notes/hacking/2022-06-27-benefits-of-vms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/2022-06-27-benefits-of-vms/</guid><description>2022-06-27 React Game of Life ( Here) npm init react-app react-gameoflife
HackTheBox Setting Up Can track commands on the terminal by doing: 1 2 3 script &amp;lt;name&amp;gt;.</description></item><item><title>2022-06-28</title><link>https://pietraferreira.github.io/quartz/notes/hacking/pentesting-notes-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/pentesting-notes-commands/</guid><description>Resources HackTricks Tools SMB Server Message Blocks (Port 445) (aka Common Internet File System).
To enumerate:
1 2 3 4 smbclient -N -L \\\\{TARGET_IP}\\ -N: no password -L: look at what services are available To access:</description></item><item><title>2022-06-29</title><link>https://pietraferreira.github.io/quartz/notes/hacking/web-app-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/web-app-writeup/</guid><description>Web App Guide Source here.
Easy way to record when I take my creatine. When a link is tapped on the home screen, it records the visit and this preserves a record of when creatine was taken.</description></item><item><title>2022-07-15</title><link>https://pietraferreira.github.io/quartz/notes/hacking/daily-bugle-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/daily-bugle-writeup/</guid><description>Daily Bugle Writeup (TryHackMe) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 nmap -sV -sC 10.</description></item><item><title>2022-07-15</title><link>https://pietraferreira.github.io/quartz/notes/hacking/daily-bugle-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/daily-bugle-writeup/</guid><description>Daily Bugle Writeup (TryHackMe) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 nmap -sV -sC 10.</description></item><item><title>2022-10-04</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/2022-10-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/2022-10-04/</guid><description>2022-10-04 Students can:
Register for studies (matriculation) -&amp;gt; involves enrolling Enroll Withdraw Student receives certificate from student office.</description></item><item><title>Activity Diagram</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-activity-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-activity-diagram/</guid><description>Introduction The focus of the activity diagram is the procedural processing aspects.
It uses flow-oriented language concepts and it is based on:</description></item><item><title>Ambiguous Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/ambiguous-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/ambiguous-grammars/</guid><description>Ambiguous Grammars An ambiguous grammar permits more than one parse tree for some sentences. For example, parsing xxx with the following grammar: S $\rightarrow$ AA</description></item><item><title>B-Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/b-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/b-trees/</guid><description>B-Trees A B-tree of order m has the following properties:
every node has at most m children. every non-leaf node (except root) has at least m/2 children.</description></item><item><title>Binary Exploitation - By HTB</title><link>https://pietraferreira.github.io/quartz/notes/hacking/binary-exploitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/binary-exploitation/</guid><description>00 Check file vulnerabilities: 1 checksec --file &amp;lt;filename&amp;gt; Gets rid of Stack, NX and PIE protection (-m32 changes to 32bits): 1 gcc &amp;lt;filename&amp;gt;.</description></item><item><title>Binary Exploitation - By HTB</title><link>https://pietraferreira.github.io/quartz/notes/hacking/binary-exploitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/binary-exploitation/</guid><description>00 Check file vulnerabilities: 1 checksec --file &amp;lt;filename&amp;gt; Gets rid of Stack, NX and PIE protection (-m32 changes to 32bits): 1 gcc &amp;lt;filename&amp;gt;.</description></item><item><title>Binary Heap</title><link>https://pietraferreira.github.io/quartz/notes/general/binary-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/binary-heap/</guid><description>Binary Heap A binary heap is a form of binary tree, with two additional properties:
It is a complete binary tree, meaning that all levels of the tree (except possibly the last one) are full.</description></item><item><title>Binary Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/binary-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/binary-trees/</guid><description>Binary Trees A binary tree is a set of nodes linked into a simple structure. Every node has at most two children.</description></item><item><title>Bubble Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/bubble-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/bubble-sort/</guid><description>Bubble Sort Bubble sort is $O(n_2)$ meaning it is:
efficient if n is small. efficient if the array is mostly sorted.</description></item><item><title>Bucket Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/bucket-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/bucket-sort/</guid><description>Bucket Sort Generally you can&amp;rsquo;t do better than $O_{n\ log\ n}$ with binary comparison.
However, can do better if the structure of the data is known, which allows to sort it into buckets in a single operation.</description></item><item><title>C</title><link>https://pietraferreira.github.io/quartz/notes/general/c-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/c-language/</guid><description>Declaration vs Definition A definition associates a name with an implementation of that name, either data or code:
A definition of a variable induces the compiler to reserve some space for that variable and possibly fill that space with a particular value.</description></item><item><title>Chomsky Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/chomsky-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/chomsky-grammars/</guid><description>Chomsky Grammars Type 0 (free) grammars:
Productions of the form u $\rightarrow$ v, where: u, v are arbitrary string in V.</description></item><item><title>Compiler Flags</title><link>https://pietraferreira.github.io/quartz/notes/general/compiler-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/compiler-flags/</guid><description>Compiler Flags An industrial-strength compiler like GCC and LLVM has hundreds of flags that affect how the compiler behaves. There are many types of compiler flags and there is no easy way to classify types of compiler flags.</description></item><item><title>Compiler Instrumentation</title><link>https://pietraferreira.github.io/quartz/notes/general/compiler-instrumentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/compiler-instrumentation/</guid><description>Compiler Instrumentation As the compiler transforms the source code, it can also &amp;lsquo;insert&amp;rsquo; additional code into a program. These transformations are called compiler instrumentation.</description></item><item><title>CPU Architecture</title><link>https://pietraferreira.github.io/quartz/notes/hacking/cpu-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/cpu-architecture/</guid><description>This is part of a guide that you can find here.
A Von-Neumann architecture consists of four functional units:
Memory Control Unit Arithmetic Logical Unit Input/Output Unit The most important units, Arithmetic Logical Unit (ALU) and Control Unit (CU), are combined in the actual Central Processing Unit (CPU).</description></item><item><title>CPU Architecture</title><link>https://pietraferreira.github.io/quartz/notes/hacking/cpu-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/cpu-architecture/</guid><description>This is part of a guide that you can find here.
A Von-Neumann architecture consists of four functional units:
Memory Control Unit Arithmetic Logical Unit Input/Output Unit The most important units, Arithmetic Logical Unit (ALU) and Control Unit (CU), are combined in the actual Central Processing Unit (CPU).</description></item><item><title>Cross-Compilation</title><link>https://pietraferreira.github.io/quartz/notes/general/cross-compilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/cross-compilation/</guid><description>Cross-Compilation To understand the concept of cross-compilation, let’s revisit the definition of a compiler. A compiler is a program that converts a program from one language to another.</description></item><item><title>CS Problems</title><link>https://pietraferreira.github.io/quartz/notes/general/cs-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/cs-problems/</guid><description>CS Problems P vs NP problem. K-clique in a graph. Boolean satisfiability. Travelling Salesman problem. Knapsack problem. Linear Knapsack Problem.</description></item><item><title>Embedded Applications</title><link>https://pietraferreira.github.io/quartz/notes/general/embedded-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/embedded-applications/</guid><description>Embedded Applications The definition and use case of embedded systems have evolved over time. While embedded systems are used to denote computing systems performing very specific tasks, it is no longer the case in many situations.</description></item><item><title>Endianness</title><link>https://pietraferreira.github.io/quartz/notes/hacking/endianness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/endianness/</guid><description>This is part of a guide that you can find here.
Bytes are loaded in different order, called endianness.
Big-endian: the digits with the highest valence are initially.</description></item><item><title>Endianness</title><link>https://pietraferreira.github.io/quartz/notes/hacking/endianness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/endianness/</guid><description>This is part of a guide that you can find here.
Bytes are loaded in different order, called endianness.
Big-endian: the digits with the highest valence are initially.</description></item><item><title>Equivalent Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/equivalent-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/equivalent-grammars/</guid><description>Equivalent Grammars Equivalent grammars define the same language:
G A $\rightarrow$ Ax | y
G' A $\rightarrow$ yB B $\rightarrow$ yB | $\varepsilon$</description></item><item><title>File Encryption</title><link>https://pietraferreira.github.io/quartz/notes/hacking/file-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/file-encryption/</guid><description>File Encryption Windows 1 2 PS Import-Module .\Invoke-AESEncryption.ps1 PS Invoke-AESEncryption.ps1 -Mode Encrypt -Key &amp;#39;p4ssw0rd&amp;#39; -Path .\scan-results.txt Linux Encrypt 1 openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.</description></item><item><title>File Encryption</title><link>https://pietraferreira.github.io/quartz/notes/hacking/file-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/file-encryption/</guid><description>File Encryption Windows 1 2 PS Import-Module .\Invoke-AESEncryption.ps1 PS Invoke-AESEncryption.ps1 -Mode Encrypt -Key &amp;#39;p4ssw0rd&amp;#39; -Path .\scan-results.txt Linux Encrypt 1 openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.</description></item><item><title>File Transfer Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfer-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfer-cheatsheet/</guid><description>File Transfer Cheatsheet Command Description  Invoke-WebRequest https://&amp;lt;snip&amp;gt;/PowerView.ps1 -OutFile PowerView.ps1 Download a file with PowerShell IEX (New-Object Net.</description></item><item><title>File Transfer Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfer-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfer-cheatsheet/</guid><description>File Transfer Cheatsheet Command Description  Invoke-WebRequest https://&amp;lt;snip&amp;gt;/PowerView.ps1 -OutFile PowerView.ps1 Download a file with PowerShell IEX (New-Object Net.</description></item><item><title>File Transfers</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfers/</guid><description>File Transfers Netcat ( here) RDP ( here) File Encryption Nginx Living off the land Windows Download Operations PowerShell Base64 Encode and Decode We can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.</description></item><item><title>File Transfers</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-file-transfers/</guid><description>File Transfers Netcat ( here) RDP ( here) File Encryption Nginx Living off the land Windows Download Operations PowerShell Base64 Encode and Decode We can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.</description></item><item><title>Files Transfer - HTB Writeup</title><link>https://pietraferreira.github.io/quartz/notes/hacking/files-transfer-htb-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/files-transfer-htb-writeup/</guid><description>File Transfers PowerShell Base64 Encode and Decode We can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.</description></item><item><title>Files Transfer - HTB Writeup</title><link>https://pietraferreira.github.io/quartz/notes/hacking/files-transfer-htb-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/files-transfer-htb-writeup/</guid><description>File Transfers PowerShell Base64 Encode and Decode We can encode a file to a base64 string, copy contents from the terminal and then perform the reverse operation, meaning decoding the file in the original content.</description></item><item><title>Fixups</title><link>https://pietraferreira.github.io/quartz/notes/general/fixups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/fixups/</guid><description>Fix-ups Fix-ups are used to represent information in instructions which is currently unknown. During instruction encoding, if some information is unknown (such as a memory location of an external symbol), it is encoded as if the value is equal to 0 and a fix-up is emitted which contains information on how to rewrite the value when information is known.</description></item><item><title>Floyd-Warshall</title><link>https://pietraferreira.github.io/quartz/notes/general/floyd-warshall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/floyd-warshall/</guid><description>Floyd-Warshall It is a shortest path algorithm that calculates the shorted path between all pairs of vertices.
Negative edges are allowed.</description></item><item><title>Formal Languages</title><link>https://pietraferreira.github.io/quartz/notes/general/formal-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/formal-languages/</guid><description>Formal Languages Formal languages are used among others as the basis for defining the grammar of programming languages and formalised versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics.</description></item><item><title>Garbage Collection</title><link>https://pietraferreira.github.io/quartz/notes/general/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/garbage-collection/</guid><description>Garbage Collection How do you reuse memory in a program?
Explicit allocation and free: malloc/free (C), new/delete (C++).
It traces garbage collection and does reference counting.</description></item><item><title>GCC</title><link>https://pietraferreira.github.io/quartz/notes/general/gcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gcc/</guid><description>The popular gcc compiler ships with the gcc toolchain. It can be downloaded from GCC mirror sites. In order to download the precompiled binaries that are ready to use, go to the  Installing GCC: Binaries page.</description></item><item><title>Generate Shellcode</title><link>https://pietraferreira.github.io/quartz/notes/hacking/generate-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/generate-shellcode/</guid><description>This is part of a guide that you can find here.
We have to pay attention to:
Architecture Platform Bad Characters We can use msfvenom to generate our shellcode:</description></item><item><title>Generate Shellcode</title><link>https://pietraferreira.github.io/quartz/notes/hacking/generate-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/generate-shellcode/</guid><description>This is part of a guide that you can find here.
We have to pay attention to:
Architecture Platform Bad Characters We can use msfvenom to generate our shellcode:</description></item><item><title>GNU</title><link>https://pietraferreira.github.io/quartz/notes/general/gnu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gnu/</guid><description>Extensive collection of free software which can be used as an operating system or in parts with other operating systems.</description></item><item><title>Halting Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/halting-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/halting-problem/</guid><description>A program to determine if any given program will complete in finite time.
So imagine you write this program, P, and in its main program it has:</description></item><item><title>Hash Tables</title><link>https://pietraferreira.github.io/quartz/notes/general/hash-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/hash-tables/</guid><description>Hash Tables A hash table is a data structure which offers a fast implementation of the associative array (abstract data structure, also called a map, symbol table or dictionary) .</description></item><item><title>Heapsort</title><link>https://pietraferreira.github.io/quartz/notes/general/heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/heapsort/</guid><description>Heapsort Uses binary heap trees to sort (I think!).
It has average : $O_{n\ log\ n}$ Worst case performance: $O_{n\ log\ n}$</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/private/work/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</guid><description>The relocation table records the list of items that the file needs (from other object files or libraries).
The relocation record contains information like: which instructions need to be relocated (the offsets), which symbols are involved with the relocation and how to relocate the files relative to the symbols.</description></item><item><title>HTB - Catch Writeup</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-catch-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-catch-writeup/</guid><description>HTB - Catch Catching an API key out of an Android APK file.
Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ~/htb/catch &amp;gt; sudo nmap -sC -sV -oA nmap/catch 10.</description></item><item><title>HTB - Catch Writeup</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-catch-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-catch-writeup/</guid><description>HTB - Catch Catching an API key out of an Android APK file.
Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ~/htb/catch &amp;gt; sudo nmap -sC -sV -oA nmap/catch 10.</description></item><item><title>HTB - Catch Writeup</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-catch-writeup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-catch-writeup/</guid><description>HTB - Catch Catching an API key out of an Android APK file.
Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ~/htb/catch &amp;gt; sudo nmap -sC -sV -oA nmap/catch 10.</description></item><item><title>HTB - Driver</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-driver/</guid><description>HTB - Driver Printer exploitation!!
IP: 10.10.11.106
1 sudo nmap -sC -sV -oA driver.nmap $ip Where:</description></item><item><title>HTB - Driver</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-driver/</guid><description>HTB - Driver Printer exploitation!!
IP: 10.10.11.106
1 sudo nmap -sC -sV -oA driver.nmap $ip Where:</description></item><item><title>HTB - Driver</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-driver/</guid><description>HTB - Driver Printer exploitation!!
IP: 10.10.11.106
1 sudo nmap -sC -sV -oA driver.nmap $ip Where:</description></item><item><title>HTB - Pandora</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-pandora/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-pandora/</guid><description>HTB - Pandora We first enumerate:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo nmap -sC -sV -oA pandora 10.</description></item><item><title>HTB - Pandora</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-pandora/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-pandora/</guid><description>HTB - Pandora We first enumerate:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo nmap -sC -sV -oA pandora 10.</description></item><item><title>HTB - Pandora</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-pandora/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-pandora/</guid><description>HTB - Pandora We first enumerate:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo nmap -sC -sV -oA pandora 10.</description></item><item><title>HTB - Secret</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-secret/</guid><description>HTB - Secret It is all about secret ways to extract information from applications.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ~/htb/secret &amp;gt; sudo nmap -sC -sV -oA nmap/secret 10.</description></item><item><title>HTB - Secret</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-secret/</guid><description>HTB - Secret It is all about secret ways to extract information from applications.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ~/htb/secret &amp;gt; sudo nmap -sC -sV -oA nmap/secret 10.</description></item><item><title>HTB - Secret</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-secret/</guid><description>HTB - Secret It is all about secret ways to extract information from applications.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ~/htb/secret &amp;gt; sudo nmap -sC -sV -oA nmap/secret 10.</description></item><item><title>Identify Return Address</title><link>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</guid><description>Identify Return Address We need a memory address where our NOPs are located to tell the EIP to jump to it.</description></item><item><title>Identify Return Address</title><link>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</guid><description>Identify Return Address We need a memory address where our NOPs are located to tell the EIP to jump to it.</description></item><item><title>Identify Return Address</title><link>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</guid><description>Identify Return Address We need a memory address where our NOPs are located to tell the EIP to jump to it.</description></item><item><title>Impacket and Random Stuff</title><link>https://pietraferreira.github.io/quartz/notes/hacking/impacket-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/impacket-notes/</guid><description>Nmap Can use the -Pn switch to enumerate machines when packets are blocked by firewall. SMB Sever Message Block Usually port 445 1 smbclient -L {taget_IP} -U Administrator Impacket It is a framework written in Python for working with network protocols.</description></item><item><title>Inkblot Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/inkblot-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/inkblot-algorithm/</guid><description>Inkblot Algorithm Couldn&amp;rsquo;t find much online about it, but I think it&amp;rsquo;s a &amp;ldquo;populating&amp;rdquo; algorithm to find a path (A-&amp;gt;B).</description></item><item><title>Instruction Set Semantics</title><link>https://pietraferreira.github.io/quartz/notes/general/instruction-set-semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/instruction-set-semantics/</guid><description>Instruction Set Semantics Most general is the three address instruction set:
result = operand1 operator operand2 ^44cfb5
Two address instruction sets use one of the operand addresses for the result.</description></item><item><title>Intermediate Representations</title><link>https://pietraferreira.github.io/quartz/notes/general/intermediate-representations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/intermediate-representations/</guid><description>Intermediate Representations There are three main ones:
Parse Trees IDK What this is sorry :( Three Address Code</description></item><item><title>Introduction to Networking</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-intro-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-intro-networking/</guid><description>Introduction to Networking Overview There is a wide array of topologies (mesh, tree, star), mediums (ethernet, fiber, coax, wireless) and protocols (TCP, UDP, IPX).</description></item><item><title>Introduction to Networking</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-intro-networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-intro-networking/</guid><description>Introduction to Networking Overview There is a wide array of topologies (mesh, tree, star), mediums (ethernet, fiber, coax, wireless) and protocols (TCP, UDP, IPX).</description></item><item><title>Jump Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</guid><description>Jump Table It can either be an array of pointers to functions or an array of machine code jump instructions.</description></item><item><title>Jump Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</guid><description>Jump Table It can either be an array of pointers to functions or an array of machine code jump instructions.</description></item><item><title>Kruskal's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/kruskals-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/kruskals-algorithm/</guid><description>Kruskal&amp;rsquo;s Algorithm It is a minimum spanning subtree algorithm.
It performs well for sparse graphs due to simple data structures: $O_(E\ log\ N)$.</description></item><item><title>Lexical Analysis</title><link>https://pietraferreira.github.io/quartz/notes/general/lexical-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/lexical-analysis/</guid><description>Lexical Analysis It is the process of grouping individual characters into basic entities, known as tokens or lexemes.
Examples: integer, variable, addition operator.</description></item><item><title>Linear Equations</title><link>https://pietraferreira.github.io/quartz/notes/general/linear-equations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linear-equations/</guid><description>Linear Equations The basic representation is: $$\begin{align*} \begin{pmatrix} a_{11} &amp;amp; a_{12}\\ a_{21} &amp;amp; a_{22} \end{pmatrix} \begin{pmatrix} x_1\\ x_2 \end{pmatrix} = \begin{pmatrix} b_1\\ b_2 \end{pmatrix} \end{align*}$$</description></item><item><title>Linked List</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/linked-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/linked-list/</guid><description>Linked List It maintains the insertion order of elements, however they are not indexed. When searching, we start with the head and work our way through.</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/private/work/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/linker/</guid><description>Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Linker Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/general/linker-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linker-relaxation/</guid><description>How the linker optimises instructions for the compiler by having a second relaxation.
Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ cat test.</description></item><item><title>LLVM</title><link>https://pietraferreira.github.io/quartz/notes/general/llvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/llvm/</guid><description>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Prebuilt binaries of the LLVM toolchain can be downloaded from the LLVM Download Page.</description></item><item><title>LOLBins</title><link>https://pietraferreira.github.io/quartz/notes/hacking/lolbins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/lolbins/</guid><description>Aka Living off the land binaries, which are binaries that an attacker can use to perform actions beyond their original purpose.</description></item><item><title>LOLBins</title><link>https://pietraferreira.github.io/quartz/notes/hacking/lolbins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/lolbins/</guid><description>Aka Living off the land binaries, which are binaries that an attacker can use to perform actions beyond their original purpose.</description></item><item><title>Meterpreter</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-meterpreter-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-meterpreter-cheatsheet/</guid><description>Meterpreter Command Description help Open Meterpreter usage help. run &amp;lt;scriptname&amp;gt; Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.</description></item><item><title>Meterpreter</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-meterpreter-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-meterpreter-cheatsheet/</guid><description>Meterpreter Command Description help Open Meterpreter usage help. run &amp;lt;scriptname&amp;gt; Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.</description></item><item><title>MSFConsole Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-msfconsole-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-msfconsole-cheatsheet/</guid><description>MSFConsole Cheatsheet Command Description show exploits Show all exploits within the Framework. show payloads Show all payloads within the Framework.</description></item><item><title>MSFConsole Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-msfconsole-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-msfconsole-cheatsheet/</guid><description>MSFConsole Cheatsheet Command Description show exploits Show all exploits within the Framework. show payloads Show all payloads within the Framework.</description></item><item><title>Netcat</title><link>https://pietraferreira.github.io/quartz/notes/hacking/netcat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/netcat/</guid><description>Networking utility for reading from and writing to network connections using TCP or UDP.
Listening 1 victim@target:~$ nc -l -p 8080 &amp;gt; SharpKatz.</description></item><item><title>Netcat</title><link>https://pietraferreira.github.io/quartz/notes/hacking/netcat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/netcat/</guid><description>Networking utility for reading from and writing to network connections using TCP or UDP.
Listening 1 victim@target:~$ nc -l -p 8080 &amp;gt; SharpKatz.</description></item><item><title>Newton-Raphson Iteration</title><link>https://pietraferreira.github.io/quartz/notes/general/newton-raphson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/newton-raphson/</guid><description>Newton-Raphson Iteration Want to find the root of $f(x)$, for example a value for $x$ such that $f(x) = 0$.</description></item><item><title>Nginx</title><link>https://pietraferreira.github.io/quartz/notes/hacking/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/nginx/</guid><description>Used for transferring files to Apache.
Create Directory to Handle Uploaded Files 1 sudo mkdir -p /var/www/uploads/SecretUploadDirectory Change the Owner to www-data 1 sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory Create Nginx Configuration File In /etc/nginx/sites-available/upload.</description></item><item><title>Nginx</title><link>https://pietraferreira.github.io/quartz/notes/hacking/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/nginx/</guid><description>Used for transferring files to Apache.
Create Directory to Handle Uploaded Files 1 sudo mkdir -p /var/www/uploads/SecretUploadDirectory Change the Owner to www-data 1 sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory Create Nginx Configuration File In /etc/nginx/sites-available/upload.</description></item><item><title>Nmap Cheatsheet</title><link>https://pietraferreira.github.io/quartz/notes/hacking/nmap-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/nmap-cheatsheet/</guid><description>nmap flag Description -sV Versions -p &amp;lt;x&amp;gt; or -p- Port scan for port or all -Pn Disable host discovery -A Enables OS and version detection, execute built-in scripts -sC Scan with the default nmap scripts -v Verbose mode -sU UDP port scan -sS TCP SYN port scan` [!</description></item><item><title>P vs NP Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/p-vs-np/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/p-vs-np/</guid><description>P vs NP Problem Imagine an Oracle. Guesses and gets the right answer.
Build by (infinitely) many processors in a tree.</description></item><item><title>Parallel Computing Laboratory</title><link>https://pietraferreira.github.io/quartz/notes/private/work/parlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/parlab/</guid><description>Parallel Computing Laboratory The Par Lab was a five-year project to advance parallel computing funded by Microsoft and Intel for $10M over 5 years, from 2008 to 2013.</description></item><item><title>Parse Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/parse-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/parse-trees/</guid><description>Grammatically $S \rightarrow A | B$ $A \rightarrow A\ x | y$ $B \rightarrow z$
Parse tree for yxxz: Parsing Sentences Apply successive productions.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the dynamic linker.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the dynamic linker.</description></item><item><title>Prim's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</guid><description>Prim&amp;rsquo;s Algorithm It is a minimum spanning tree algorithm.
It scales well, fast with dense graphs.
It has a of $O_{E\ log\ N}$ with binary heap and $O_{E\ +\ log\ N}$ with Fibonacci heap.</description></item><item><title>Queue</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/queue/</guid><description>Queue First in, last out (FIFO), double linked list works well. Think of a standard queue, for example at the bank.</description></item><item><title>Quicksort</title><link>https://pietraferreira.github.io/quartz/notes/general/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/quicksort/</guid><description>It picks a midpoint (approximate the median) and partition values, into those less than the midpoint (left) and greater (right).</description></item><item><title>Radix Sort</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/radix-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/radix-sort/</guid><description>Radix Sort It is a non-comparison sorting method which only works on binary or integer data.
It takes $O(nb)$ time complexity, where:</description></item><item><title>Random Priviledge Escalation Notes</title><link>https://pietraferreira.github.io/quartz/notes/hacking/priv-escalation-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/priv-escalation-notes/</guid><description>Remove duplicates and clean file:
1 sort &amp;lt;file&amp;gt; | uniq &amp;gt; &amp;lt;output_file&amp;gt; Find processes in shell:
1 find / -perm -u=s -type f 2&amp;gt;/dev/nul Windows Privilege Scalation The easiest way to gain access to another user is to gather credentials from a compromised machine.</description></item><item><title>RDP</title><link>https://pietraferreira.github.io/quartz/notes/hacking/rdp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/rdp/</guid><description>Stands for Remote Desktop Protocol.
Mounting using rdesktop 1 rdesktop 10.10.10.132 -d HTB -u administrator -p &amp;#39;Password&amp;#39; -r disk:linux=&amp;#39;home/user/rdesktop/files&amp;#39; 1 xfreerdp /v:10.</description></item><item><title>RDP</title><link>https://pietraferreira.github.io/quartz/notes/hacking/rdp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/rdp/</guid><description>Stands for Remote Desktop Protocol.
Mounting using rdesktop 1 rdesktop 10.10.10.132 -d HTB -u administrator -p &amp;#39;Password&amp;#39; -r disk:linux=&amp;#39;home/user/rdesktop/files&amp;#39; 1 xfreerdp /v:10.</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</guid><description>Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item><item><title>RISC-V Assembler Reference</title><link>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/riscv-assembler-reference/</guid><description>This document gives an overview of RISC-V assembly language. First, an introduction to assembler and linker concepts, then sections describing assembler directives, pseudo- instructions, relocation functions, and assembler concepts such as labels, relative and absolute addressing, immediate values, constants and finally control and status registers.</description></item><item><title>RISC-V Toolchain</title><link>https://pietraferreira.github.io/quartz/notes/general/riscv-toolchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/riscv-toolchain/</guid><description>RISC-V Toolchain There are two RISC-V toolchains that are popularly used:
The GNU RISC-V toolchain The LLVM RISC-V toolchain Both toolchains provide a state-of-the-art optimising compiler, assembler, linker, and various other tools to build applications that run on RISC-V machines.</description></item><item><title>Shell Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/shell-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/shell-sort/</guid><description>Shell sort adds one more loop outside bubble sort.
It starts by sorting small overlapping subsets, then makes then smaller but by then the array is mostly sorted.</description></item><item><title>Source Code Optimisation</title><link>https://pietraferreira.github.io/quartz/notes/general/source-code-optimisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/source-code-optimisation/</guid><description>Source Code Optimisation In addition to compiler optimisations, there are several software engineering techniques to reduce code size. These techniques take advantage of well-known software engineering methodologies and programming language features.</description></item><item><title>Stack-based Overflow - Linux x86</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-stack-based-overflow-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-stack-based-overflow-linux/</guid><description>They are caused by incorrect program code, which cannot process too large amounts of data correctly by the CPU and can, therefore, manipulate the CPU&amp;rsquo;s processing.</description></item><item><title>Stack-based Overflow - Linux x86</title><link>https://pietraferreira.github.io/quartz/notes/hacking/htb-stack-based-overflow-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/htb-stack-based-overflow-linux/</guid><description>They are caused by incorrect program code, which cannot process too large amounts of data correctly by the CPU and can, therefore, manipulate the CPU&amp;rsquo;s processing.</description></item><item><title>Stack-overflow Prevention Techniques and Mechanisms</title><link>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</guid><description>Stack-overflow Prevention Techniques and Mechanisms Security mechanisms:
Canaries Address Space Layout Randomisation ( ) Data Execution Prevention (DEP) Canaries They are known values written to the stack between buffer and control data to detect buffer overflows.</description></item><item><title>Stack-overflow Prevention Techniques and Mechanisms</title><link>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</guid><description>Stack-overflow Prevention Techniques and Mechanisms Security mechanisms:
Canaries Address Space Layout Randomisation ( ) Data Execution Prevention (DEP) Canaries They are known values written to the stack between buffer and control data to detect buffer overflows.</description></item><item><title>Stack-overflow Prevention Techniques and Mechanisms</title><link>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</guid><description>Stack-overflow Prevention Techniques and Mechanisms Security mechanisms:
Canaries Address Space Layout Randomisation ( ) Data Execution Prevention (DEP) Canaries They are known values written to the stack between buffer and control data to detect buffer overflows.</description></item><item><title>State Machine Diagrams - Part 1</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/state-machine-diagrams-part1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/state-machine-diagrams-part1/</guid><description>Introduction Every object takes a finite number of different stages during its life. State machine diagrams are used as follows:</description></item><item><title>State Machine Diagrams - Part 2</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/state-machine-diagrams-part2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/state-machine-diagrams-part2/</guid><description>Recap: A Simple State Composite State Also known as complex state or nested state.
It contains other states, substates.</description></item><item><title>Take Control of EIP</title><link>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</guid><description>This is part of a guide that you can find here.
We need to get the instruction pointer (EIP) under control so we can tell it to which address to jump.</description></item><item><title>Take Control of EIP</title><link>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</guid><description>This is part of a guide that you can find here.
We need to get the instruction pointer (EIP) under control so we can tell it to which address to jump.</description></item><item><title>Take Control of EIP</title><link>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</guid><description>This is part of a guide that you can find here.
We need to get the instruction pointer (EIP) under control so we can tell it to which address to jump.</description></item><item><title>TryHackMe - Encryption 101</title><link>https://pietraferreira.github.io/quartz/notes/hacking/thm-encryption101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/thm-encryption101/</guid><description>Encryption - Crypto 101 Ciphertext - The result of encrypting a plain text, encrypted data
Cipher - A method of encrypting or decrypting data.</description></item><item><title>TryHackMe - Encryption 101</title><link>https://pietraferreira.github.io/quartz/notes/hacking/thm-encryption101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/thm-encryption101/</guid><description>Encryption - Crypto 101 Ciphertext - The result of encrypting a plain text, encrypted data
Cipher - A method of encrypting or decrypting data.</description></item><item><title>TryHackMe - Metasploit</title><link>https://pietraferreira.github.io/quartz/notes/hacking/thm-metasploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/thm-metasploit/</guid><description>Metasploit Docs: https://docs.metasploit.com/
Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation.</description></item><item><title>TryHackMe - Metasploit</title><link>https://pietraferreira.github.io/quartz/notes/hacking/thm-metasploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/thm-metasploit/</guid><description>Metasploit Docs: https://docs.metasploit.com/
Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation.</description></item><item><title>TryHackMe - Metasploit</title><link>https://pietraferreira.github.io/quartz/notes/hacking/thm-metasploit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/thm-metasploit/</guid><description>Metasploit Docs: https://docs.metasploit.com/
Metasploit is the most widely used exploitation framework. Metasploit is a powerful tool that can support all phases of a penetration testing engagement, from information gathering to post-exploitation.</description></item><item><title>UML - All-Together</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-all-together/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-all-together/</guid><description> Notation Elements</description></item><item><title>UML - Class Diagram</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-class-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-class-diagram/</guid><description>Objects Individuals of a system:
Object Diagram The objects of a system and their relationships, snapshot of objects at a specific moment in time:</description></item><item><title>UML - Sequence Diagram</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-sequence-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-sequence-diagram/</guid><description>Inter-object behaviour: interactions between objects.
Interaction: how data is exchanged between interaction partners.
Interaction partners: - Human (lectures, administrator, &amp;hellip;) - Non-human (sever, printer, executable software, &amp;hellip;)</description></item><item><title>UML @ Classroom - Chapter 3 (Creating a Use Case Diagram)</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/creating-a-use-case-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/creating-a-use-case-diagram/</guid><description>This is continuation of my notes on Use Case Diagrams from the book UML @ Classroom.
The first step is to identify actors and use cases and then place them in relationships with one another.</description></item><item><title>UML @ Classroom - Chapter 3 (Use Case Diagram)</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-classroom-chap3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2002/uml-classroom-chap3/</guid><description>Use Case Diagram Allows to describe the possible usage scenarios (use cases) that a system is developed for. Doesn&amp;rsquo;t address realisation details, for example data structures or algorithms.</description></item><item><title>Vectors and Arrays</title><link>https://pietraferreira.github.io/quartz/notes/general/vectors-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/vectors-arrays/</guid><description>Vectors and Arrays Vectors are typically 1-d whereas arrays can be multi-dimensional. in C/C++ they are indexed from zero.</description></item></channel></rss>