<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/relocations on</title><link>https://pietraferreira.github.io/quartz/tags/cs/relocations/</link><description>Recent content in cs/relocations on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/cs/relocations/index.xml" rel="self" type="application/rss+xml"/><item><title>Fixups</title><link>https://pietraferreira.github.io/quartz/notes/general/fixups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/fixups/</guid><description>Fix-ups Fix-ups are used to represent information in instructions which is currently unknown. During instruction encoding, if some information is unknown (such as a memory location of an external symbol), it is encoded as if the value is equal to 0 and a fix-up is emitted which contains information on how to rewrite the value when information is known.</description></item><item><title>Howto Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/howto-table/</guid><description>The relocation table records the list of items that the file needs (from other object files or libraries).
The relocation record contains information like: which instructions need to be relocated (the offsets), which symbols are involved with the relocation and how to relocate the files relative to the symbols.</description></item><item><title>Jump Table</title><link>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/jump-table/</guid><description>Jump Table It can either be an array of pointers to functions or an array of machine code jump instructions.</description></item><item><title>PLT and GOT</title><link>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/plt-and-got/</guid><description>Procedure Linkage Table and Global Offset Table If a program receives an incorrect input for example, it terminates, rendering useless all of the relocation work performed by the dynamic linker.</description></item><item><title>Relocation Prototype</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocation-prototype/relocation-prototype/</guid><description>Relocation Handling Prototype Introduction to the project needed for future psABI meeting eg: in COREV we have custom relocations that live in the reserved space, but we need to be able to share that reserved space with other tool chains.</description></item><item><title>Relocations</title><link>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/private/work/relocations/</guid><description>Relocations Different programs will be different sizes, so when the shared library gets mapped into the address space of different programs, it will be at different addresses.</description></item></channel></rss>