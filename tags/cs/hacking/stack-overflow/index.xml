<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/hacking/stack-overflow on</title><link>https://pietraferreira.github.io/quartz/tags/cs/hacking/stack-overflow/</link><description>Recent content in cs/hacking/stack-overflow on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/cs/hacking/stack-overflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Identify Return Address</title><link>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/identify-return-address/</guid><description>Identify Return Address We need a memory address where our NOPs are located to tell the EIP to jump to it.</description></item><item><title>Stack-overflow Prevention Techniques and Mechanisms</title><link>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/so-prevention-techniques/</guid><description>Stack-overflow Prevention Techniques and Mechanisms Security mechanisms:
Canaries Address Space Layout Randomisation ( ) Data Execution Prevention (DEP) Canaries They are known values written to the stack between buffer and control data to detect buffer overflows.</description></item><item><title>Take Control of EIP</title><link>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/hacking/take-control-eip/</guid><description>This is part of a guide that you can find here.
We need to get the instruction pointer (EIP) under control so we can tell it to which address to jump.</description></item></channel></rss>