<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>engineer-training on</title><link>https://pietraferreira.github.io/quartz/tags/engineer-training/</link><description>Recent content in engineer-training on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/engineer-training/index.xml" rel="self" type="application/rss+xml"/><item><title>Chomsky Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/chomsky-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/chomsky-grammars/</guid><description>Chomsky Grammars Type 0 (free) grammars:
Productions of the form u $\rightarrow$ v, where: u, v are arbitrary string in V.</description></item><item><title>CS Problems</title><link>https://pietraferreira.github.io/quartz/notes/general/cs-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/cs-problems/</guid><description>CS Problems P vs NP problem. K-clique in a graph. Boolean satisfiability. Travelling Salesman problem. Knapsack problem. Linear Knapsack Problem.</description></item><item><title>Depth-First Search</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/depth-first-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/depth-first-search/</guid><description>Depth-First Search It allows us to explore nodes and edges of a graph.
The traversal will go as far as possible down a path until a dead end is reached.</description></item><item><title>Dijkstra Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/dijkstra-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/dijkstra-algorithm/</guid><description>It is used to determine the shortest path from one node in the graph to every other node within the same graph, provided they can be reached from the source node.</description></item><item><title>Equivalent Grammars</title><link>https://pietraferreira.github.io/quartz/notes/general/equivalent-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/equivalent-grammars/</guid><description>Equivalent Grammars Equivalent grammars define the same language:
G A $\rightarrow$ Ax | y
G' A $\rightarrow$ yB B $\rightarrow$ yB | $\varepsilon$</description></item><item><title>Exhaustive Search</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/exhaustive-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/exhaustive-search/</guid><description>It systematically evaluates every possible path in a graph. It is guaranteed to find what we are looking for, however it is unsuitable for most real world problems.</description></item><item><title>Floyd-Warshall</title><link>https://pietraferreira.github.io/quartz/notes/general/floyd-warshall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/floyd-warshall/</guid><description>Floyd-Warshall It is a shortest path algorithm that calculates the shorted path between all pairs of vertices.
Negative edges are allowed.</description></item><item><title>Formal Languages</title><link>https://pietraferreira.github.io/quartz/notes/general/formal-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/formal-languages/</guid><description>Formal Languages Formal languages are used among others as the basis for defining the grammar of programming languages and formalised versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics.</description></item><item><title>Garbage Collection</title><link>https://pietraferreira.github.io/quartz/notes/general/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/garbage-collection/</guid><description>Garbage Collection How do you reuse memory in a program?
Explicit allocation and free: malloc/free (C), new/delete (C++).
It traces garbage collection and does reference counting.</description></item><item><title>GNU</title><link>https://pietraferreira.github.io/quartz/notes/general/gnu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gnu/</guid><description>GNU Extensive collection of free software which can be used as an operating system or in parts with other operating systems.</description></item><item><title>Graphs</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/graphs/</guid><description>Graphs A graph consists of:
A set of fixed objects, nodes. A set of edges, which may have arrows and have values attached.</description></item><item><title>Halting Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/halting-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/halting-problem/</guid><description>Halting Problem A program to determine if any given program will complete in finite time.
So imagine you write this program, P, and in its main program it has:</description></item><item><title>Hash Tables</title><link>https://pietraferreira.github.io/quartz/notes/general/hash-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/hash-tables/</guid><description>Hash Tables A hash table is a data structure which offers a fast implementation of the associative array (abstract data structure, also called a map, symbol table or dictionary) .</description></item><item><title>Heapsort</title><link>https://pietraferreira.github.io/quartz/notes/general/heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/heapsort/</guid><description>Heapsort Uses binary heap trees to sort (I think!).
It has average : $O_{n\ log\ n}$ Worst case performance: $O_{n\ log\ n}$</description></item><item><title>How to add an instruction to the GNU assembler</title><link>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/how-to-add-instructions-to-as/</guid><description>How to add an instruction to the GNU assembler We can use cv.starti as an example. It is part of the hardware loops extension and declares the address of the offset to the start of the loop as well as the loop number, 0 or 1 depending if it is an inner or outer loop.</description></item><item><title>Inkblot Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/inkblot-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/inkblot-algorithm/</guid><description>Inkblot Algorithm Couldn&amp;rsquo;t find much online about it, but I think it&amp;rsquo;s a &amp;ldquo;populating&amp;rdquo; algorithm to find a path (A-&amp;gt;B).</description></item><item><title>Instruction Set Semantics</title><link>https://pietraferreira.github.io/quartz/notes/general/instruction-set-semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/instruction-set-semantics/</guid><description>Instruction Set Semantics Most general is the three address instruction set:
result = operand1 operator operand2 ^44cfb5
Two address instruction sets use one of the operand addresses for the result.</description></item><item><title>Intermediate Representations</title><link>https://pietraferreira.github.io/quartz/notes/general/intermediate-representations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/intermediate-representations/</guid><description>Intermediate Representations There are three main ones:
Parse Trees Three Address Code</description></item><item><title>Kruskal's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/kruskals-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/kruskals-algorithm/</guid><description>Kruskal&amp;rsquo;s Algorithm It is a minimum spanning subtree algorithm.
It performs well for sparse graphs due to simple data structures: $O_(E\ log\ N)$.</description></item><item><title>Lexical Analysis</title><link>https://pietraferreira.github.io/quartz/notes/general/lexical-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/lexical-analysis/</guid><description>Lexical Analysis It is the process of grouping individual characters into basic entities, known as tokens or lexemes.
Examples: integer, variable, addition operator.</description></item><item><title>Linear Equations</title><link>https://pietraferreira.github.io/quartz/notes/general/linear-equations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linear-equations/</guid><description>Linear Equations The basic representation is: $$\begin{align*} \begin{pmatrix} a_{11} &amp;amp; a_{12}\\ a_{21} &amp;amp; a_{22} \end{pmatrix} \begin{pmatrix} x_1\\ x_2 \end{pmatrix} = \begin{pmatrix} b_1\\ b_2 \end{pmatrix} \end{align*}$$</description></item><item><title>Linear Knapsack Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/linear-knapsack-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linear-knapsack-problem/</guid><description>Linear Knapsack Problem Also known as the stock cutting problem.
Consider capacity 100, and object of size {53, 53, 49, 49, 3}.</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/general/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linker/</guid><description>Linker Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Lists</title><link>https://pietraferreira.github.io/quartz/notes/general/lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/lists/</guid><description>Lists A list is a sequence of zero or more data items, with the total number of items being the length of the list.</description></item><item><title>Minimum Spanning Tree</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/minimum-spanning-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/minimum-spanning-tree/</guid><description>It is a subtree with the minimum possible edge weight that connects all nodes together.
There must exist no cycles in the tree, meaning it is usually a complete graph.</description></item><item><title>Newton-Raphson Iteration</title><link>https://pietraferreira.github.io/quartz/notes/general/newton-raphson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/newton-raphson/</guid><description>Newton-Raphson Iteration Want to find the root of $f(x)$, for example a value for $x$ such that $f(x) = 0$.</description></item><item><title>P vs NP Problem</title><link>https://pietraferreira.github.io/quartz/notes/general/p-vs-np/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/p-vs-np/</guid><description>P vs NP Problem Imagine an Oracle. Guesses and gets the right answer.
Build by (infinitely) many processors in a tree.</description></item><item><title>Parse Trees</title><link>https://pietraferreira.github.io/quartz/notes/general/parse-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/parse-trees/</guid><description>Parse Trees Grammatically $S \rightarrow A | B$ $A \rightarrow A\ x | y$ $B \rightarrow z$
Parse tree for yxxz: Parsing Sentences Apply successive productions.</description></item><item><title>Prim's Algorithm</title><link>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/prims-algorithm/</guid><description>Prim&amp;rsquo;s Algorithm It is a minimum spanning tree algorithm.
It scales well, fast with dense graphs.
It has a of $O_{E\ log\ N}$ with binary heap and $O_{E\ +\ log\ N}$ with Fibonacci heap.</description></item><item><title>Quicksort</title><link>https://pietraferreira.github.io/quartz/notes/general/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/quicksort/</guid><description>Quicksort It picks a midpoint (approximate the median) and partition values, into those less than the midpoint (left) and greater (right).</description></item><item><title>Sets and Maps</title><link>https://pietraferreira.github.io/quartz/notes/general/sets-and-maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/sets-and-maps/</guid><description>Sets and Maps Sets are a collection of objects:
They might be ordered or unordered. Two variants: Single instance of any object.</description></item><item><title>Shell Sort</title><link>https://pietraferreira.github.io/quartz/notes/general/shell-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/shell-sort/</guid><description>Shell Sort Shell sort adds one more loop outside bubble sort.
It starts by sorting small overlapping subsets, then makes then smaller but by then the array is mostly sorted.</description></item><item><title>Trees</title><link>https://pietraferreira.github.io/quartz/notes/university/cs2004/trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/university/cs2004/trees/</guid><description>Trees Abstract data type that represents a hierarchical tree structure with a set of connected nodes. Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the root node, which has no parent.</description></item><item><title>Vectors and Arrays</title><link>https://pietraferreira.github.io/quartz/notes/general/vectors-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/vectors-arrays/</guid><description>Vectors and Arrays Vectors are typically 1-d whereas arrays can be multi-dimensional. in C/C++ they are indexed from zero.</description></item></channel></rss>