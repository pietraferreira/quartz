<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>compilers on</title><link>https://pietraferreira.github.io/quartz/tags/compilers/</link><description>Recent content in compilers on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pietraferreira.github.io/quartz/tags/compilers/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiler Flags</title><link>https://pietraferreira.github.io/quartz/notes/general/compiler-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/compiler-flags/</guid><description>Compiler Flags An industrial-strength compiler like GCC and LLVM has hundreds of flags that affect how the compiler behaves. There are many types of compiler flags and there is no easy way to classify types of compiler flags.</description></item><item><title>Compiler Instrumentation</title><link>https://pietraferreira.github.io/quartz/notes/general/compiler-instrumentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/compiler-instrumentation/</guid><description>Compiler Instrumentation As the compiler transforms the source code, it can also &amp;lsquo;insert&amp;rsquo; additional code into a program. These transformations are called compiler instrumentation.</description></item><item><title>Cross-Compilation</title><link>https://pietraferreira.github.io/quartz/notes/general/cross-compilation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/cross-compilation/</guid><description>Cross-Compilation To understand the concept of cross-compilation, let’s revisit the definition of a compiler. A compiler is a program that converts a program from one language to another.</description></item><item><title>GCC</title><link>https://pietraferreira.github.io/quartz/notes/general/gcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gcc/</guid><description>GCC The popular gcc compiler ships with the gcc toolchain. It can be downloaded from GCC mirror sites. In order to download the precompiled binaries that are ready to use, go to the  Installing GCC: Binaries page.</description></item><item><title>GNU</title><link>https://pietraferreira.github.io/quartz/notes/general/gnu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/gnu/</guid><description>GNU Extensive collection of free software which can be used as an operating system or in parts with other operating systems.</description></item><item><title>How to Write a LLVM Backend</title><link>https://pietraferreira.github.io/quartz/notes/general/how-to-write-a-llvm-backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/how-to-write-a-llvm-backend/</guid><description>How to Write a LLVM Backend More information here.
LLVM converts LLVM IR to code for a specific target, the steps are:</description></item><item><title>Linker</title><link>https://pietraferreira.github.io/quartz/notes/general/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linker/</guid><description>Linker Official documentation: https://sourceware.org/binutils/docs/ld/
The linker combines a number of object and archive files, relocates their data and ties up symbol references.</description></item><item><title>Linker Relaxation</title><link>https://pietraferreira.github.io/quartz/notes/general/linker-relaxation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/linker-relaxation/</guid><description>Linker Relaxation How the linker optimises instructions for the compiler by having a second relaxation.
Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ cat test.</description></item><item><title>LLVM</title><link>https://pietraferreira.github.io/quartz/notes/general/llvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pietraferreira.github.io/quartz/notes/general/llvm/</guid><description>LLVM The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Prebuilt binaries of the LLVM toolchain can be downloaded from the LLVM Download Page.</description></item></channel></rss>